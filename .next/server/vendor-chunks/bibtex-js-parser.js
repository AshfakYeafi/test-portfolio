/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bibtex-js-parser";
exports.ids = ["vendor-chunks/bibtex-js-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/bibtex-js-parser/cjs/bibtex-js-parser.js":
/*!***************************************************************!*\
  !*** ./node_modules/bibtex-js-parser/cjs/bibtex-js-parser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! For license information please see bibtex-js-parser.js.LICENSE.txt */ !function() {\n    var t = {\n        654: function() {}\n    }, e = {};\n    function n(s) {\n        var i = e[s];\n        if (void 0 !== i) return i.exports;\n        var r = e[s] = {\n            exports: {}\n        };\n        return t[s](r, r.exports, n), r.exports;\n    }\n    n.d = function(t, e) {\n        for(var s in e)n.o(e, s) && !n.o(t, s) && Object.defineProperty(t, s, {\n            enumerable: !0,\n            get: e[s]\n        });\n    }, n.o = function(t, e) {\n        return Object.prototype.hasOwnProperty.call(t, e);\n    }, n.r = function(t) {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n            value: \"Module\"\n        }), Object.defineProperty(t, \"__esModule\", {\n            value: !0\n        });\n    };\n    var s = {};\n    !function() {\n        \"use strict\";\n        n.r(s), n.d(s, {\n            parseToJSON: function() {\n                return Tn;\n            },\n            parseToJSONString: function() {\n                return xn;\n            }\n        }), String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32)), String.prototype.hashCode = function() {\n            const t = this.toString();\n            let e, n;\n            const s = 3 & t.length, i = t.length - s;\n            let r = String.prototype.seed;\n            const o = 3432918353, l = 461845907;\n            let a = 0;\n            for(; a < i;)n = 255 & t.charCodeAt(a) | (255 & t.charCodeAt(++a)) << 8 | (255 & t.charCodeAt(++a)) << 16 | (255 & t.charCodeAt(++a)) << 24, ++a, n = (65535 & n) * o + (((n >>> 16) * o & 65535) << 16) & 4294967295, n = n << 15 | n >>> 17, n = (65535 & n) * l + (((n >>> 16) * l & 65535) << 16) & 4294967295, r ^= n, r = r << 13 | r >>> 19, e = 5 * (65535 & r) + ((5 * (r >>> 16) & 65535) << 16) & 4294967295, r = 27492 + (65535 & e) + ((58964 + (e >>> 16) & 65535) << 16);\n            switch(n = 0, s){\n                case 3:\n                    n ^= (255 & t.charCodeAt(a + 2)) << 16;\n                case 2:\n                    n ^= (255 & t.charCodeAt(a + 1)) << 8;\n                case 1:\n                    n ^= 255 & t.charCodeAt(a), n = (65535 & n) * o + (((n >>> 16) * o & 65535) << 16) & 4294967295, n = n << 15 | n >>> 17, n = (65535 & n) * l + (((n >>> 16) * l & 65535) << 16) & 4294967295, r ^= n;\n            }\n            return r ^= t.length, r ^= r >>> 16, r = 2246822507 * (65535 & r) + ((2246822507 * (r >>> 16) & 65535) << 16) & 4294967295, r ^= r >>> 13, r = 3266489909 * (65535 & r) + ((3266489909 * (r >>> 16) & 65535) << 16) & 4294967295, r ^= r >>> 16, r >>> 0;\n        }, String.prototype.codePointAt || function() {\n            var t = function() {\n                let t;\n                try {\n                    const e = {}, n = Object.defineProperty;\n                    t = n(e, e, e) && n;\n                } catch (t) {}\n                return t;\n            }();\n            const e = function(t) {\n                if (null == this) throw TypeError();\n                const e = String(this), n = e.length;\n                let s = t ? Number(t) : 0;\n                if (s != s && (s = 0), s < 0 || s >= n) return;\n                const i = e.charCodeAt(s);\n                let r;\n                return i >= 55296 && i <= 56319 && n > s + 1 && (r = e.charCodeAt(s + 1), r >= 56320 && r <= 57343) ? 1024 * (i - 55296) + r - 56320 + 65536 : i;\n            };\n            t ? t(String.prototype, \"codePointAt\", {\n                value: e,\n                configurable: !0,\n                writable: !0\n            }) : String.prototype.codePointAt = e;\n        }(), String.fromCodePoint || function() {\n            const t = function() {\n                let t;\n                try {\n                    const e = {}, n = Object.defineProperty;\n                    t = n(e, e, e) && n;\n                } catch (t) {}\n                return t;\n            }(), e = String.fromCharCode, n = Math.floor, s = function(t) {\n                const s = 16384, i = [];\n                let r, o, l = -1;\n                const a = arguments.length;\n                if (!a) return \"\";\n                let h = \"\";\n                for(; ++l < a;){\n                    let t = Number(arguments[l]);\n                    if (!isFinite(t) || t < 0 || t > 1114111 || n(t) !== t) throw RangeError(\"Invalid code point: \" + t);\n                    t <= 65535 ? i.push(t) : (t -= 65536, r = 55296 + (t >> 10), o = t % 1024 + 56320, i.push(r, o)), (l + 1 === a || i.length > s) && (h += e.apply(null, i), i.length = 0);\n                }\n                return h;\n            };\n            t ? t(String, \"fromCodePoint\", {\n                value: s,\n                configurable: !0,\n                writable: !0\n            }) : String.fromCodePoint = s;\n        }();\n        class t {\n            constructor(){\n                this.source = null, this.type = null, this.channel = null, this.start = null, this.stop = null, this.tokenIndex = null, this.line = null, this.column = null, this._text = null;\n            }\n            getTokenSource() {\n                return this.source[0];\n            }\n            getInputStream() {\n                return this.source[1];\n            }\n            get text() {\n                return this._text;\n            }\n            set text(t) {\n                this._text = t;\n            }\n        }\n        function e(t, e) {\n            if (!Array.isArray(t) || !Array.isArray(e)) return !1;\n            if (t === e) return !0;\n            if (t.length !== e.length) return !1;\n            for(let n = 0; n < t.length; n++)if (!(t[n] === e[n] || t[n].equals && t[n].equals(e[n]))) return !1;\n            return !0;\n        }\n        t.INVALID_TYPE = 0, t.EPSILON = -2, t.MIN_USER_TOKEN_TYPE = 1, t.EOF = -1, t.DEFAULT_CHANNEL = 0, t.HIDDEN_CHANNEL = 1;\n        class i {\n            constructor(){\n                this.count = 0, this.hash = 0;\n            }\n            update() {\n                for(let t = 0; t < arguments.length; t++){\n                    const e = arguments[t];\n                    if (null != e) if (Array.isArray(e)) this.update.apply(this, e);\n                    else {\n                        let t = 0;\n                        switch(typeof e){\n                            case \"undefined\":\n                            case \"function\":\n                                continue;\n                            case \"number\":\n                            case \"boolean\":\n                                t = e;\n                                break;\n                            case \"string\":\n                                t = e.hashCode();\n                                break;\n                            default:\n                                e.updateHashCode ? e.updateHashCode(this) : console.log(\"No updateHashCode for \" + e.toString());\n                                continue;\n                        }\n                        t *= 3432918353, t = t << 15 | t >>> 17, t *= 461845907, this.count = this.count + 1;\n                        let n = this.hash ^ t;\n                        n = n << 13 | n >>> 19, n = 5 * n + 3864292196, this.hash = n;\n                    }\n                }\n            }\n            finish() {\n                let t = this.hash ^ 4 * this.count;\n                return t ^= t >>> 16, t *= 2246822507, t ^= t >>> 13, t *= 3266489909, t ^= t >>> 16, t;\n            }\n            static hashStuff() {\n                const t = new i;\n                return t.update.apply(t, arguments), t.finish();\n            }\n        }\n        function r(t) {\n            return t ? t.hashCode() : -1;\n        }\n        function o(t, e) {\n            return t ? t.equals(e) : t === e;\n        }\n        function l(t) {\n            return null === t ? \"null\" : t;\n        }\n        function a(t) {\n            return Array.isArray(t) ? \"[\" + t.map(l).join(\", \") + \"]\" : \"null\";\n        }\n        const h = \"h-\";\n        class c {\n            constructor(t, e){\n                this.data = {}, this.hashFunction = t || r, this.equalsFunction = e || o;\n            }\n            add(t) {\n                const e = h + this.hashFunction(t);\n                if (e in this.data) {\n                    const n = this.data[e];\n                    for(let e = 0; e < n.length; e++)if (this.equalsFunction(t, n[e])) return n[e];\n                    return n.push(t), t;\n                }\n                return this.data[e] = [\n                    t\n                ], t;\n            }\n            has(t) {\n                return null != this.get(t);\n            }\n            get(t) {\n                const e = h + this.hashFunction(t);\n                if (e in this.data) {\n                    const n = this.data[e];\n                    for(let e = 0; e < n.length; e++)if (this.equalsFunction(t, n[e])) return n[e];\n                }\n                return null;\n            }\n            values() {\n                return Object.keys(this.data).filter((t)=>t.startsWith(h)).flatMap((t)=>this.data[t], this);\n            }\n            toString() {\n                return a(this.values());\n            }\n            get length() {\n                return Object.keys(this.data).filter((t)=>t.startsWith(h)).map((t)=>this.data[t].length, this).reduce((t, e)=>t + e, 0);\n            }\n        }\n        class u {\n            hashCode() {\n                const t = new i;\n                return this.updateHashCode(t), t.finish();\n            }\n            evaluate(t, e) {}\n            evalPrecedence(t, e) {\n                return this;\n            }\n            static andContext(t, e) {\n                if (null === t || t === u.NONE) return e;\n                if (null === e || e === u.NONE) return t;\n                const n = new d(t, e);\n                return 1 === n.opnds.length ? n.opnds[0] : n;\n            }\n            static orContext(t, e) {\n                if (null === t) return e;\n                if (null === e) return t;\n                if (t === u.NONE || e === u.NONE) return u.NONE;\n                const n = new p(t, e);\n                return 1 === n.opnds.length ? n.opnds[0] : n;\n            }\n        }\n        class d extends u {\n            constructor(t, e){\n                super();\n                const n = new c;\n                t instanceof d ? t.opnds.map(function(t) {\n                    n.add(t);\n                }) : n.add(t), e instanceof d ? e.opnds.map(function(t) {\n                    n.add(t);\n                }) : n.add(e);\n                const s = g(n);\n                if (s.length > 0) {\n                    let t = null;\n                    s.map(function(e) {\n                        (null === t || e.precedence < t.precedence) && (t = e);\n                    }), n.add(t);\n                }\n                this.opnds = Array.from(n.values());\n            }\n            equals(t) {\n                return this === t || t instanceof d && e(this.opnds, t.opnds);\n            }\n            updateHashCode(t) {\n                t.update(this.opnds, \"AND\");\n            }\n            evaluate(t, e) {\n                for(let n = 0; n < this.opnds.length; n++)if (!this.opnds[n].evaluate(t, e)) return !1;\n                return !0;\n            }\n            evalPrecedence(t, e) {\n                let n = !1;\n                const s = [];\n                for(let i = 0; i < this.opnds.length; i++){\n                    const r = this.opnds[i], o = r.evalPrecedence(t, e);\n                    if (n |= o !== r, null === o) return null;\n                    o !== u.NONE && s.push(o);\n                }\n                if (!n) return this;\n                if (0 === s.length) return u.NONE;\n                let i = null;\n                return s.map(function(t) {\n                    i = null === i ? t : u.andContext(i, t);\n                }), i;\n            }\n            toString() {\n                const t = this.opnds.map((t)=>t.toString());\n                return (t.length > 3 ? t.slice(3) : t).join(\"&&\");\n            }\n        }\n        class p extends u {\n            constructor(t, e){\n                super();\n                const n = new c;\n                t instanceof p ? t.opnds.map(function(t) {\n                    n.add(t);\n                }) : n.add(t), e instanceof p ? e.opnds.map(function(t) {\n                    n.add(t);\n                }) : n.add(e);\n                const s = g(n);\n                if (s.length > 0) {\n                    const t = s.sort(function(t, e) {\n                        return t.compareTo(e);\n                    }), e = t[t.length - 1];\n                    n.add(e);\n                }\n                this.opnds = Array.from(n.values());\n            }\n            equals(t) {\n                return this === t || t instanceof p && e(this.opnds, t.opnds);\n            }\n            updateHashCode(t) {\n                t.update(this.opnds, \"OR\");\n            }\n            evaluate(t, e) {\n                for(let n = 0; n < this.opnds.length; n++)if (this.opnds[n].evaluate(t, e)) return !0;\n                return !1;\n            }\n            evalPrecedence(t, e) {\n                let n = !1;\n                const s = [];\n                for(let i = 0; i < this.opnds.length; i++){\n                    const r = this.opnds[i], o = r.evalPrecedence(t, e);\n                    if (n |= o !== r, o === u.NONE) return u.NONE;\n                    null !== o && s.push(o);\n                }\n                if (!n) return this;\n                if (0 === s.length) return null;\n                return s.map(function(t) {\n                    return t;\n                }), null;\n            }\n            toString() {\n                const t = this.opnds.map((t)=>t.toString());\n                return (t.length > 3 ? t.slice(3) : t).join(\"||\");\n            }\n        }\n        function g(t) {\n            const e = [];\n            return t.values().map(function(t) {\n                t instanceof u.PrecedencePredicate && e.push(t);\n            }), e;\n        }\n        function f(t, e) {\n            if (null === t) {\n                const t = {\n                    state: null,\n                    alt: null,\n                    context: null,\n                    semanticContext: null\n                };\n                return e && (t.reachesIntoOuterContext = 0), t;\n            }\n            {\n                const n = {};\n                return n.state = t.state || null, n.alt = void 0 === t.alt ? null : t.alt, n.context = t.context || null, n.semanticContext = t.semanticContext || null, e && (n.reachesIntoOuterContext = t.reachesIntoOuterContext || 0, n.precedenceFilterSuppressed = t.precedenceFilterSuppressed || !1), n;\n            }\n        }\n        class E {\n            constructor(t, e){\n                this.checkContext(t, e), t = f(t), e = f(e, !0), this.state = null !== t.state ? t.state : e.state, this.alt = null !== t.alt ? t.alt : e.alt, this.context = null !== t.context ? t.context : e.context, this.semanticContext = null !== t.semanticContext ? t.semanticContext : null !== e.semanticContext ? e.semanticContext : u.NONE, this.reachesIntoOuterContext = e.reachesIntoOuterContext, this.precedenceFilterSuppressed = e.precedenceFilterSuppressed;\n            }\n            checkContext(t, e) {\n                null !== t.context && void 0 !== t.context || null !== e && null !== e.context && void 0 !== e.context || (this.context = null);\n            }\n            hashCode() {\n                const t = new i;\n                return this.updateHashCode(t), t.finish();\n            }\n            updateHashCode(t) {\n                t.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n            }\n            equals(t) {\n                return this === t || t instanceof E && this.state.stateNumber === t.state.stateNumber && this.alt === t.alt && (null === this.context ? null === t.context : this.context.equals(t.context)) && this.semanticContext.equals(t.semanticContext) && this.precedenceFilterSuppressed === t.precedenceFilterSuppressed;\n            }\n            hashCodeForConfigSet() {\n                const t = new i;\n                return t.update(this.state.stateNumber, this.alt, this.semanticContext), t.finish();\n            }\n            equalsForConfigSet(t) {\n                return this === t || t instanceof E && this.state.stateNumber === t.state.stateNumber && this.alt === t.alt && this.semanticContext.equals(t.semanticContext);\n            }\n            toString() {\n                return \"(\" + this.state + \",\" + this.alt + (null !== this.context ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== u.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n            }\n        }\n        class T {\n            constructor(t, e){\n                this.start = t, this.stop = e;\n            }\n            clone() {\n                return new T(this.start, this.stop);\n            }\n            contains(t) {\n                return t >= this.start && t < this.stop;\n            }\n            toString() {\n                return this.start === this.stop - 1 ? this.start.toString() : this.start.toString() + \"..\" + (this.stop - 1).toString();\n            }\n            get length() {\n                return this.stop - this.start;\n            }\n        }\n        T.INVALID_INTERVAL = new T(-1, -2);\n        class x {\n            constructor(){\n                this.intervals = null, this.readOnly = !1;\n            }\n            first(e) {\n                return null === this.intervals || 0 === this.intervals.length ? t.INVALID_TYPE : this.intervals[0].start;\n            }\n            addOne(t) {\n                this.addInterval(new T(t, t + 1));\n            }\n            addRange(t, e) {\n                this.addInterval(new T(t, e + 1));\n            }\n            addInterval(t) {\n                if (null === this.intervals) this.intervals = [], this.intervals.push(t.clone());\n                else {\n                    for(let e = 0; e < this.intervals.length; e++){\n                        const n = this.intervals[e];\n                        if (t.stop < n.start) return void this.intervals.splice(e, 0, t);\n                        if (t.stop === n.start) return void (this.intervals[e] = new T(t.start, n.stop));\n                        if (t.start <= n.stop) return this.intervals[e] = new T(Math.min(n.start, t.start), Math.max(n.stop, t.stop)), void this.reduce(e);\n                    }\n                    this.intervals.push(t.clone());\n                }\n            }\n            addSet(t) {\n                return null !== t.intervals && t.intervals.forEach((t)=>this.addInterval(t), this), this;\n            }\n            reduce(t) {\n                if (t < this.intervals.length - 1) {\n                    const e = this.intervals[t], n = this.intervals[t + 1];\n                    e.stop >= n.stop ? (this.intervals.splice(t + 1, 1), this.reduce(t)) : e.stop >= n.start && (this.intervals[t] = new T(e.start, n.stop), this.intervals.splice(t + 1, 1));\n                }\n            }\n            complement(t, e) {\n                const n = new x;\n                return n.addInterval(new T(t, e + 1)), null !== this.intervals && this.intervals.forEach((t)=>n.removeRange(t)), n;\n            }\n            contains(t) {\n                if (null === this.intervals) return !1;\n                for(let e = 0; e < this.intervals.length; e++)if (this.intervals[e].contains(t)) return !0;\n                return !1;\n            }\n            removeRange(t) {\n                if (t.start === t.stop - 1) this.removeOne(t.start);\n                else if (null !== this.intervals) {\n                    let e = 0;\n                    for(let n = 0; n < this.intervals.length; n++){\n                        const n = this.intervals[e];\n                        if (t.stop <= n.start) return;\n                        if (t.start > n.start && t.stop < n.stop) {\n                            this.intervals[e] = new T(n.start, t.start);\n                            const s = new T(t.stop, n.stop);\n                            return void this.intervals.splice(e, 0, s);\n                        }\n                        t.start <= n.start && t.stop >= n.stop ? (this.intervals.splice(e, 1), e -= 1) : t.start < n.stop ? this.intervals[e] = new T(n.start, t.start) : t.stop < n.stop && (this.intervals[e] = new T(t.stop, n.stop)), e += 1;\n                    }\n                }\n            }\n            removeOne(t) {\n                if (null !== this.intervals) for(let e = 0; e < this.intervals.length; e++){\n                    const n = this.intervals[e];\n                    if (t < n.start) return;\n                    if (t === n.start && t === n.stop - 1) return void this.intervals.splice(e, 1);\n                    if (t === n.start) return void (this.intervals[e] = new T(n.start + 1, n.stop));\n                    if (t === n.stop - 1) return void (this.intervals[e] = new T(n.start, n.stop - 1));\n                    if (t < n.stop - 1) {\n                        const s = new T(n.start, t);\n                        return n.start = t + 1, void this.intervals.splice(e, 0, s);\n                    }\n                }\n            }\n            toString(t, e, n) {\n                return t = t || null, e = e || null, n = n || !1, null === this.intervals ? \"{}\" : null !== t || null !== e ? this.toTokenString(t, e) : n ? this.toCharString() : this.toIndexString();\n            }\n            toCharString() {\n                const e = [];\n                for(let n = 0; n < this.intervals.length; n++){\n                    const s = this.intervals[n];\n                    s.stop === s.start + 1 ? s.start === t.EOF ? e.push(\"<EOF>\") : e.push(\"'\" + String.fromCharCode(s.start) + \"'\") : e.push(\"'\" + String.fromCharCode(s.start) + \"'..'\" + String.fromCharCode(s.stop - 1) + \"'\");\n                }\n                return e.length > 1 ? \"{\" + e.join(\", \") + \"}\" : e[0];\n            }\n            toIndexString() {\n                const e = [];\n                for(let n = 0; n < this.intervals.length; n++){\n                    const s = this.intervals[n];\n                    s.stop === s.start + 1 ? s.start === t.EOF ? e.push(\"<EOF>\") : e.push(s.start.toString()) : e.push(s.start.toString() + \"..\" + (s.stop - 1).toString());\n                }\n                return e.length > 1 ? \"{\" + e.join(\", \") + \"}\" : e[0];\n            }\n            toTokenString(t, e) {\n                const n = [];\n                for(let s = 0; s < this.intervals.length; s++){\n                    const i = this.intervals[s];\n                    for(let s = i.start; s < i.stop; s++)n.push(this.elementName(t, e, s));\n                }\n                return n.length > 1 ? \"{\" + n.join(\", \") + \"}\" : n[0];\n            }\n            elementName(e, n, s) {\n                return s === t.EOF ? \"<EOF>\" : s === t.EPSILON ? \"<EPSILON>\" : e[s] || n[s];\n            }\n            get length() {\n                return this.intervals.map((t)=>t.length).reduce((t, e)=>t + e);\n            }\n        }\n        class C {\n            constructor(){\n                this.atn = null, this.stateNumber = C.INVALID_STATE_NUMBER, this.stateType = null, this.ruleIndex = 0, this.epsilonOnlyTransitions = !1, this.transitions = [], this.nextTokenWithinRule = null;\n            }\n            toString() {\n                return this.stateNumber;\n            }\n            equals(t) {\n                return t instanceof C && this.stateNumber === t.stateNumber;\n            }\n            isNonGreedyExitState() {\n                return !1;\n            }\n            addTransition(t, e) {\n                void 0 === e && (e = -1), 0 === this.transitions.length ? this.epsilonOnlyTransitions = t.isEpsilon : this.epsilonOnlyTransitions !== t.isEpsilon && (this.epsilonOnlyTransitions = !1), -1 === e ? this.transitions.push(t) : this.transitions.splice(e, 1, t);\n            }\n        }\n        C.INVALID_TYPE = 0, C.BASIC = 1, C.RULE_START = 2, C.BLOCK_START = 3, C.PLUS_BLOCK_START = 4, C.STAR_BLOCK_START = 5, C.TOKEN_START = 6, C.RULE_STOP = 7, C.BLOCK_END = 8, C.STAR_LOOP_BACK = 9, C.STAR_LOOP_ENTRY = 10, C.PLUS_LOOP_BACK = 11, C.LOOP_END = 12, C.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\"\n        ], C.INVALID_STATE_NUMBER = -1;\n        class S extends C {\n            constructor(){\n                return super(), this.stateType = C.RULE_STOP, this;\n            }\n        }\n        class A {\n            constructor(t){\n                if (null == t) throw \"target cannot be null.\";\n                this.target = t, this.isEpsilon = !1, this.label = null;\n            }\n        }\n        A.EPSILON = 1, A.RANGE = 2, A.RULE = 3, A.PREDICATE = 4, A.ATOM = 5, A.ACTION = 6, A.SET = 7, A.NOT_SET = 8, A.WILDCARD = 9, A.PRECEDENCE = 10, A.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ], A.serializationTypes = {\n            EpsilonTransition: A.EPSILON,\n            RangeTransition: A.RANGE,\n            RuleTransition: A.RULE,\n            PredicateTransition: A.PREDICATE,\n            AtomTransition: A.ATOM,\n            ActionTransition: A.ACTION,\n            SetTransition: A.SET,\n            NotSetTransition: A.NOT_SET,\n            WildcardTransition: A.WILDCARD,\n            PrecedencePredicateTransition: A.PRECEDENCE\n        };\n        class I extends A {\n            constructor(t, e, n, s){\n                super(t), this.ruleIndex = e, this.precedence = n, this.followState = s, this.serializationType = A.RULE, this.isEpsilon = !0;\n            }\n            matches(t, e, n) {\n                return !1;\n            }\n        }\n        class R extends A {\n            constructor(e, n){\n                super(e), this.serializationType = A.SET, null != n ? this.label = n : (this.label = new x, this.label.addOne(t.INVALID_TYPE));\n            }\n            matches(t, e, n) {\n                return this.label.contains(t);\n            }\n            toString() {\n                return this.label.toString();\n            }\n        }\n        class m extends R {\n            constructor(t, e){\n                super(t, e), this.serializationType = A.NOT_SET;\n            }\n            matches(t, e, n) {\n                return t >= e && t <= n && !super.matches(t, e, n);\n            }\n            toString() {\n                return \"~\" + super.toString();\n            }\n        }\n        class _ extends A {\n            constructor(t){\n                super(t), this.serializationType = A.WILDCARD;\n            }\n            matches(t, e, n) {\n                return t >= e && t <= n;\n            }\n            toString() {\n                return \".\";\n            }\n        }\n        class N extends A {\n            constructor(t){\n                super(t);\n            }\n        }\n        class L extends class extends class {\n        } {\n        } {\n        }\n        class y extends L {\n            getRuleContext() {\n                throw new Error(\"missing interface implementation\");\n            }\n        }\n        class O extends L {\n        }\n        class k extends O {\n        }\n        const v = {\n            toStringTree: function(t, e, n) {\n                e = e || null, null !== (n = n || null) && (e = n.ruleNames);\n                let s = v.getNodeText(t, e);\n                s = function(t, e) {\n                    return t = t.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n                }(s);\n                const i = t.getChildCount();\n                if (0 === i) return s;\n                let r = \"(\" + s + \" \";\n                i > 0 && (s = v.toStringTree(t.getChild(0), e), r = r.concat(s));\n                for(let n = 1; n < i; n++)s = v.toStringTree(t.getChild(n), e), r = r.concat(\" \" + s);\n                return r = r.concat(\")\"), r;\n            },\n            getNodeText: function(e, n, s) {\n                if (n = n || null, null !== (s = s || null) && (n = s.ruleNames), null !== n) {\n                    if (e instanceof y) {\n                        const t = e.getRuleContext().getAltNumber();\n                        return 0 != t ? n[e.ruleIndex] + \":\" + t : n[e.ruleIndex];\n                    }\n                    if (e instanceof k) return e.toString();\n                    if (e instanceof O && null !== e.symbol) return e.symbol.text;\n                }\n                const i = e.getPayload();\n                return i instanceof t ? i.text : e.getPayload().toString();\n            },\n            getChildren: function(t) {\n                const e = [];\n                for(let n = 0; n < t.getChildCount(); n++)e.push(t.getChild(n));\n                return e;\n            },\n            getAncestors: function(t) {\n                let e = [];\n                for(t = t.getParent(); null !== t;)e = [\n                    t\n                ].concat(e), t = t.getParent();\n                return e;\n            },\n            findAllTokenNodes: function(t, e) {\n                return v.findAllNodes(t, e, !0);\n            },\n            findAllRuleNodes: function(t, e) {\n                return v.findAllNodes(t, e, !1);\n            },\n            findAllNodes: function(t, e, n) {\n                const s = [];\n                return v._findAllNodes(t, e, n, s), s;\n            },\n            _findAllNodes: function(t, e, n, s) {\n                n && t instanceof O ? t.symbol.type === e && s.push(t) : !n && t instanceof y && t.ruleIndex === e && s.push(t);\n                for(let i = 0; i < t.getChildCount(); i++)v._findAllNodes(t.getChild(i), e, n, s);\n            },\n            descendants: function(t) {\n                let e = [\n                    t\n                ];\n                for(let n = 0; n < t.getChildCount(); n++)e = e.concat(v.descendants(t.getChild(n)));\n                return e;\n            }\n        }, P = v;\n        class D extends y {\n            constructor(t, e){\n                super(), this.parentCtx = t || null, this.invokingState = e || -1;\n            }\n            depth() {\n                let t = 0, e = this;\n                for(; null !== e;)e = e.parentCtx, t += 1;\n                return t;\n            }\n            isEmpty() {\n                return -1 === this.invokingState;\n            }\n            getSourceInterval() {\n                return T.INVALID_INTERVAL;\n            }\n            getRuleContext() {\n                return this;\n            }\n            getPayload() {\n                return this;\n            }\n            getText() {\n                return 0 === this.getChildCount() ? \"\" : this.children.map(function(t) {\n                    return t.getText();\n                }).join(\"\");\n            }\n            getAltNumber() {\n                return 0;\n            }\n            setAltNumber(t) {}\n            getChild(t) {\n                return null;\n            }\n            getChildCount() {\n                return 0;\n            }\n            accept(t) {\n                return t.visitChildren(this);\n            }\n            toStringTree(t, e) {\n                return P.toStringTree(this, t, e);\n            }\n            toString(t, e) {\n                t = t || null, e = e || null;\n                let n = this, s = \"[\";\n                for(; null !== n && n !== e;){\n                    if (null === t) n.isEmpty() || (s += n.invokingState);\n                    else {\n                        const e = n.ruleIndex;\n                        s += e >= 0 && e < t.length ? t[e] : \"\" + e;\n                    }\n                    null === n.parentCtx || null === t && n.parentCtx.isEmpty() || (s += \" \"), n = n.parentCtx;\n                }\n                return s += \"]\", s;\n            }\n        }\n        class w {\n            constructor(t){\n                this.cachedHashCode = t;\n            }\n            isEmpty() {\n                return this === w.EMPTY;\n            }\n            hasEmptyPath() {\n                return this.getReturnState(this.length - 1) === w.EMPTY_RETURN_STATE;\n            }\n            hashCode() {\n                return this.cachedHashCode;\n            }\n            updateHashCode(t) {\n                t.update(this.cachedHashCode);\n            }\n        }\n        w.EMPTY = null, w.EMPTY_RETURN_STATE = 2147483647, w.globalNodeCount = 1, w.id = w.globalNodeCount;\n        class b extends w {\n            constructor(t, e){\n                const n = new i;\n                return n.update(t, e), super(n.finish()), this.parents = t, this.returnStates = e, this;\n            }\n            isEmpty() {\n                return this.returnStates[0] === w.EMPTY_RETURN_STATE;\n            }\n            getParent(t) {\n                return this.parents[t];\n            }\n            getReturnState(t) {\n                return this.returnStates[t];\n            }\n            equals(t) {\n                return this === t || t instanceof b && this.hashCode() === t.hashCode() && e(this.returnStates, t.returnStates) && e(this.parents, t.parents);\n            }\n            toString() {\n                if (this.isEmpty()) return \"[]\";\n                {\n                    let t = \"[\";\n                    for(let e = 0; e < this.returnStates.length; e++)e > 0 && (t += \", \"), this.returnStates[e] !== w.EMPTY_RETURN_STATE ? (t += this.returnStates[e], null !== this.parents[e] ? t = t + \" \" + this.parents[e] : t += \"null\") : t += \"$\";\n                    return t + \"]\";\n                }\n            }\n            get length() {\n                return this.returnStates.length;\n            }\n        }\n        class M extends w {\n            constructor(t, e){\n                let n = 0;\n                const s = new i;\n                null !== t ? s.update(t, e) : s.update(1), n = s.finish(), super(n), this.parentCtx = t, this.returnState = e;\n            }\n            getParent(t) {\n                return this.parentCtx;\n            }\n            getReturnState(t) {\n                return this.returnState;\n            }\n            equals(t) {\n                return this === t || t instanceof M && this.hashCode() === t.hashCode() && this.returnState === t.returnState && (null == this.parentCtx ? null == t.parentCtx : this.parentCtx.equals(t.parentCtx));\n            }\n            toString() {\n                const t = null === this.parentCtx ? \"\" : this.parentCtx.toString();\n                return 0 === t.length ? this.returnState === w.EMPTY_RETURN_STATE ? \"$\" : \"\" + this.returnState : this.returnState + \" \" + t;\n            }\n            get length() {\n                return 1;\n            }\n            static create(t, e) {\n                return e === w.EMPTY_RETURN_STATE && null === t ? w.EMPTY : new M(t, e);\n            }\n        }\n        class F extends M {\n            constructor(){\n                super(null, w.EMPTY_RETURN_STATE);\n            }\n            isEmpty() {\n                return !0;\n            }\n            getParent(t) {\n                return null;\n            }\n            getReturnState(t) {\n                return this.returnState;\n            }\n            equals(t) {\n                return this === t;\n            }\n            toString() {\n                return \"$\";\n            }\n        }\n        w.EMPTY = new F;\n        const B = \"h-\";\n        class U {\n            constructor(t, e){\n                this.data = {}, this.hashFunction = t || r, this.equalsFunction = e || o;\n            }\n            set(t, e) {\n                const n = B + this.hashFunction(t);\n                if (n in this.data) {\n                    const s = this.data[n];\n                    for(let n = 0; n < s.length; n++){\n                        const i = s[n];\n                        if (this.equalsFunction(t, i.key)) {\n                            const t = i.value;\n                            return i.value = e, t;\n                        }\n                    }\n                    return s.push({\n                        key: t,\n                        value: e\n                    }), e;\n                }\n                return this.data[n] = [\n                    {\n                        key: t,\n                        value: e\n                    }\n                ], e;\n            }\n            containsKey(t) {\n                const e = B + this.hashFunction(t);\n                if (e in this.data) {\n                    const n = this.data[e];\n                    for(let e = 0; e < n.length; e++){\n                        const s = n[e];\n                        if (this.equalsFunction(t, s.key)) return !0;\n                    }\n                }\n                return !1;\n            }\n            get(t) {\n                const e = B + this.hashFunction(t);\n                if (e in this.data) {\n                    const n = this.data[e];\n                    for(let e = 0; e < n.length; e++){\n                        const s = n[e];\n                        if (this.equalsFunction(t, s.key)) return s.value;\n                    }\n                }\n                return null;\n            }\n            entries() {\n                return Object.keys(this.data).filter((t)=>t.startsWith(B)).flatMap((t)=>this.data[t], this);\n            }\n            getKeys() {\n                return this.entries().map((t)=>t.key);\n            }\n            getValues() {\n                return this.entries().map((t)=>t.value);\n            }\n            toString() {\n                return \"[\" + this.entries().map((t)=>\"{\" + t.key + \":\" + t.value + \"}\").join(\", \") + \"]\";\n            }\n            get length() {\n                return Object.keys(this.data).filter((t)=>t.startsWith(B)).map((t)=>this.data[t].length, this).reduce((t, e)=>t + e, 0);\n            }\n        }\n        function H(t, e) {\n            if (null == e && (e = D.EMPTY), null === e.parentCtx || e === D.EMPTY) return w.EMPTY;\n            const n = H(t, e.parentCtx), s = t.states[e.invokingState].transitions[0];\n            return M.create(n, s.followState.stateNumber);\n        }\n        function K(t, e, n) {\n            if (t.isEmpty()) return t;\n            let s = n.get(t) || null;\n            if (null !== s) return s;\n            if (s = e.get(t), null !== s) return n.set(t, s), s;\n            let i = !1, r = [];\n            for(let s = 0; s < r.length; s++){\n                const o = K(t.getParent(s), e, n);\n                if (i || o !== t.getParent(s)) {\n                    if (!i) {\n                        r = [];\n                        for(let e = 0; e < t.length; e++)r[e] = t.getParent(e);\n                        i = !0;\n                    }\n                    r[s] = o;\n                }\n            }\n            if (!i) return e.add(t), n.set(t, t), t;\n            let o = null;\n            return o = 0 === r.length ? w.EMPTY : 1 === r.length ? M.create(r[0], t.getReturnState(0)) : new b(r, t.returnStates), e.add(o), n.set(o, o), n.set(t, o), o;\n        }\n        function V(t, e, n, s) {\n            if (t === e) return t;\n            if (t instanceof M && e instanceof M) return function(t, e, n, s) {\n                if (null !== s) {\n                    let n = s.get(t, e);\n                    if (null !== n) return n;\n                    if (n = s.get(e, t), null !== n) return n;\n                }\n                const i = function(t, e, n) {\n                    if (n) {\n                        if (t === w.EMPTY) return w.EMPTY;\n                        if (e === w.EMPTY) return w.EMPTY;\n                    } else {\n                        if (t === w.EMPTY && e === w.EMPTY) return w.EMPTY;\n                        if (t === w.EMPTY) {\n                            const t = [\n                                e.returnState,\n                                w.EMPTY_RETURN_STATE\n                            ], n = [\n                                e.parentCtx,\n                                null\n                            ];\n                            return new b(n, t);\n                        }\n                        if (e === w.EMPTY) {\n                            const e = [\n                                t.returnState,\n                                w.EMPTY_RETURN_STATE\n                            ], n = [\n                                t.parentCtx,\n                                null\n                            ];\n                            return new b(n, e);\n                        }\n                    }\n                    return null;\n                }(t, e, n);\n                if (null !== i) return null !== s && s.set(t, e, i), i;\n                if (t.returnState === e.returnState) {\n                    const i = V(t.parentCtx, e.parentCtx, n, s);\n                    if (i === t.parentCtx) return t;\n                    if (i === e.parentCtx) return e;\n                    const r = M.create(i, t.returnState);\n                    return null !== s && s.set(t, e, r), r;\n                }\n                {\n                    let n = null;\n                    if ((t === e || null !== t.parentCtx && t.parentCtx === e.parentCtx) && (n = t.parentCtx), null !== n) {\n                        const i = [\n                            t.returnState,\n                            e.returnState\n                        ];\n                        t.returnState > e.returnState && (i[0] = e.returnState, i[1] = t.returnState);\n                        const r = new b([\n                            n,\n                            n\n                        ], i);\n                        return null !== s && s.set(t, e, r), r;\n                    }\n                    const i = [\n                        t.returnState,\n                        e.returnState\n                    ];\n                    let r = [\n                        t.parentCtx,\n                        e.parentCtx\n                    ];\n                    t.returnState > e.returnState && (i[0] = e.returnState, i[1] = t.returnState, r = [\n                        e.parentCtx,\n                        t.parentCtx\n                    ]);\n                    const o = new b(r, i);\n                    return null !== s && s.set(t, e, o), o;\n                }\n            }(t, e, n, s);\n            if (n) {\n                if (t instanceof F) return t;\n                if (e instanceof F) return e;\n            }\n            return t instanceof M && (t = new b([\n                t.getParent()\n            ], [\n                t.returnState\n            ])), e instanceof M && (e = new b([\n                e.getParent()\n            ], [\n                e.returnState\n            ])), function(t, e, n, s) {\n                if (null !== s) {\n                    let n = s.get(t, e);\n                    if (null !== n) return n;\n                    if (n = s.get(e, t), null !== n) return n;\n                }\n                let i = 0, r = 0, o = 0, l = [], a = [];\n                for(; i < t.returnStates.length && r < e.returnStates.length;){\n                    const h = t.parents[i], c = e.parents[r];\n                    if (t.returnStates[i] === e.returnStates[r]) {\n                        const e = t.returnStates[i], u = null !== h && null !== c && h === c;\n                        e === w.EMPTY_RETURN_STATE && null === h && null === c || u ? (a[o] = h, l[o] = e) : (a[o] = V(h, c, n, s), l[o] = e), i += 1, r += 1;\n                    } else t.returnStates[i] < e.returnStates[r] ? (a[o] = h, l[o] = t.returnStates[i], i += 1) : (a[o] = c, l[o] = e.returnStates[r], r += 1);\n                    o += 1;\n                }\n                if (i < t.returnStates.length) for(let e = i; e < t.returnStates.length; e++)a[o] = t.parents[e], l[o] = t.returnStates[e], o += 1;\n                else for(let t = r; t < e.returnStates.length; t++)a[o] = e.parents[t], l[o] = e.returnStates[t], o += 1;\n                if (o < a.length) {\n                    if (1 === o) {\n                        const n = M.create(a[0], l[0]);\n                        return null !== s && s.set(t, e, n), n;\n                    }\n                    a = a.slice(0, o), l = l.slice(0, o);\n                }\n                const h = new b(a, l);\n                return h === t ? (null !== s && s.set(t, e, t), t) : h === e ? (null !== s && s.set(t, e, e), e) : (function(t) {\n                    const e = new U;\n                    for(let n = 0; n < t.length; n++){\n                        const s = t[n];\n                        e.containsKey(s) || e.set(s, s);\n                    }\n                    for(let n = 0; n < t.length; n++)t[n] = e.get(t[n]);\n                }(a), null !== s && s.set(t, e, h), h);\n            }(t, e, n, s);\n        }\n        class G {\n            constructor(){\n                this.data = [];\n            }\n            add(t) {\n                this.data[t] = !0;\n            }\n            or(t) {\n                Object.keys(t.data).map((t)=>this.add(t), this);\n            }\n            remove(t) {\n                delete this.data[t];\n            }\n            has(t) {\n                return !0 === this.data[t];\n            }\n            values() {\n                return Object.keys(this.data);\n            }\n            minValue() {\n                return Math.min.apply(null, this.values());\n            }\n            hashCode() {\n                return i.hashStuff(this.values());\n            }\n            equals(t) {\n                return t instanceof G && e(this.data, t.data);\n            }\n            toString() {\n                return \"{\" + this.values().join(\", \") + \"}\";\n            }\n            get length() {\n                return this.values().length;\n            }\n        }\n        class q {\n            constructor(t){\n                this.atn = t;\n            }\n            getDecisionLookahead(t) {\n                if (null === t) return null;\n                const e = t.transitions.length, n = [];\n                for(let s = 0; s < e; s++){\n                    n[s] = new x;\n                    const e = new c, i = !1;\n                    this._LOOK(t.transition(s).target, null, w.EMPTY, n[s], e, new G, i, !1), (0 === n[s].length || n[s].contains(q.HIT_PRED)) && (n[s] = null);\n                }\n                return n;\n            }\n            LOOK(t, e, n) {\n                const s = new x, i = null !== (n = n || null) ? H(t.atn, n) : null;\n                return this._LOOK(t, e, i, s, new c, new G, !0, !0), s;\n            }\n            _LOOK(e, n, s, i, r, o, l, a) {\n                const h = new E({\n                    state: e,\n                    alt: 0,\n                    context: s\n                }, null);\n                if (!r.has(h)) {\n                    if (r.add(h), e === n) {\n                        if (null === s) return void i.addOne(t.EPSILON);\n                        if (s.isEmpty() && a) return void i.addOne(t.EOF);\n                    }\n                    if (e instanceof S) {\n                        if (null === s) return void i.addOne(t.EPSILON);\n                        if (s.isEmpty() && a) return void i.addOne(t.EOF);\n                        if (s !== w.EMPTY) {\n                            const t = o.has(e.ruleIndex);\n                            try {\n                                o.remove(e.ruleIndex);\n                                for(let t = 0; t < s.length; t++){\n                                    const e = this.atn.states[s.getReturnState(t)];\n                                    this._LOOK(e, n, s.getParent(t), i, r, o, l, a);\n                                }\n                            } finally{\n                                t && o.add(e.ruleIndex);\n                            }\n                            return;\n                        }\n                    }\n                    for(let h = 0; h < e.transitions.length; h++){\n                        const c = e.transitions[h];\n                        if (c.constructor === I) {\n                            if (o.has(c.target.ruleIndex)) continue;\n                            const t = M.create(s, c.followState.stateNumber);\n                            try {\n                                o.add(c.target.ruleIndex), this._LOOK(c.target, n, t, i, r, o, l, a);\n                            } finally{\n                                o.remove(c.target.ruleIndex);\n                            }\n                        } else if (c instanceof N) l ? this._LOOK(c.target, n, s, i, r, o, l, a) : i.addOne(q.HIT_PRED);\n                        else if (c.isEpsilon) this._LOOK(c.target, n, s, i, r, o, l, a);\n                        else if (c.constructor === _) i.addRange(t.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                        else {\n                            let e = c.label;\n                            null !== e && (c instanceof m && (e = e.complement(t.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType)), i.addSet(e));\n                        }\n                    }\n                }\n            }\n        }\n        q.HIT_PRED = t.INVALID_TYPE;\n        class z {\n            constructor(t, e){\n                this.grammarType = t, this.maxTokenType = e, this.states = [], this.decisionToState = [], this.ruleToStartState = [], this.ruleToStopState = null, this.modeNameToStartState = {}, this.ruleToTokenType = null, this.lexerActions = null, this.modeToStartState = [];\n            }\n            nextTokensInContext(t, e) {\n                return new q(this).LOOK(t, null, e);\n            }\n            nextTokensNoContext(t) {\n                return null !== t.nextTokenWithinRule || (t.nextTokenWithinRule = this.nextTokensInContext(t, null), t.nextTokenWithinRule.readOnly = !0), t.nextTokenWithinRule;\n            }\n            nextTokens(t, e) {\n                return void 0 === e ? this.nextTokensNoContext(t) : this.nextTokensInContext(t, e);\n            }\n            addState(t) {\n                null !== t && (t.atn = this, t.stateNumber = this.states.length), this.states.push(t);\n            }\n            removeState(t) {\n                this.states[t.stateNumber] = null;\n            }\n            defineDecisionState(t) {\n                return this.decisionToState.push(t), t.decision = this.decisionToState.length - 1, t.decision;\n            }\n            getDecisionState(t) {\n                return 0 === this.decisionToState.length ? null : this.decisionToState[t];\n            }\n            getExpectedTokens(e, n) {\n                if (e < 0 || e >= this.states.length) throw \"Invalid state number.\";\n                const s = this.states[e];\n                let i = this.nextTokens(s);\n                if (!i.contains(t.EPSILON)) return i;\n                const r = new x;\n                for(r.addSet(i), r.removeOne(t.EPSILON); null !== n && n.invokingState >= 0 && i.contains(t.EPSILON);){\n                    const e = this.states[n.invokingState].transitions[0];\n                    i = this.nextTokens(e.followState), r.addSet(i), r.removeOne(t.EPSILON), n = n.parentCtx;\n                }\n                return i.contains(t.EPSILON) && r.addOne(t.EOF), r;\n            }\n        }\n        z.INVALID_ALT_NUMBER = 0;\n        class Y extends C {\n            constructor(){\n                super(), this.stateType = C.BASIC;\n            }\n        }\n        class W extends C {\n            constructor(){\n                return super(), this.decision = -1, this.nonGreedy = !1, this;\n            }\n        }\n        class j extends W {\n            constructor(){\n                return super(), this.endState = null, this;\n            }\n        }\n        class Q extends C {\n            constructor(){\n                return super(), this.stateType = C.BLOCK_END, this.startState = null, this;\n            }\n        }\n        class X extends C {\n            constructor(){\n                return super(), this.stateType = C.LOOP_END, this.loopBackState = null, this;\n            }\n        }\n        class J extends C {\n            constructor(){\n                return super(), this.stateType = C.RULE_START, this.stopState = null, this.isPrecedenceRule = !1, this;\n            }\n        }\n        class $ extends W {\n            constructor(){\n                return super(), this.stateType = C.TOKEN_START, this;\n            }\n        }\n        class Z extends W {\n            constructor(){\n                return super(), this.stateType = C.PLUS_LOOP_BACK, this;\n            }\n        }\n        class tt extends C {\n            constructor(){\n                return super(), this.stateType = C.STAR_LOOP_BACK, this;\n            }\n        }\n        class et extends W {\n            constructor(){\n                return super(), this.stateType = C.STAR_LOOP_ENTRY, this.loopBackState = null, this.isPrecedenceDecision = null, this;\n            }\n        }\n        class nt extends j {\n            constructor(){\n                return super(), this.stateType = C.PLUS_BLOCK_START, this.loopBackState = null, this;\n            }\n        }\n        class st extends j {\n            constructor(){\n                return super(), this.stateType = C.STAR_BLOCK_START, this;\n            }\n        }\n        class it extends j {\n            constructor(){\n                return super(), this.stateType = C.BLOCK_START, this;\n            }\n        }\n        class rt extends A {\n            constructor(t, e){\n                super(t), this.label_ = e, this.label = this.makeLabel(), this.serializationType = A.ATOM;\n            }\n            makeLabel() {\n                const t = new x;\n                return t.addOne(this.label_), t;\n            }\n            matches(t, e, n) {\n                return this.label_ === t;\n            }\n            toString() {\n                return this.label_;\n            }\n        }\n        class ot extends A {\n            constructor(t, e, n){\n                super(t), this.serializationType = A.RANGE, this.start = e, this.stop = n, this.label = this.makeLabel();\n            }\n            makeLabel() {\n                const t = new x;\n                return t.addRange(this.start, this.stop), t;\n            }\n            matches(t, e, n) {\n                return t >= this.start && t <= this.stop;\n            }\n            toString() {\n                return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n            }\n        }\n        class lt extends A {\n            constructor(t, e, n, s){\n                super(t), this.serializationType = A.ACTION, this.ruleIndex = e, this.actionIndex = void 0 === n ? -1 : n, this.isCtxDependent = void 0 !== s && s, this.isEpsilon = !0;\n            }\n            matches(t, e, n) {\n                return !1;\n            }\n            toString() {\n                return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n            }\n        }\n        class at extends A {\n            constructor(t, e){\n                super(t), this.serializationType = A.EPSILON, this.isEpsilon = !0, this.outermostPrecedenceReturn = e;\n            }\n            matches(t, e, n) {\n                return !1;\n            }\n            toString() {\n                return \"epsilon\";\n            }\n        }\n        class ht extends u {\n            constructor(t, e, n){\n                super(), this.ruleIndex = void 0 === t ? -1 : t, this.predIndex = void 0 === e ? -1 : e, this.isCtxDependent = void 0 !== n && n;\n            }\n            evaluate(t, e) {\n                const n = this.isCtxDependent ? e : null;\n                return t.sempred(n, this.ruleIndex, this.predIndex);\n            }\n            updateHashCode(t) {\n                t.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n            }\n            equals(t) {\n                return this === t || t instanceof ht && this.ruleIndex === t.ruleIndex && this.predIndex === t.predIndex && this.isCtxDependent === t.isCtxDependent;\n            }\n            toString() {\n                return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n            }\n        }\n        u.NONE = new ht;\n        class ct extends N {\n            constructor(t, e, n, s){\n                super(t), this.serializationType = A.PREDICATE, this.ruleIndex = e, this.predIndex = n, this.isCtxDependent = s, this.isEpsilon = !0;\n            }\n            matches(t, e, n) {\n                return !1;\n            }\n            getPredicate() {\n                return new ht(this.ruleIndex, this.predIndex, this.isCtxDependent);\n            }\n            toString() {\n                return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n            }\n        }\n        class ut extends u {\n            constructor(t){\n                super(), this.precedence = void 0 === t ? 0 : t;\n            }\n            evaluate(t, e) {\n                return t.precpred(e, this.precedence);\n            }\n            evalPrecedence(t, e) {\n                return t.precpred(e, this.precedence) ? u.NONE : null;\n            }\n            compareTo(t) {\n                return this.precedence - t.precedence;\n            }\n            updateHashCode(t) {\n                t.update(this.precedence);\n            }\n            equals(t) {\n                return this === t || t instanceof ut && this.precedence === t.precedence;\n            }\n            toString() {\n                return \"{\" + this.precedence + \">=prec}?\";\n            }\n        }\n        u.PrecedencePredicate = ut;\n        class dt extends N {\n            constructor(t, e){\n                super(t), this.serializationType = A.PRECEDENCE, this.precedence = e, this.isEpsilon = !0;\n            }\n            matches(t, e, n) {\n                return !1;\n            }\n            getPredicate() {\n                return new ut(this.precedence);\n            }\n            toString() {\n                return this.precedence + \" >= _p\";\n            }\n        }\n        class pt {\n            constructor(t){\n                void 0 === t && (t = null), this.readOnly = !1, this.verifyATN = null === t || t.verifyATN, this.generateRuleBypassTransitions = null !== t && t.generateRuleBypassTransitions;\n            }\n        }\n        pt.defaultOptions = new pt, pt.defaultOptions.readOnly = !0;\n        class gt {\n            constructor(t){\n                this.actionType = t, this.isPositionDependent = !1;\n            }\n            hashCode() {\n                const t = new i;\n                return this.updateHashCode(t), t.finish();\n            }\n            updateHashCode(t) {\n                t.update(this.actionType);\n            }\n            equals(t) {\n                return this === t;\n            }\n        }\n        class ft extends gt {\n            constructor(){\n                super(6);\n            }\n            execute(t) {\n                t.skip();\n            }\n            toString() {\n                return \"skip\";\n            }\n        }\n        ft.INSTANCE = new ft;\n        class Et extends gt {\n            constructor(t){\n                super(0), this.channel = t;\n            }\n            execute(t) {\n                t._channel = this.channel;\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.channel);\n            }\n            equals(t) {\n                return this === t || t instanceof Et && this.channel === t.channel;\n            }\n            toString() {\n                return \"channel(\" + this.channel + \")\";\n            }\n        }\n        class Tt extends gt {\n            constructor(t, e){\n                super(1), this.ruleIndex = t, this.actionIndex = e, this.isPositionDependent = !0;\n            }\n            execute(t) {\n                t.action(null, this.ruleIndex, this.actionIndex);\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.ruleIndex, this.actionIndex);\n            }\n            equals(t) {\n                return this === t || t instanceof Tt && this.ruleIndex === t.ruleIndex && this.actionIndex === t.actionIndex;\n            }\n        }\n        class xt extends gt {\n            constructor(){\n                super(3);\n            }\n            execute(t) {\n                t.more();\n            }\n            toString() {\n                return \"more\";\n            }\n        }\n        xt.INSTANCE = new xt;\n        class Ct extends gt {\n            constructor(t){\n                super(7), this.type = t;\n            }\n            execute(t) {\n                t.type = this.type;\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.type);\n            }\n            equals(t) {\n                return this === t || t instanceof Ct && this.type === t.type;\n            }\n            toString() {\n                return \"type(\" + this.type + \")\";\n            }\n        }\n        class St extends gt {\n            constructor(t){\n                super(5), this.mode = t;\n            }\n            execute(t) {\n                t.pushMode(this.mode);\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.mode);\n            }\n            equals(t) {\n                return this === t || t instanceof St && this.mode === t.mode;\n            }\n            toString() {\n                return \"pushMode(\" + this.mode + \")\";\n            }\n        }\n        class At extends gt {\n            constructor(){\n                super(4);\n            }\n            execute(t) {\n                t.popMode();\n            }\n            toString() {\n                return \"popMode\";\n            }\n        }\n        At.INSTANCE = new At;\n        class It extends gt {\n            constructor(t){\n                super(2), this.mode = t;\n            }\n            execute(t) {\n                t.mode(this.mode);\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.mode);\n            }\n            equals(t) {\n                return this === t || t instanceof It && this.mode === t.mode;\n            }\n            toString() {\n                return \"mode(\" + this.mode + \")\";\n            }\n        }\n        function Rt(t, e) {\n            const n = [];\n            return n[t - 1] = e, n.map(function(t) {\n                return e;\n            });\n        }\n        class mt {\n            constructor(t){\n                null == t && (t = pt.defaultOptions), this.deserializationOptions = t, this.stateFactories = null, this.actionFactories = null;\n            }\n            deserialize(t) {\n                const e = this.reset(t);\n                this.checkVersion(e), e && this.skipUUID();\n                const n = this.readATN();\n                this.readStates(n, e), this.readRules(n, e), this.readModes(n);\n                const s = [];\n                return this.readSets(n, s, this.readInt.bind(this)), e && this.readSets(n, s, this.readInt32.bind(this)), this.readEdges(n, s), this.readDecisions(n), this.readLexerActions(n, e), this.markPrecedenceDecisions(n), this.verifyATN(n), this.deserializationOptions.generateRuleBypassTransitions && 1 === n.grammarType && (this.generateRuleBypassTransitions(n), this.verifyATN(n)), n;\n            }\n            reset(t) {\n                if (3 === (t.charCodeAt ? t.charCodeAt(0) : t[0])) {\n                    const e = function(t) {\n                        const e = t.charCodeAt(0);\n                        return e > 1 ? e - 2 : e + 65534;\n                    }, n = t.split(\"\").map(e);\n                    return n[0] = t.charCodeAt(0), this.data = n, this.pos = 0, !0;\n                }\n                return this.data = t, this.pos = 0, !1;\n            }\n            skipUUID() {\n                let t = 0;\n                for(; t++ < 8;)this.readInt();\n            }\n            checkVersion(t) {\n                const e = this.readInt();\n                if (!t && 4 !== e) throw \"Could not deserialize ATN with version \" + e + \" (expected 4).\";\n            }\n            readATN() {\n                const t = this.readInt(), e = this.readInt();\n                return new z(t, e);\n            }\n            readStates(t, e) {\n                let n, s, i;\n                const r = [], o = [], l = this.readInt();\n                for(let n = 0; n < l; n++){\n                    const n = this.readInt();\n                    if (n === C.INVALID_TYPE) {\n                        t.addState(null);\n                        continue;\n                    }\n                    let s = this.readInt();\n                    e && 65535 === s && (s = -1);\n                    const i = this.stateFactory(n, s);\n                    if (n === C.LOOP_END) {\n                        const t = this.readInt();\n                        r.push([\n                            i,\n                            t\n                        ]);\n                    } else if (i instanceof j) {\n                        const t = this.readInt();\n                        o.push([\n                            i,\n                            t\n                        ]);\n                    }\n                    t.addState(i);\n                }\n                for(n = 0; n < r.length; n++)s = r[n], s[0].loopBackState = t.states[s[1]];\n                for(n = 0; n < o.length; n++)s = o[n], s[0].endState = t.states[s[1]];\n                let a = this.readInt();\n                for(n = 0; n < a; n++)i = this.readInt(), t.states[i].nonGreedy = !0;\n                let h = this.readInt();\n                for(n = 0; n < h; n++)i = this.readInt(), t.states[i].isPrecedenceRule = !0;\n            }\n            readRules(e, n) {\n                let s;\n                const i = this.readInt();\n                for(0 === e.grammarType && (e.ruleToTokenType = Rt(i, 0)), e.ruleToStartState = Rt(i, 0), s = 0; s < i; s++){\n                    const i = this.readInt();\n                    if (e.ruleToStartState[s] = e.states[i], 0 === e.grammarType) {\n                        let i = this.readInt();\n                        n && 65535 === i && (i = t.EOF), e.ruleToTokenType[s] = i;\n                    }\n                }\n                for(e.ruleToStopState = Rt(i, 0), s = 0; s < e.states.length; s++){\n                    const t = e.states[s];\n                    t instanceof S && (e.ruleToStopState[t.ruleIndex] = t, e.ruleToStartState[t.ruleIndex].stopState = t);\n                }\n            }\n            readModes(t) {\n                const e = this.readInt();\n                for(let n = 0; n < e; n++){\n                    let e = this.readInt();\n                    t.modeToStartState.push(t.states[e]);\n                }\n            }\n            readSets(t, e, n) {\n                const s = this.readInt();\n                for(let t = 0; t < s; t++){\n                    const t = new x;\n                    e.push(t);\n                    const s = this.readInt();\n                    0 !== this.readInt() && t.addOne(-1);\n                    for(let e = 0; e < s; e++){\n                        const e = n(), s = n();\n                        t.addRange(e, s);\n                    }\n                }\n            }\n            readEdges(t, e) {\n                let n, s, i, r, o;\n                const l = this.readInt();\n                for(n = 0; n < l; n++){\n                    const n = this.readInt(), s = this.readInt(), i = this.readInt(), o = this.readInt(), l = this.readInt(), a = this.readInt();\n                    r = this.edgeFactory(t, i, n, s, o, l, a, e), t.states[n].addTransition(r);\n                }\n                for(n = 0; n < t.states.length; n++)for(i = t.states[n], s = 0; s < i.transitions.length; s++){\n                    const e = i.transitions[s];\n                    if (!(e instanceof I)) continue;\n                    let n = -1;\n                    t.ruleToStartState[e.target.ruleIndex].isPrecedenceRule && 0 === e.precedence && (n = e.target.ruleIndex), r = new at(e.followState, n), t.ruleToStopState[e.target.ruleIndex].addTransition(r);\n                }\n                for(n = 0; n < t.states.length; n++){\n                    if (i = t.states[n], i instanceof j) {\n                        if (null === i.endState) throw \"IllegalState\";\n                        if (null !== i.endState.startState) throw \"IllegalState\";\n                        i.endState.startState = i;\n                    }\n                    if (i instanceof Z) for(s = 0; s < i.transitions.length; s++)o = i.transitions[s].target, o instanceof nt && (o.loopBackState = i);\n                    else if (i instanceof tt) for(s = 0; s < i.transitions.length; s++)o = i.transitions[s].target, o instanceof et && (o.loopBackState = i);\n                }\n            }\n            readDecisions(t) {\n                const e = this.readInt();\n                for(let n = 0; n < e; n++){\n                    const e = this.readInt(), s = t.states[e];\n                    t.decisionToState.push(s), s.decision = n;\n                }\n            }\n            readLexerActions(t, e) {\n                if (0 === t.grammarType) {\n                    const n = this.readInt();\n                    t.lexerActions = Rt(n, null);\n                    for(let s = 0; s < n; s++){\n                        const n = this.readInt();\n                        let i = this.readInt();\n                        e && 65535 === i && (i = -1);\n                        let r = this.readInt();\n                        e && 65535 === r && (r = -1), t.lexerActions[s] = this.lexerActionFactory(n, i, r);\n                    }\n                }\n            }\n            generateRuleBypassTransitions(t) {\n                let e;\n                const n = t.ruleToStartState.length;\n                for(e = 0; e < n; e++)t.ruleToTokenType[e] = t.maxTokenType + e + 1;\n                for(e = 0; e < n; e++)this.generateRuleBypassTransition(t, e);\n            }\n            generateRuleBypassTransition(t, e) {\n                let n, s;\n                const i = new it;\n                i.ruleIndex = e, t.addState(i);\n                const r = new Q;\n                r.ruleIndex = e, t.addState(r), i.endState = r, t.defineDecisionState(i), r.startState = i;\n                let o = null, l = null;\n                if (t.ruleToStartState[e].isPrecedenceRule) {\n                    for(l = null, n = 0; n < t.states.length; n++)if (s = t.states[n], this.stateIsEndStateFor(s, e)) {\n                        l = s, o = s.loopBackState.transitions[0];\n                        break;\n                    }\n                    if (null === o) throw \"Couldn't identify final state of the precedence rule prefix section.\";\n                } else l = t.ruleToStopState[e];\n                for(n = 0; n < t.states.length; n++){\n                    s = t.states[n];\n                    for(let t = 0; t < s.transitions.length; t++){\n                        const e = s.transitions[t];\n                        e !== o && e.target === l && (e.target = r);\n                    }\n                }\n                const a = t.ruleToStartState[e], h = a.transitions.length;\n                for(; h > 0;)i.addTransition(a.transitions[h - 1]), a.transitions = a.transitions.slice(-1);\n                t.ruleToStartState[e].addTransition(new at(i)), r.addTransition(new at(l));\n                const c = new Y;\n                t.addState(c), c.addTransition(new rt(r, t.ruleToTokenType[e])), i.addTransition(new at(c));\n            }\n            stateIsEndStateFor(t, e) {\n                if (t.ruleIndex !== e) return null;\n                if (!(t instanceof et)) return null;\n                const n = t.transitions[t.transitions.length - 1].target;\n                return n instanceof X && n.epsilonOnlyTransitions && n.transitions[0].target instanceof S ? t : null;\n            }\n            markPrecedenceDecisions(t) {\n                for(let e = 0; e < t.states.length; e++){\n                    const n = t.states[e];\n                    if (n instanceof et && t.ruleToStartState[n.ruleIndex].isPrecedenceRule) {\n                        const t = n.transitions[n.transitions.length - 1].target;\n                        t instanceof X && t.epsilonOnlyTransitions && t.transitions[0].target instanceof S && (n.isPrecedenceDecision = !0);\n                    }\n                }\n            }\n            verifyATN(t) {\n                if (this.deserializationOptions.verifyATN) for(let e = 0; e < t.states.length; e++){\n                    const n = t.states[e];\n                    if (null !== n) if (this.checkCondition(n.epsilonOnlyTransitions || n.transitions.length <= 1), n instanceof nt) this.checkCondition(null !== n.loopBackState);\n                    else if (n instanceof et) if (this.checkCondition(null !== n.loopBackState), this.checkCondition(2 === n.transitions.length), n.transitions[0].target instanceof st) this.checkCondition(n.transitions[1].target instanceof X), this.checkCondition(!n.nonGreedy);\n                    else {\n                        if (!(n.transitions[0].target instanceof X)) throw \"IllegalState\";\n                        this.checkCondition(n.transitions[1].target instanceof st), this.checkCondition(n.nonGreedy);\n                    }\n                    else n instanceof tt ? (this.checkCondition(1 === n.transitions.length), this.checkCondition(n.transitions[0].target instanceof et)) : n instanceof X ? this.checkCondition(null !== n.loopBackState) : n instanceof J ? this.checkCondition(null !== n.stopState) : n instanceof j ? this.checkCondition(null !== n.endState) : n instanceof Q ? this.checkCondition(null !== n.startState) : n instanceof W ? this.checkCondition(n.transitions.length <= 1 || n.decision >= 0) : this.checkCondition(n.transitions.length <= 1 || n instanceof S);\n                }\n            }\n            checkCondition(t, e) {\n                if (!t) throw null == e && (e = \"IllegalState\"), e;\n            }\n            readInt() {\n                return this.data[this.pos++];\n            }\n            readInt32() {\n                return this.readInt() | this.readInt() << 16;\n            }\n            edgeFactory(e, n, s, i, r, o, l, a) {\n                const h = e.states[i];\n                switch(n){\n                    case A.EPSILON:\n                        return new at(h);\n                    case A.RANGE:\n                        return new ot(h, 0 !== l ? t.EOF : r, o);\n                    case A.RULE:\n                        return new I(e.states[r], o, l, h);\n                    case A.PREDICATE:\n                        return new ct(h, r, o, 0 !== l);\n                    case A.PRECEDENCE:\n                        return new dt(h, r);\n                    case A.ATOM:\n                        return new rt(h, 0 !== l ? t.EOF : r);\n                    case A.ACTION:\n                        return new lt(h, r, o, 0 !== l);\n                    case A.SET:\n                        return new R(h, a[r]);\n                    case A.NOT_SET:\n                        return new m(h, a[r]);\n                    case A.WILDCARD:\n                        return new _(h);\n                    default:\n                        throw \"The specified transition type: \" + n + \" is not valid.\";\n                }\n            }\n            stateFactory(t, e) {\n                if (null === this.stateFactories) {\n                    const t = [];\n                    t[C.INVALID_TYPE] = null, t[C.BASIC] = ()=>new Y, t[C.RULE_START] = ()=>new J, t[C.BLOCK_START] = ()=>new it, t[C.PLUS_BLOCK_START] = ()=>new nt, t[C.STAR_BLOCK_START] = ()=>new st, t[C.TOKEN_START] = ()=>new $, t[C.RULE_STOP] = ()=>new S, t[C.BLOCK_END] = ()=>new Q, t[C.STAR_LOOP_BACK] = ()=>new tt, t[C.STAR_LOOP_ENTRY] = ()=>new et, t[C.PLUS_LOOP_BACK] = ()=>new Z, t[C.LOOP_END] = ()=>new X, this.stateFactories = t;\n                }\n                if (t > this.stateFactories.length || null === this.stateFactories[t]) throw \"The specified state type \" + t + \" is not valid.\";\n                {\n                    const n = this.stateFactories[t]();\n                    if (null !== n) return n.ruleIndex = e, n;\n                }\n            }\n            lexerActionFactory(t, e, n) {\n                if (null === this.actionFactories) {\n                    const t = [];\n                    t[0] = (t, e)=>new Et(t), t[1] = (t, e)=>new Tt(t, e), t[2] = (t, e)=>new It(t), t[3] = (t, e)=>xt.INSTANCE, t[4] = (t, e)=>At.INSTANCE, t[5] = (t, e)=>new St(t), t[6] = (t, e)=>ft.INSTANCE, t[7] = (t, e)=>new Ct(t), this.actionFactories = t;\n                }\n                if (t > this.actionFactories.length || null === this.actionFactories[t]) throw \"The specified lexer action type \" + t + \" is not valid.\";\n                return this.actionFactories[t](e, n);\n            }\n        }\n        class _t {\n            syntaxError(t, e, n, s, i, r) {}\n            reportAmbiguity(t, e, n, s, i, r, o) {}\n            reportAttemptingFullContext(t, e, n, s, i, r) {}\n            reportContextSensitivity(t, e, n, s, i, r) {}\n        }\n        class Nt extends _t {\n            constructor(){\n                super();\n            }\n            syntaxError(t, e, n, s, i, r) {\n                console.error(\"line \" + n + \":\" + s + \" \" + i);\n            }\n        }\n        Nt.INSTANCE = new Nt;\n        class Lt extends _t {\n            constructor(t){\n                if (super(), null === t) throw \"delegates\";\n                return this.delegates = t, this;\n            }\n            syntaxError(t, e, n, s, i, r) {\n                this.delegates.map((o)=>o.syntaxError(t, e, n, s, i, r));\n            }\n            reportAmbiguity(t, e, n, s, i, r, o) {\n                this.delegates.map((l)=>l.reportAmbiguity(t, e, n, s, i, r, o));\n            }\n            reportAttemptingFullContext(t, e, n, s, i, r) {\n                this.delegates.map((o)=>o.reportAttemptingFullContext(t, e, n, s, i, r));\n            }\n            reportContextSensitivity(t, e, n, s, i, r) {\n                this.delegates.map((o)=>o.reportContextSensitivity(t, e, n, s, i, r));\n            }\n        }\n        class yt {\n            constructor(){\n                this._listeners = [\n                    Nt.INSTANCE\n                ], this._interp = null, this._stateNumber = -1;\n            }\n            checkVersion(t) {\n                \"4.10.1\" !== t && console.log(\"ANTLR runtime and generated code versions disagree: 4.10.1!=\" + t);\n            }\n            addErrorListener(t) {\n                this._listeners.push(t);\n            }\n            removeErrorListeners() {\n                this._listeners = [];\n            }\n            getLiteralNames() {\n                return Object.getPrototypeOf(this).constructor.literalNames || [];\n            }\n            getSymbolicNames() {\n                return Object.getPrototypeOf(this).constructor.symbolicNames || [];\n            }\n            getTokenNames() {\n                if (!this.tokenNames) {\n                    const t = this.getLiteralNames(), e = this.getSymbolicNames(), n = t.length > e.length ? t.length : e.length;\n                    this.tokenNames = [];\n                    for(let s = 0; s < n; s++)this.tokenNames[s] = t[s] || e[s] || \"<INVALID\";\n                }\n                return this.tokenNames;\n            }\n            getTokenTypeMap() {\n                const e = this.getTokenNames();\n                if (null === e) throw \"The current recognizer does not provide a list of token names.\";\n                let n = this.tokenTypeMapCache[e];\n                return void 0 === n && (n = e.reduce(function(t, e, n) {\n                    t[e] = n;\n                }), n.EOF = t.EOF, this.tokenTypeMapCache[e] = n), n;\n            }\n            getRuleIndexMap() {\n                const t = this.ruleNames;\n                if (null === t) throw \"The current recognizer does not provide a list of rule names.\";\n                let e = this.ruleIndexMapCache[t];\n                return void 0 === e && (e = t.reduce(function(t, e, n) {\n                    t[e] = n;\n                }), this.ruleIndexMapCache[t] = e), e;\n            }\n            getTokenType(e) {\n                const n = this.getTokenTypeMap()[e];\n                return void 0 !== n ? n : t.INVALID_TYPE;\n            }\n            getErrorHeader(t) {\n                return \"line \" + t.getOffendingToken().line + \":\" + t.getOffendingToken().column;\n            }\n            getTokenErrorDisplay(e) {\n                if (null === e) return \"<no token>\";\n                let n = e.text;\n                return null === n && (n = e.type === t.EOF ? \"<EOF>\" : \"<\" + e.type + \">\"), n = n.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\t\", \"\\\\t\"), \"'\" + n + \"'\";\n            }\n            getErrorListenerDispatch() {\n                return new Lt(this._listeners);\n            }\n            sempred(t, e, n) {\n                return !0;\n            }\n            precpred(t, e) {\n                return !0;\n            }\n            get state() {\n                return this._stateNumber;\n            }\n            set state(t) {\n                this._stateNumber = t;\n            }\n        }\n        yt.tokenTypeMapCache = {}, yt.ruleIndexMapCache = {};\n        class Ot extends t {\n            constructor(e, n, s, i, r){\n                super(), this.source = void 0 !== e ? e : Ot.EMPTY_SOURCE, this.type = void 0 !== n ? n : null, this.channel = void 0 !== s ? s : t.DEFAULT_CHANNEL, this.start = void 0 !== i ? i : -1, this.stop = void 0 !== r ? r : -1, this.tokenIndex = -1, null !== this.source[0] ? (this.line = e[0].line, this.column = e[0].column) : this.column = -1;\n            }\n            clone() {\n                const t = new Ot(this.source, this.type, this.channel, this.start, this.stop);\n                return t.tokenIndex = this.tokenIndex, t.line = this.line, t.column = this.column, t.text = this.text, t;\n            }\n            toString() {\n                let t = this.text;\n                return t = null !== t ? t.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\") : \"<no text>\", \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + t + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n            }\n            get text() {\n                if (null !== this._text) return this._text;\n                const t = this.getInputStream();\n                if (null === t) return null;\n                const e = t.size;\n                return this.start < e && this.stop < e ? t.getText(this.start, this.stop) : \"<EOF>\";\n            }\n            set text(t) {\n                this._text = t;\n            }\n        }\n        Ot.EMPTY_SOURCE = [\n            null,\n            null\n        ];\n        class kt extends class {\n        } {\n            constructor(t){\n                super(), this.copyText = void 0 !== t && t;\n            }\n            create(t, e, n, s, i, r, o, l) {\n                const a = new Ot(t, e, s, i, r);\n                return a.line = o, a.column = l, null !== n ? a.text = n : this.copyText && null !== t[1] && (a.text = t[1].getText(i, r)), a;\n            }\n            createThin(t, e) {\n                const n = new Ot(null, t);\n                return n.text = e, n;\n            }\n        }\n        kt.DEFAULT = new kt;\n        class vt extends Error {\n            constructor(t){\n                super(t.message), Error.captureStackTrace && Error.captureStackTrace(this, vt), this.message = t.message, this.recognizer = t.recognizer, this.input = t.input, this.ctx = t.ctx, this.offendingToken = null, this.offendingState = -1, null !== this.recognizer && (this.offendingState = this.recognizer.state);\n            }\n            getExpectedTokens() {\n                return null !== this.recognizer ? this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx) : null;\n            }\n            toString() {\n                return this.message;\n            }\n        }\n        class Pt extends vt {\n            constructor(t, e, n, s){\n                super({\n                    message: \"\",\n                    recognizer: t,\n                    input: e,\n                    ctx: null\n                }), this.startIndex = n, this.deadEndConfigs = s;\n            }\n            toString() {\n                let t = \"\";\n                return this.startIndex >= 0 && this.startIndex < this.input.size && (t = this.input.getText(new T(this.startIndex, this.startIndex))), \"LexerNoViableAltException\" + t;\n            }\n        }\n        class Dt extends yt {\n            constructor(e){\n                super(), this._input = e, this._factory = kt.DEFAULT, this._tokenFactorySourcePair = [\n                    this,\n                    e\n                ], this._interp = null, this._token = null, this._tokenStartCharIndex = -1, this._tokenStartLine = -1, this._tokenStartColumn = -1, this._hitEOF = !1, this._channel = t.DEFAULT_CHANNEL, this._type = t.INVALID_TYPE, this._modeStack = [], this._mode = Dt.DEFAULT_MODE, this._text = null;\n            }\n            reset() {\n                null !== this._input && this._input.seek(0), this._token = null, this._type = t.INVALID_TYPE, this._channel = t.DEFAULT_CHANNEL, this._tokenStartCharIndex = -1, this._tokenStartColumn = -1, this._tokenStartLine = -1, this._text = null, this._hitEOF = !1, this._mode = Dt.DEFAULT_MODE, this._modeStack = [], this._interp.reset();\n            }\n            nextToken() {\n                if (null === this._input) throw \"nextToken requires a non-null input stream.\";\n                const e = this._input.mark();\n                try {\n                    for(;;){\n                        if (this._hitEOF) return this.emitEOF(), this._token;\n                        this._token = null, this._channel = t.DEFAULT_CHANNEL, this._tokenStartCharIndex = this._input.index, this._tokenStartColumn = this._interp.column, this._tokenStartLine = this._interp.line, this._text = null;\n                        let e = !1;\n                        for(;;){\n                            this._type = t.INVALID_TYPE;\n                            let n = Dt.SKIP;\n                            try {\n                                n = this._interp.match(this._input, this._mode);\n                            } catch (t) {\n                                if (!(t instanceof vt)) throw console.log(t.stack), t;\n                                this.notifyListeners(t), this.recover(t);\n                            }\n                            if (this._input.LA(1) === t.EOF && (this._hitEOF = !0), this._type === t.INVALID_TYPE && (this._type = n), this._type === Dt.SKIP) {\n                                e = !0;\n                                break;\n                            }\n                            if (this._type !== Dt.MORE) break;\n                        }\n                        if (!e) return null === this._token && this.emit(), this._token;\n                    }\n                } finally{\n                    this._input.release(e);\n                }\n            }\n            skip() {\n                this._type = Dt.SKIP;\n            }\n            more() {\n                this._type = Dt.MORE;\n            }\n            mode(t) {\n                this._mode = t;\n            }\n            pushMode(t) {\n                this._interp.debug && console.log(\"pushMode \" + t), this._modeStack.push(this._mode), this.mode(t);\n            }\n            popMode() {\n                if (0 === this._modeStack.length) throw \"Empty Stack\";\n                return this._interp.debug && console.log(\"popMode back to \" + this._modeStack.slice(0, -1)), this.mode(this._modeStack.pop()), this._mode;\n            }\n            emitToken(t) {\n                this._token = t;\n            }\n            emit() {\n                const t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n                return this.emitToken(t), t;\n            }\n            emitEOF() {\n                const e = this.column, n = this.line, s = this._factory.create(this._tokenFactorySourcePair, t.EOF, null, t.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, n, e);\n                return this.emitToken(s), s;\n            }\n            getCharIndex() {\n                return this._input.index;\n            }\n            getAllTokens() {\n                const e = [];\n                let n = this.nextToken();\n                for(; n.type !== t.EOF;)e.push(n), n = this.nextToken();\n                return e;\n            }\n            notifyListeners(t) {\n                const e = this._tokenStartCharIndex, n = this._input.index, s = this._input.getText(e, n), i = \"token recognition error at: '\" + this.getErrorDisplay(s) + \"'\";\n                this.getErrorListenerDispatch().syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, i, t);\n            }\n            getErrorDisplay(t) {\n                const e = [];\n                for(let n = 0; n < t.length; n++)e.push(t[n]);\n                return e.join(\"\");\n            }\n            getErrorDisplayForChar(e) {\n                return e.charCodeAt(0) === t.EOF ? \"<EOF>\" : \"\\n\" === e ? \"\\\\n\" : \"\t\" === e ? \"\\\\t\" : \"\\r\" === e ? \"\\\\r\" : e;\n            }\n            getCharErrorDisplay(t) {\n                return \"'\" + this.getErrorDisplayForChar(t) + \"'\";\n            }\n            recover(e) {\n                this._input.LA(1) !== t.EOF && (e instanceof Pt ? this._interp.consume(this._input) : this._input.consume());\n            }\n            get inputStream() {\n                return this._input;\n            }\n            set inputStream(t) {\n                this._input = null, this._tokenFactorySourcePair = [\n                    this,\n                    this._input\n                ], this.reset(), this._input = t, this._tokenFactorySourcePair = [\n                    this,\n                    this._input\n                ];\n            }\n            get sourceName() {\n                return this._input.sourceName;\n            }\n            get type() {\n                return this._type;\n            }\n            set type(t) {\n                this._type = t;\n            }\n            get line() {\n                return this._interp.line;\n            }\n            set line(t) {\n                this._interp.line = t;\n            }\n            get column() {\n                return this._interp.column;\n            }\n            set column(t) {\n                this._interp.column = t;\n            }\n            get text() {\n                return null !== this._text ? this._text : this._interp.getText(this._input);\n            }\n            set text(t) {\n                this._text = t;\n            }\n        }\n        function wt(t) {\n            return t.hashCodeForConfigSet();\n        }\n        function bt(t, e) {\n            return t === e || null !== t && null !== e && t.equalsForConfigSet(e);\n        }\n        Dt.DEFAULT_MODE = 0, Dt.MORE = -2, Dt.SKIP = -3, Dt.DEFAULT_TOKEN_CHANNEL = t.DEFAULT_CHANNEL, Dt.HIDDEN = t.HIDDEN_CHANNEL, Dt.MIN_CHAR_VALUE = 0, Dt.MAX_CHAR_VALUE = 1114111;\n        class Mt {\n            constructor(t){\n                this.configLookup = new c(wt, bt), this.fullCtx = void 0 === t || t, this.readOnly = !1, this.configs = [], this.uniqueAlt = 0, this.conflictingAlts = null, this.hasSemanticContext = !1, this.dipsIntoOuterContext = !1, this.cachedHashCode = -1;\n            }\n            add(t, e) {\n                if (void 0 === e && (e = null), this.readOnly) throw \"This set is readonly\";\n                t.semanticContext !== u.NONE && (this.hasSemanticContext = !0), t.reachesIntoOuterContext > 0 && (this.dipsIntoOuterContext = !0);\n                const n = this.configLookup.add(t);\n                if (n === t) return this.cachedHashCode = -1, this.configs.push(t), !0;\n                const s = !this.fullCtx, i = V(n.context, t.context, s, e);\n                return n.reachesIntoOuterContext = Math.max(n.reachesIntoOuterContext, t.reachesIntoOuterContext), t.precedenceFilterSuppressed && (n.precedenceFilterSuppressed = !0), n.context = i, !0;\n            }\n            getStates() {\n                const t = new c;\n                for(let e = 0; e < this.configs.length; e++)t.add(this.configs[e].state);\n                return t;\n            }\n            getPredicates() {\n                const t = [];\n                for(let e = 0; e < this.configs.length; e++){\n                    const n = this.configs[e].semanticContext;\n                    n !== u.NONE && t.push(n.semanticContext);\n                }\n                return t;\n            }\n            optimizeConfigs(t) {\n                if (this.readOnly) throw \"This set is readonly\";\n                if (0 !== this.configLookup.length) for(let e = 0; e < this.configs.length; e++){\n                    const n = this.configs[e];\n                    n.context = t.getCachedContext(n.context);\n                }\n            }\n            addAll(t) {\n                for(let e = 0; e < t.length; e++)this.add(t[e]);\n                return !1;\n            }\n            equals(t) {\n                return this === t || t instanceof Mt && e(this.configs, t.configs) && this.fullCtx === t.fullCtx && this.uniqueAlt === t.uniqueAlt && this.conflictingAlts === t.conflictingAlts && this.hasSemanticContext === t.hasSemanticContext && this.dipsIntoOuterContext === t.dipsIntoOuterContext;\n            }\n            hashCode() {\n                const t = new i;\n                return t.update(this.configs), t.finish();\n            }\n            updateHashCode(t) {\n                this.readOnly ? (-1 === this.cachedHashCode && (this.cachedHashCode = this.hashCode()), t.update(this.cachedHashCode)) : t.update(this.hashCode());\n            }\n            isEmpty() {\n                return 0 === this.configs.length;\n            }\n            contains(t) {\n                if (null === this.configLookup) throw \"This method is not implemented for readonly sets.\";\n                return this.configLookup.contains(t);\n            }\n            containsFast(t) {\n                if (null === this.configLookup) throw \"This method is not implemented for readonly sets.\";\n                return this.configLookup.containsFast(t);\n            }\n            clear() {\n                if (this.readOnly) throw \"This set is readonly\";\n                this.configs = [], this.cachedHashCode = -1, this.configLookup = new c;\n            }\n            setReadonly(t) {\n                this.readOnly = t, t && (this.configLookup = null);\n            }\n            toString() {\n                return a(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== z.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (null !== this.conflictingAlts ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n            }\n            get items() {\n                return this.configs;\n            }\n            get length() {\n                return this.configs.length;\n            }\n        }\n        class Ft {\n            constructor(t, e){\n                return null === t && (t = -1), null === e && (e = new Mt), this.stateNumber = t, this.configs = e, this.edges = null, this.isAcceptState = !1, this.prediction = 0, this.lexerActionExecutor = null, this.requiresFullContext = !1, this.predicates = null, this;\n            }\n            getAltSet() {\n                const t = new c;\n                if (null !== this.configs) for(let e = 0; e < this.configs.length; e++){\n                    const n = this.configs[e];\n                    t.add(n.alt);\n                }\n                return 0 === t.length ? null : t;\n            }\n            equals(t) {\n                return this === t || t instanceof Ft && this.configs.equals(t.configs);\n            }\n            toString() {\n                let t = this.stateNumber + \":\" + this.configs;\n                return this.isAcceptState && (t += \"=>\", null !== this.predicates ? t += this.predicates : t += this.prediction), t;\n            }\n            hashCode() {\n                const t = new i;\n                return t.update(this.configs), t.finish();\n            }\n        }\n        class Bt {\n            constructor(t, e){\n                return this.atn = t, this.sharedContextCache = e, this;\n            }\n            getCachedContext(t) {\n                if (null === this.sharedContextCache) return t;\n                const e = new U;\n                return K(t, this.sharedContextCache, e);\n            }\n        }\n        Bt.ERROR = new Ft(2147483647, new Mt);\n        class Ut extends Mt {\n            constructor(){\n                super(), this.configLookup = new c;\n            }\n        }\n        class Ht extends E {\n            constructor(t, e){\n                super(t, e);\n                const n = t.lexerActionExecutor || null;\n                return this.lexerActionExecutor = n || (null !== e ? e.lexerActionExecutor : null), this.passedThroughNonGreedyDecision = null !== e && this.checkNonGreedyDecision(e, this.state), this.hashCodeForConfigSet = Ht.prototype.hashCode, this.equalsForConfigSet = Ht.prototype.equals, this;\n            }\n            updateHashCode(t) {\n                t.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n            }\n            equals(t) {\n                return this === t || t instanceof Ht && this.passedThroughNonGreedyDecision === t.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(t.lexerActionExecutor) : !t.lexerActionExecutor) && super.equals(t);\n            }\n            checkNonGreedyDecision(t, e) {\n                return t.passedThroughNonGreedyDecision || e instanceof W && e.nonGreedy;\n            }\n        }\n        class Kt extends gt {\n            constructor(t, e){\n                super(e.actionType), this.offset = t, this.action = e, this.isPositionDependent = !0;\n            }\n            execute(t) {\n                this.action.execute(t);\n            }\n            updateHashCode(t) {\n                t.update(this.actionType, this.offset, this.action);\n            }\n            equals(t) {\n                return this === t || t instanceof Kt && this.offset === t.offset && this.action === t.action;\n            }\n        }\n        class Vt {\n            constructor(t){\n                return this.lexerActions = null === t ? [] : t, this.cachedHashCode = i.hashStuff(t), this;\n            }\n            fixOffsetBeforeMatch(t) {\n                let e = null;\n                for(let n = 0; n < this.lexerActions.length; n++)!this.lexerActions[n].isPositionDependent || this.lexerActions[n] instanceof Kt || (null === e && (e = this.lexerActions.concat([])), e[n] = new Kt(t, this.lexerActions[n]));\n                return null === e ? this : new Vt(e);\n            }\n            execute(t, e, n) {\n                let s = !1;\n                const i = e.index;\n                try {\n                    for(let r = 0; r < this.lexerActions.length; r++){\n                        let o = this.lexerActions[r];\n                        if (o instanceof Kt) {\n                            const t = o.offset;\n                            e.seek(n + t), o = o.action, s = n + t !== i;\n                        } else o.isPositionDependent && (e.seek(i), s = !1);\n                        o.execute(t);\n                    }\n                } finally{\n                    s && e.seek(i);\n                }\n            }\n            hashCode() {\n                return this.cachedHashCode;\n            }\n            updateHashCode(t) {\n                t.update(this.cachedHashCode);\n            }\n            equals(t) {\n                if (this === t) return !0;\n                if (t instanceof Vt) {\n                    if (this.cachedHashCode != t.cachedHashCode) return !1;\n                    if (this.lexerActions.length != t.lexerActions.length) return !1;\n                    {\n                        const e = this.lexerActions.length;\n                        for(let n = 0; n < e; ++n)if (!this.lexerActions[n].equals(t.lexerActions[n])) return !1;\n                        return !0;\n                    }\n                }\n                return !1;\n            }\n            static append(t, e) {\n                if (null === t) return new Vt([\n                    e\n                ]);\n                const n = t.lexerActions.concat([\n                    e\n                ]);\n                return new Vt(n);\n            }\n        }\n        function Gt(t) {\n            t.index = -1, t.line = 0, t.column = -1, t.dfaState = null;\n        }\n        class qt {\n            constructor(){\n                Gt(this);\n            }\n            reset() {\n                Gt(this);\n            }\n        }\n        class zt extends Bt {\n            constructor(t, e, n, s){\n                super(e, s), this.decisionToDFA = n, this.recog = t, this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Dt.DEFAULT_MODE, this.prevAccept = new qt;\n            }\n            copyState(t) {\n                this.column = t.column, this.line = t.line, this.mode = t.mode, this.startIndex = t.startIndex;\n            }\n            match(t, e) {\n                this.mode = e;\n                const n = t.mark();\n                try {\n                    this.startIndex = t.index, this.prevAccept.reset();\n                    const s = this.decisionToDFA[e];\n                    return null === s.s0 ? this.matchATN(t) : this.execATN(t, s.s0);\n                } finally{\n                    t.release(n);\n                }\n            }\n            reset() {\n                this.prevAccept.reset(), this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Dt.DEFAULT_MODE;\n            }\n            matchATN(t) {\n                const e = this.atn.modeToStartState[this.mode];\n                zt.debug && console.log(\"matchATN mode \" + this.mode + \" start: \" + e);\n                const n = this.mode, s = this.computeStartState(t, e), i = s.hasSemanticContext;\n                s.hasSemanticContext = !1;\n                const r = this.addDFAState(s);\n                i || (this.decisionToDFA[this.mode].s0 = r);\n                const o = this.execATN(t, r);\n                return zt.debug && console.log(\"DFA after matchATN: \" + this.decisionToDFA[n].toLexerString()), o;\n            }\n            execATN(e, n) {\n                zt.debug && console.log(\"start state closure=\" + n.configs), n.isAcceptState && this.captureSimState(this.prevAccept, e, n);\n                let s = e.LA(1), i = n;\n                for(;;){\n                    zt.debug && console.log(\"execATN loop starting closure: \" + i.configs);\n                    let n = this.getExistingTargetState(i, s);\n                    if (null === n && (n = this.computeTargetState(e, i, s)), n === Bt.ERROR) break;\n                    if (s !== t.EOF && this.consume(e), n.isAcceptState && (this.captureSimState(this.prevAccept, e, n), s === t.EOF)) break;\n                    s = e.LA(1), i = n;\n                }\n                return this.failOrAccept(this.prevAccept, e, i.configs, s);\n            }\n            getExistingTargetState(t, e) {\n                if (null === t.edges || e < zt.MIN_DFA_EDGE || e > zt.MAX_DFA_EDGE) return null;\n                let n = t.edges[e - zt.MIN_DFA_EDGE];\n                return void 0 === n && (n = null), zt.debug && null !== n && console.log(\"reuse state \" + t.stateNumber + \" edge to \" + n.stateNumber), n;\n            }\n            computeTargetState(t, e, n) {\n                const s = new Ut;\n                return this.getReachableConfigSet(t, e.configs, s, n), 0 === s.items.length ? (s.hasSemanticContext || this.addDFAEdge(e, n, Bt.ERROR), Bt.ERROR) : this.addDFAEdge(e, n, null, s);\n            }\n            failOrAccept(e, n, s, i) {\n                if (null !== this.prevAccept.dfaState) {\n                    const t = e.dfaState.lexerActionExecutor;\n                    return this.accept(n, t, this.startIndex, e.index, e.line, e.column), e.dfaState.prediction;\n                }\n                if (i === t.EOF && n.index === this.startIndex) return t.EOF;\n                throw new Pt(this.recog, n, this.startIndex, s);\n            }\n            getReachableConfigSet(e, n, s, i) {\n                let r = z.INVALID_ALT_NUMBER;\n                for(let o = 0; o < n.items.length; o++){\n                    const l = n.items[o], a = l.alt === r;\n                    if (!a || !l.passedThroughNonGreedyDecision) {\n                        zt.debug && console.log(\"testing %s at %s\\n\", this.getTokenName(i), l.toString(this.recog, !0));\n                        for(let n = 0; n < l.state.transitions.length; n++){\n                            const o = l.state.transitions[n], h = this.getReachableTarget(o, i);\n                            if (null !== h) {\n                                let n = l.lexerActionExecutor;\n                                null !== n && (n = n.fixOffsetBeforeMatch(e.index - this.startIndex));\n                                const o = i === t.EOF, c = new Ht({\n                                    state: h,\n                                    lexerActionExecutor: n\n                                }, l);\n                                this.closure(e, c, s, a, !0, o) && (r = l.alt);\n                            }\n                        }\n                    }\n                }\n            }\n            accept(t, e, n, s, i, r) {\n                zt.debug && console.log(\"ACTION %s\\n\", e), t.seek(s), this.line = i, this.column = r, null !== e && null !== this.recog && e.execute(this.recog, t, n);\n            }\n            getReachableTarget(t, e) {\n                return t.matches(e, 0, Dt.MAX_CHAR_VALUE) ? t.target : null;\n            }\n            computeStartState(t, e) {\n                const n = w.EMPTY, s = new Ut;\n                for(let i = 0; i < e.transitions.length; i++){\n                    const r = e.transitions[i].target, o = new Ht({\n                        state: r,\n                        alt: i + 1,\n                        context: n\n                    }, null);\n                    this.closure(t, o, s, !1, !1, !1);\n                }\n                return s;\n            }\n            closure(t, e, n, s, i, r) {\n                let o = null;\n                if (zt.debug && console.log(\"closure(\" + e.toString(this.recog, !0) + \")\"), e.state instanceof S) {\n                    if (zt.debug && (null !== this.recog ? console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[e.state.ruleIndex], e) : console.log(\"closure at rule stop %s\\n\", e)), null === e.context || e.context.hasEmptyPath()) {\n                        if (null === e.context || e.context.isEmpty()) return n.add(e), !0;\n                        n.add(new Ht({\n                            state: e.state,\n                            context: w.EMPTY\n                        }, e)), s = !0;\n                    }\n                    if (null !== e.context && !e.context.isEmpty()) {\n                        for(let l = 0; l < e.context.length; l++)if (e.context.getReturnState(l) !== w.EMPTY_RETURN_STATE) {\n                            const a = e.context.getParent(l), h = this.atn.states[e.context.getReturnState(l)];\n                            o = new Ht({\n                                state: h,\n                                context: a\n                            }, e), s = this.closure(t, o, n, s, i, r);\n                        }\n                    }\n                    return s;\n                }\n                e.state.epsilonOnlyTransitions || s && e.passedThroughNonGreedyDecision || n.add(e);\n                for(let l = 0; l < e.state.transitions.length; l++){\n                    const a = e.state.transitions[l];\n                    o = this.getEpsilonTarget(t, e, a, n, i, r), null !== o && (s = this.closure(t, o, n, s, i, r));\n                }\n                return s;\n            }\n            getEpsilonTarget(e, n, s, i, r, o) {\n                let l = null;\n                if (s.serializationType === A.RULE) {\n                    const t = M.create(n.context, s.followState.stateNumber);\n                    l = new Ht({\n                        state: s.target,\n                        context: t\n                    }, n);\n                } else {\n                    if (s.serializationType === A.PRECEDENCE) throw \"Precedence predicates are not supported in lexers.\";\n                    if (s.serializationType === A.PREDICATE) zt.debug && console.log(\"EVAL rule \" + s.ruleIndex + \":\" + s.predIndex), i.hasSemanticContext = !0, this.evaluatePredicate(e, s.ruleIndex, s.predIndex, r) && (l = new Ht({\n                        state: s.target\n                    }, n));\n                    else if (s.serializationType === A.ACTION) if (null === n.context || n.context.hasEmptyPath()) {\n                        const t = Vt.append(n.lexerActionExecutor, this.atn.lexerActions[s.actionIndex]);\n                        l = new Ht({\n                            state: s.target,\n                            lexerActionExecutor: t\n                        }, n);\n                    } else l = new Ht({\n                        state: s.target\n                    }, n);\n                    else s.serializationType === A.EPSILON ? l = new Ht({\n                        state: s.target\n                    }, n) : s.serializationType !== A.ATOM && s.serializationType !== A.RANGE && s.serializationType !== A.SET || o && s.matches(t.EOF, 0, Dt.MAX_CHAR_VALUE) && (l = new Ht({\n                        state: s.target\n                    }, n));\n                }\n                return l;\n            }\n            evaluatePredicate(t, e, n, s) {\n                if (null === this.recog) return !0;\n                if (!s) return this.recog.sempred(null, e, n);\n                const i = this.column, r = this.line, o = t.index, l = t.mark();\n                try {\n                    return this.consume(t), this.recog.sempred(null, e, n);\n                } finally{\n                    this.column = i, this.line = r, t.seek(o), t.release(l);\n                }\n            }\n            captureSimState(t, e, n) {\n                t.index = e.index, t.line = this.line, t.column = this.column, t.dfaState = n;\n            }\n            addDFAEdge(t, e, n, s) {\n                if (void 0 === n && (n = null), void 0 === s && (s = null), null === n && null !== s) {\n                    const t = s.hasSemanticContext;\n                    if (s.hasSemanticContext = !1, n = this.addDFAState(s), t) return n;\n                }\n                return e < zt.MIN_DFA_EDGE || e > zt.MAX_DFA_EDGE || (zt.debug && console.log(\"EDGE \" + t + \" -> \" + n + \" upon \" + e), null === t.edges && (t.edges = []), t.edges[e - zt.MIN_DFA_EDGE] = n), n;\n            }\n            addDFAState(t) {\n                const e = new Ft(null, t);\n                let n = null;\n                for(let e = 0; e < t.items.length; e++){\n                    const s = t.items[e];\n                    if (s.state instanceof S) {\n                        n = s;\n                        break;\n                    }\n                }\n                null !== n && (e.isAcceptState = !0, e.lexerActionExecutor = n.lexerActionExecutor, e.prediction = this.atn.ruleToTokenType[n.state.ruleIndex]);\n                const s = this.decisionToDFA[this.mode], i = s.states.get(e);\n                if (null !== i) return i;\n                const r = e;\n                return r.stateNumber = s.states.length, t.setReadonly(!0), r.configs = t, s.states.add(r), r;\n            }\n            getDFA(t) {\n                return this.decisionToDFA[t];\n            }\n            getText(t) {\n                return t.getText(this.startIndex, t.index - 1);\n            }\n            consume(t) {\n                t.LA(1) === \"\\n\".charCodeAt(0) ? (this.line += 1, this.column = 0) : this.column += 1, t.consume();\n            }\n            getTokenName(t) {\n                return -1 === t ? \"EOF\" : \"'\" + String.fromCharCode(t) + \"'\";\n            }\n        }\n        zt.debug = !1, zt.dfa_debug = !1, zt.MIN_DFA_EDGE = 0, zt.MAX_DFA_EDGE = 127;\n        class Yt {\n            constructor(t, e){\n                this.alt = e, this.pred = t;\n            }\n            toString() {\n                return \"(\" + this.pred + \", \" + this.alt + \")\";\n            }\n        }\n        class Wt {\n            constructor(){\n                this.data = {};\n            }\n            get(t) {\n                return this.data[\"k-\" + t] || null;\n            }\n            set(t, e) {\n                this.data[\"k-\" + t] = e;\n            }\n            values() {\n                return Object.keys(this.data).filter((t)=>t.startsWith(\"k-\")).map((t)=>this.data[t], this);\n            }\n        }\n        const jt = {\n            SLL: 0,\n            LL: 1,\n            LL_EXACT_AMBIG_DETECTION: 2,\n            hasSLLConflictTerminatingPrediction: function(t, e) {\n                if (jt.allConfigsInRuleStopStates(e)) return !0;\n                if (t === jt.SLL && e.hasSemanticContext) {\n                    const t = new Mt;\n                    for(let n = 0; n < e.items.length; n++){\n                        let s = e.items[n];\n                        s = new E({\n                            semanticContext: u.NONE\n                        }, s), t.add(s);\n                    }\n                    e = t;\n                }\n                const n = jt.getConflictingAltSubsets(e);\n                return jt.hasConflictingAltSet(n) && !jt.hasStateAssociatedWithOneAlt(e);\n            },\n            hasConfigInRuleStopState: function(t) {\n                for(let e = 0; e < t.items.length; e++)if (t.items[e].state instanceof S) return !0;\n                return !1;\n            },\n            allConfigsInRuleStopStates: function(t) {\n                for(let e = 0; e < t.items.length; e++)if (!(t.items[e].state instanceof S)) return !1;\n                return !0;\n            },\n            resolvesToJustOneViableAlt: function(t) {\n                return jt.getSingleViableAlt(t);\n            },\n            allSubsetsConflict: function(t) {\n                return !jt.hasNonConflictingAltSet(t);\n            },\n            hasNonConflictingAltSet: function(t) {\n                for(let e = 0; e < t.length; e++)if (1 === t[e].length) return !0;\n                return !1;\n            },\n            hasConflictingAltSet: function(t) {\n                for(let e = 0; e < t.length; e++)if (t[e].length > 1) return !0;\n                return !1;\n            },\n            allSubsetsEqual: function(t) {\n                let e = null;\n                for(let n = 0; n < t.length; n++){\n                    const s = t[n];\n                    if (null === e) e = s;\n                    else if (s !== e) return !1;\n                }\n                return !0;\n            },\n            getUniqueAlt: function(t) {\n                const e = jt.getAlts(t);\n                return 1 === e.length ? e.minValue() : z.INVALID_ALT_NUMBER;\n            },\n            getAlts: function(t) {\n                const e = new G;\n                return t.map(function(t) {\n                    e.or(t);\n                }), e;\n            },\n            getConflictingAltSubsets: function(t) {\n                const e = new U;\n                return e.hashFunction = function(t) {\n                    i.hashStuff(t.state.stateNumber, t.context);\n                }, e.equalsFunction = function(t, e) {\n                    return t.state.stateNumber === e.state.stateNumber && t.context.equals(e.context);\n                }, t.items.map(function(t) {\n                    let n = e.get(t);\n                    null === n && (n = new G, e.set(t, n)), n.add(t.alt);\n                }), e.getValues();\n            },\n            getStateToAltMap: function(t) {\n                const e = new Wt;\n                return t.items.map(function(t) {\n                    let n = e.get(t.state);\n                    null === n && (n = new G, e.set(t.state, n)), n.add(t.alt);\n                }), e;\n            },\n            hasStateAssociatedWithOneAlt: function(t) {\n                const e = jt.getStateToAltMap(t).values();\n                for(let t = 0; t < e.length; t++)if (1 === e[t].length) return !0;\n                return !1;\n            },\n            getSingleViableAlt: function(t) {\n                let e = null;\n                for(let n = 0; n < t.length; n++){\n                    const s = t[n].minValue();\n                    if (null === e) e = s;\n                    else if (e !== s) return z.INVALID_ALT_NUMBER;\n                }\n                return e;\n            }\n        }, Qt = jt;\n        class Xt extends vt {\n            constructor(t, e, n, s, i, r){\n                r = r || t._ctx, s = s || t.getCurrentToken(), n = n || t.getCurrentToken(), e = e || t.getInputStream(), super({\n                    message: \"\",\n                    recognizer: t,\n                    input: e,\n                    ctx: r\n                }), this.deadEndConfigs = i, this.startToken = n, this.offendingToken = s;\n            }\n        }\n        class Jt {\n            constructor(t){\n                this.defaultMapCtor = t || U, this.cacheMap = new this.defaultMapCtor;\n            }\n            get(t, e) {\n                const n = this.cacheMap.get(t) || null;\n                return null === n ? null : n.get(e) || null;\n            }\n            set(t, e, n) {\n                let s = this.cacheMap.get(t) || null;\n                null === s && (s = new this.defaultMapCtor, this.cacheMap.set(t, s)), s.set(e, n);\n            }\n        }\n        const $t = {\n            ATN: z,\n            ATNDeserializer: mt,\n            LexerATNSimulator: zt,\n            ParserATNSimulator: class extends Bt {\n                constructor(t, e, n, s){\n                    super(e, s), this.parser = t, this.decisionToDFA = n, this.predictionMode = Qt.LL, this._input = null, this._startIndex = 0, this._outerContext = null, this._dfa = null, this.mergeCache = null, this.debug = !1, this.debug_closure = !1, this.debug_add = !1, this.debug_list_atn_decisions = !1, this.dfa_debug = !1, this.retry_debug = !1;\n                }\n                reset() {}\n                adaptivePredict(t, e, n) {\n                    (this.debug || this.debug_list_atn_decisions) && console.log(\"adaptivePredict decision \" + e + \" exec LA(1)==\" + this.getLookaheadName(t) + \" line \" + t.LT(1).line + \":\" + t.LT(1).column), this._input = t, this._startIndex = t.index, this._outerContext = n;\n                    const s = this.decisionToDFA[e];\n                    this._dfa = s;\n                    const i = t.mark(), r = t.index;\n                    try {\n                        let e;\n                        if (e = s.precedenceDfa ? s.getPrecedenceStartState(this.parser.getPrecedence()) : s.s0, null === e) {\n                            null === n && (n = D.EMPTY), (this.debug || this.debug_list_atn_decisions) && console.log(\"predictATN decision \" + s.decision + \" exec LA(1)==\" + this.getLookaheadName(t) + \", outerContext=\" + n.toString(this.parser.ruleNames));\n                            const i = !1;\n                            let r = this.computeStartState(s.atnStartState, D.EMPTY, i);\n                            s.precedenceDfa ? (s.s0.configs = r, r = this.applyPrecedenceFilter(r), e = this.addDFAState(s, new Ft(null, r)), s.setPrecedenceStartState(this.parser.getPrecedence(), e)) : (e = this.addDFAState(s, new Ft(null, r)), s.s0 = e);\n                        }\n                        const o = this.execATN(s, e, t, r, n);\n                        return this.debug && console.log(\"DFA after predictATN: \" + s.toString(this.parser.literalNames, this.parser.symbolicNames)), o;\n                    } finally{\n                        this._dfa = null, this.mergeCache = null, t.seek(r), t.release(i);\n                    }\n                }\n                execATN(e, n, s, i, r) {\n                    let o;\n                    (this.debug || this.debug_list_atn_decisions) && console.log(\"execATN decision \" + e.decision + \" exec LA(1)==\" + this.getLookaheadName(s) + \" line \" + s.LT(1).line + \":\" + s.LT(1).column);\n                    let l = n;\n                    this.debug && console.log(\"s0 = \" + n);\n                    let a = s.LA(1);\n                    for(;;){\n                        let n = this.getExistingTargetState(l, a);\n                        if (null === n && (n = this.computeTargetState(e, l, a)), n === Bt.ERROR) {\n                            const t = this.noViableAlt(s, r, l.configs, i);\n                            if (s.seek(i), o = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(l.configs, r), o !== z.INVALID_ALT_NUMBER) return o;\n                            throw t;\n                        }\n                        if (n.requiresFullContext && this.predictionMode !== Qt.SLL) {\n                            let t = null;\n                            if (null !== n.predicates) {\n                                this.debug && console.log(\"DFA state has preds in DFA sim LL failover\");\n                                const e = s.index;\n                                if (e !== i && s.seek(i), t = this.evalSemanticContext(n.predicates, r, !0), 1 === t.length) return this.debug && console.log(\"Full LL avoided\"), t.minValue();\n                                e !== i && s.seek(e);\n                            }\n                            this.dfa_debug && console.log(\"ctx sensitive state \" + r + \" in \" + n);\n                            const l = !0, a = this.computeStartState(e.atnStartState, r, l);\n                            return this.reportAttemptingFullContext(e, t, n.configs, i, s.index), o = this.execATNWithFullContext(e, n, a, s, i, r), o;\n                        }\n                        if (n.isAcceptState) {\n                            if (null === n.predicates) return n.prediction;\n                            const t = s.index;\n                            s.seek(i);\n                            const o = this.evalSemanticContext(n.predicates, r, !0);\n                            if (0 === o.length) throw this.noViableAlt(s, r, n.configs, i);\n                            return 1 === o.length || this.reportAmbiguity(e, n, i, t, !1, o, n.configs), o.minValue();\n                        }\n                        l = n, a !== t.EOF && (s.consume(), a = s.LA(1));\n                    }\n                }\n                getExistingTargetState(t, e) {\n                    const n = t.edges;\n                    return null === n ? null : n[e + 1] || null;\n                }\n                computeTargetState(t, e, n) {\n                    const s = this.computeReachSet(e.configs, n, !1);\n                    if (null === s) return this.addDFAEdge(t, e, n, Bt.ERROR), Bt.ERROR;\n                    let i = new Ft(null, s);\n                    const r = this.getUniqueAlt(s);\n                    if (this.debug) {\n                        const t = Qt.getConflictingAltSubsets(s);\n                        console.log(\"SLL altSubSets=\" + a(t) + \", configs=\" + s + \", predict=\" + r + \", allSubsetsConflict=\" + Qt.allSubsetsConflict(t) + \", conflictingAlts=\" + this.getConflictingAlts(s));\n                    }\n                    return r !== z.INVALID_ALT_NUMBER ? (i.isAcceptState = !0, i.configs.uniqueAlt = r, i.prediction = r) : Qt.hasSLLConflictTerminatingPrediction(this.predictionMode, s) && (i.configs.conflictingAlts = this.getConflictingAlts(s), i.requiresFullContext = !0, i.isAcceptState = !0, i.prediction = i.configs.conflictingAlts.minValue()), i.isAcceptState && i.configs.hasSemanticContext && (this.predicateDFAState(i, this.atn.getDecisionState(t.decision)), null !== i.predicates && (i.prediction = z.INVALID_ALT_NUMBER)), i = this.addDFAEdge(t, e, n, i), i;\n                }\n                predicateDFAState(t, e) {\n                    const n = e.transitions.length, s = this.getConflictingAltsOrUniqueAlt(t.configs), i = this.getPredsForAmbigAlts(s, t.configs, n);\n                    null !== i ? (t.predicates = this.getPredicatePredictions(s, i), t.prediction = z.INVALID_ALT_NUMBER) : t.prediction = s.minValue();\n                }\n                execATNWithFullContext(e, n, s, i, r, o) {\n                    (this.debug || this.debug_list_atn_decisions) && console.log(\"execATNWithFullContext \" + s);\n                    let l, a = !1, h = s;\n                    i.seek(r);\n                    let c = i.LA(1), u = -1;\n                    for(;;){\n                        if (l = this.computeReachSet(h, c, !0), null === l) {\n                            const t = this.noViableAlt(i, o, h, r);\n                            i.seek(r);\n                            const e = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(h, o);\n                            if (e !== z.INVALID_ALT_NUMBER) return e;\n                            throw t;\n                        }\n                        const e = Qt.getConflictingAltSubsets(l);\n                        if (this.debug && console.log(\"LL altSubSets=\" + e + \", predict=\" + Qt.getUniqueAlt(e) + \", resolvesToJustOneViableAlt=\" + Qt.resolvesToJustOneViableAlt(e)), l.uniqueAlt = this.getUniqueAlt(l), l.uniqueAlt !== z.INVALID_ALT_NUMBER) {\n                            u = l.uniqueAlt;\n                            break;\n                        }\n                        if (this.predictionMode !== Qt.LL_EXACT_AMBIG_DETECTION) {\n                            if (u = Qt.resolvesToJustOneViableAlt(e), u !== z.INVALID_ALT_NUMBER) break;\n                        } else if (Qt.allSubsetsConflict(e) && Qt.allSubsetsEqual(e)) {\n                            a = !0, u = Qt.getSingleViableAlt(e);\n                            break;\n                        }\n                        h = l, c !== t.EOF && (i.consume(), c = i.LA(1));\n                    }\n                    return l.uniqueAlt !== z.INVALID_ALT_NUMBER ? (this.reportContextSensitivity(e, u, l, r, i.index), u) : (this.reportAmbiguity(e, n, r, i.index, a, null, l), u);\n                }\n                computeReachSet(e, n, s) {\n                    this.debug && console.log(\"in computeReachSet, starting closure: \" + e), null === this.mergeCache && (this.mergeCache = new Jt);\n                    const i = new Mt(s);\n                    let r = null;\n                    for(let o = 0; o < e.items.length; o++){\n                        const l = e.items[o];\n                        if (this.debug && console.log(\"testing \" + this.getTokenName(n) + \" at \" + l), l.state instanceof S) (s || n === t.EOF) && (null === r && (r = []), r.push(l), this.debug_add && console.log(\"added \" + l + \" to skippedStopStates\"));\n                        else for(let t = 0; t < l.state.transitions.length; t++){\n                            const e = l.state.transitions[t], s = this.getReachableTarget(e, n);\n                            if (null !== s) {\n                                const t = new E({\n                                    state: s\n                                }, l);\n                                i.add(t, this.mergeCache), this.debug_add && console.log(\"added \" + t + \" to intermediate\");\n                            }\n                        }\n                    }\n                    let o = null;\n                    if (null === r && n !== t.EOF && (1 === i.items.length || this.getUniqueAlt(i) !== z.INVALID_ALT_NUMBER) && (o = i), null === o) {\n                        o = new Mt(s);\n                        const e = new c, r = n === t.EOF;\n                        for(let t = 0; t < i.items.length; t++)this.closure(i.items[t], o, e, !1, s, r);\n                    }\n                    if (n === t.EOF && (o = this.removeAllConfigsNotInRuleStopState(o, o === i)), !(null === r || s && Qt.hasConfigInRuleStopState(o))) for(let t = 0; t < r.length; t++)o.add(r[t], this.mergeCache);\n                    return 0 === o.items.length ? null : o;\n                }\n                removeAllConfigsNotInRuleStopState(e, n) {\n                    if (Qt.allConfigsInRuleStopStates(e)) return e;\n                    const s = new Mt(e.fullCtx);\n                    for(let i = 0; i < e.items.length; i++){\n                        const r = e.items[i];\n                        if (r.state instanceof S) s.add(r, this.mergeCache);\n                        else if (n && r.state.epsilonOnlyTransitions && this.atn.nextTokens(r.state).contains(t.EPSILON)) {\n                            const t = this.atn.ruleToStopState[r.state.ruleIndex];\n                            s.add(new E({\n                                state: t\n                            }, r), this.mergeCache);\n                        }\n                    }\n                    return s;\n                }\n                computeStartState(t, e, n) {\n                    const s = H(this.atn, e), i = new Mt(n);\n                    for(let e = 0; e < t.transitions.length; e++){\n                        const r = t.transitions[e].target, o = new E({\n                            state: r,\n                            alt: e + 1,\n                            context: s\n                        }, null), l = new c;\n                        this.closure(o, i, l, !0, n, !1);\n                    }\n                    return i;\n                }\n                applyPrecedenceFilter(t) {\n                    let e;\n                    const n = [], s = new Mt(t.fullCtx);\n                    for(let i = 0; i < t.items.length; i++){\n                        if (e = t.items[i], 1 !== e.alt) continue;\n                        const r = e.semanticContext.evalPrecedence(this.parser, this._outerContext);\n                        null !== r && (n[e.state.stateNumber] = e.context, r !== e.semanticContext ? s.add(new E({\n                            semanticContext: r\n                        }, e), this.mergeCache) : s.add(e, this.mergeCache));\n                    }\n                    for(let i = 0; i < t.items.length; i++)if (e = t.items[i], 1 !== e.alt) {\n                        if (!e.precedenceFilterSuppressed) {\n                            const t = n[e.state.stateNumber] || null;\n                            if (null !== t && t.equals(e.context)) continue;\n                        }\n                        s.add(e, this.mergeCache);\n                    }\n                    return s;\n                }\n                getReachableTarget(t, e) {\n                    return t.matches(e, 0, this.atn.maxTokenType) ? t.target : null;\n                }\n                getPredsForAmbigAlts(t, e, n) {\n                    let s = [];\n                    for(let n = 0; n < e.items.length; n++){\n                        const i = e.items[n];\n                        t.has(i.alt) && (s[i.alt] = u.orContext(s[i.alt] || null, i.semanticContext));\n                    }\n                    let i = 0;\n                    for(let t = 1; t < n + 1; t++){\n                        const e = s[t] || null;\n                        null === e ? s[t] = u.NONE : e !== u.NONE && (i += 1);\n                    }\n                    return 0 === i && (s = null), this.debug && console.log(\"getPredsForAmbigAlts result \" + a(s)), s;\n                }\n                getPredicatePredictions(t, e) {\n                    const n = [];\n                    let s = !1;\n                    for(let i = 1; i < e.length; i++){\n                        const r = e[i];\n                        null !== t && t.has(i) && n.push(new Yt(r, i)), r !== u.NONE && (s = !0);\n                    }\n                    return s ? n : null;\n                }\n                getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(t, e) {\n                    const n = this.splitAccordingToSemanticValidity(t, e), s = n[0], i = n[1];\n                    let r = this.getAltThatFinishedDecisionEntryRule(s);\n                    return r !== z.INVALID_ALT_NUMBER || i.items.length > 0 && (r = this.getAltThatFinishedDecisionEntryRule(i), r !== z.INVALID_ALT_NUMBER) ? r : z.INVALID_ALT_NUMBER;\n                }\n                getAltThatFinishedDecisionEntryRule(t) {\n                    const e = [];\n                    for(let n = 0; n < t.items.length; n++){\n                        const s = t.items[n];\n                        (s.reachesIntoOuterContext > 0 || s.state instanceof S && s.context.hasEmptyPath()) && e.indexOf(s.alt) < 0 && e.push(s.alt);\n                    }\n                    return 0 === e.length ? z.INVALID_ALT_NUMBER : Math.min.apply(null, e);\n                }\n                splitAccordingToSemanticValidity(t, e) {\n                    const n = new Mt(t.fullCtx), s = new Mt(t.fullCtx);\n                    for(let i = 0; i < t.items.length; i++){\n                        const r = t.items[i];\n                        r.semanticContext !== u.NONE ? r.semanticContext.evaluate(this.parser, e) ? n.add(r) : s.add(r) : n.add(r);\n                    }\n                    return [\n                        n,\n                        s\n                    ];\n                }\n                evalSemanticContext(t, e, n) {\n                    const s = new G;\n                    for(let i = 0; i < t.length; i++){\n                        const r = t[i];\n                        if (r.pred === u.NONE) {\n                            if (s.add(r.alt), !n) break;\n                            continue;\n                        }\n                        const o = r.pred.evaluate(this.parser, e);\n                        if ((this.debug || this.dfa_debug) && console.log(\"eval pred \" + r + \"=\" + o), o && ((this.debug || this.dfa_debug) && console.log(\"PREDICT \" + r.alt), s.add(r.alt), !n)) break;\n                    }\n                    return s;\n                }\n                closure(t, e, n, s, i, r) {\n                    this.closureCheckingStopState(t, e, n, s, i, 0, r);\n                }\n                closureCheckingStopState(t, e, n, s, i, r, o) {\n                    if ((this.debug || this.debug_closure) && (console.log(\"closure(\" + t.toString(this.parser, !0) + \")\"), t.reachesIntoOuterContext > 50)) throw \"problem\";\n                    if (t.state instanceof S) {\n                        if (!t.context.isEmpty()) {\n                            for(let l = 0; l < t.context.length; l++){\n                                if (t.context.getReturnState(l) === w.EMPTY_RETURN_STATE) {\n                                    if (i) {\n                                        e.add(new E({\n                                            state: t.state,\n                                            context: w.EMPTY\n                                        }, t), this.mergeCache);\n                                        continue;\n                                    }\n                                    this.debug && console.log(\"FALLING off rule \" + this.getRuleName(t.state.ruleIndex)), this.closure_(t, e, n, s, i, r, o);\n                                    continue;\n                                }\n                                const a = this.atn.states[t.context.getReturnState(l)], h = t.context.getParent(l), c = {\n                                    state: a,\n                                    alt: t.alt,\n                                    context: h,\n                                    semanticContext: t.semanticContext\n                                }, u = new E(c, null);\n                                u.reachesIntoOuterContext = t.reachesIntoOuterContext, this.closureCheckingStopState(u, e, n, s, i, r - 1, o);\n                            }\n                            return;\n                        }\n                        if (i) return void e.add(t, this.mergeCache);\n                        this.debug && console.log(\"FALLING off rule \" + this.getRuleName(t.state.ruleIndex));\n                    }\n                    this.closure_(t, e, n, s, i, r, o);\n                }\n                closure_(t, e, n, s, i, r, o) {\n                    const l = t.state;\n                    l.epsilonOnlyTransitions || e.add(t, this.mergeCache);\n                    for(let a = 0; a < l.transitions.length; a++){\n                        if (0 === a && this.canDropLoopEntryEdgeInLeftRecursiveRule(t)) continue;\n                        const h = l.transitions[a], c = s && !(h instanceof lt), u = this.getEpsilonTarget(t, h, c, 0 === r, i, o);\n                        if (null !== u) {\n                            let s = r;\n                            if (t.state instanceof S) {\n                                if (null !== this._dfa && this._dfa.precedenceDfa && h.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex && (u.precedenceFilterSuppressed = !0), u.reachesIntoOuterContext += 1, n.add(u) !== u) continue;\n                                e.dipsIntoOuterContext = !0, s -= 1, this.debug && console.log(\"dips into outer ctx: \" + u);\n                            } else {\n                                if (!h.isEpsilon && n.add(u) !== u) continue;\n                                h instanceof I && s >= 0 && (s += 1);\n                            }\n                            this.closureCheckingStopState(u, e, n, c, i, s, o);\n                        }\n                    }\n                }\n                canDropLoopEntryEdgeInLeftRecursiveRule(t) {\n                    const e = t.state;\n                    if (e.stateType !== C.STAR_LOOP_ENTRY) return !1;\n                    if (e.stateType !== C.STAR_LOOP_ENTRY || !e.isPrecedenceDecision || t.context.isEmpty() || t.context.hasEmptyPath()) return !1;\n                    const n = t.context.length;\n                    for(let s = 0; s < n; s++)if (this.atn.states[t.context.getReturnState(s)].ruleIndex !== e.ruleIndex) return !1;\n                    const s = e.transitions[0].target.endState.stateNumber, i = this.atn.states[s];\n                    for(let s = 0; s < n; s++){\n                        const n = t.context.getReturnState(s), r = this.atn.states[n];\n                        if (1 !== r.transitions.length || !r.transitions[0].isEpsilon) return !1;\n                        const o = r.transitions[0].target;\n                        if (!(r.stateType === C.BLOCK_END && o === e || r === i || o === i || o.stateType === C.BLOCK_END && 1 === o.transitions.length && o.transitions[0].isEpsilon && o.transitions[0].target === e)) return !1;\n                    }\n                    return !0;\n                }\n                getRuleName(t) {\n                    return null !== this.parser && t >= 0 ? this.parser.ruleNames[t] : \"<rule \" + t + \">\";\n                }\n                getEpsilonTarget(e, n, s, i, r, o) {\n                    switch(n.serializationType){\n                        case A.RULE:\n                            return this.ruleTransition(e, n);\n                        case A.PRECEDENCE:\n                            return this.precedenceTransition(e, n, s, i, r);\n                        case A.PREDICATE:\n                            return this.predTransition(e, n, s, i, r);\n                        case A.ACTION:\n                            return this.actionTransition(e, n);\n                        case A.EPSILON:\n                            return new E({\n                                state: n.target\n                            }, e);\n                        case A.ATOM:\n                        case A.RANGE:\n                        case A.SET:\n                            return o && n.matches(t.EOF, 0, 1) ? new E({\n                                state: n.target\n                            }, e) : null;\n                        default:\n                            return null;\n                    }\n                }\n                actionTransition(t, e) {\n                    if (this.debug) {\n                        const t = -1 === e.actionIndex ? 65535 : e.actionIndex;\n                        console.log(\"ACTION edge \" + e.ruleIndex + \":\" + t);\n                    }\n                    return new E({\n                        state: e.target\n                    }, t);\n                }\n                precedenceTransition(t, e, n, s, i) {\n                    this.debug && (console.log(\"PRED (collectPredicates=\" + n + \") \" + e.precedence + \">=_p, ctx dependent=true\"), null !== this.parser && console.log(\"context surrounding pred is \" + a(this.parser.getRuleInvocationStack())));\n                    let r = null;\n                    if (n && s) if (i) {\n                        const n = this._input.index;\n                        this._input.seek(this._startIndex);\n                        const s = e.getPredicate().evaluate(this.parser, this._outerContext);\n                        this._input.seek(n), s && (r = new E({\n                            state: e.target\n                        }, t));\n                    } else {\n                        const n = u.andContext(t.semanticContext, e.getPredicate());\n                        r = new E({\n                            state: e.target,\n                            semanticContext: n\n                        }, t);\n                    }\n                    else r = new E({\n                        state: e.target\n                    }, t);\n                    return this.debug && console.log(\"config from pred transition=\" + r), r;\n                }\n                predTransition(t, e, n, s, i) {\n                    this.debug && (console.log(\"PRED (collectPredicates=\" + n + \") \" + e.ruleIndex + \":\" + e.predIndex + \", ctx dependent=\" + e.isCtxDependent), null !== this.parser && console.log(\"context surrounding pred is \" + a(this.parser.getRuleInvocationStack())));\n                    let r = null;\n                    if (n && (e.isCtxDependent && s || !e.isCtxDependent)) if (i) {\n                        const n = this._input.index;\n                        this._input.seek(this._startIndex);\n                        const s = e.getPredicate().evaluate(this.parser, this._outerContext);\n                        this._input.seek(n), s && (r = new E({\n                            state: e.target\n                        }, t));\n                    } else {\n                        const n = u.andContext(t.semanticContext, e.getPredicate());\n                        r = new E({\n                            state: e.target,\n                            semanticContext: n\n                        }, t);\n                    }\n                    else r = new E({\n                        state: e.target\n                    }, t);\n                    return this.debug && console.log(\"config from pred transition=\" + r), r;\n                }\n                ruleTransition(t, e) {\n                    this.debug && console.log(\"CALL rule \" + this.getRuleName(e.target.ruleIndex) + \", ctx=\" + t.context);\n                    const n = e.followState, s = M.create(t.context, n.stateNumber);\n                    return new E({\n                        state: e.target,\n                        context: s\n                    }, t);\n                }\n                getConflictingAlts(t) {\n                    const e = Qt.getConflictingAltSubsets(t);\n                    return Qt.getAlts(e);\n                }\n                getConflictingAltsOrUniqueAlt(t) {\n                    let e = null;\n                    return t.uniqueAlt !== z.INVALID_ALT_NUMBER ? (e = new G, e.add(t.uniqueAlt)) : e = t.conflictingAlts, e;\n                }\n                getTokenName(e) {\n                    if (e === t.EOF) return \"EOF\";\n                    if (null !== this.parser && null !== this.parser.literalNames) {\n                        if (!(e >= this.parser.literalNames.length && e >= this.parser.symbolicNames.length)) return (this.parser.literalNames[e] || this.parser.symbolicNames[e]) + \"<\" + e + \">\";\n                        console.log(e + \" ttype out of range: \" + this.parser.literalNames), console.log(\"\" + this.parser.getInputStream().getTokens());\n                    }\n                    return \"\" + e;\n                }\n                getLookaheadName(t) {\n                    return this.getTokenName(t.LA(1));\n                }\n                dumpDeadEndConfigs(t) {\n                    console.log(\"dead end configs: \");\n                    const e = t.getDeadEndConfigs();\n                    for(let t = 0; t < e.length; t++){\n                        const n = e[t];\n                        let s = \"no edges\";\n                        if (n.state.transitions.length > 0) {\n                            const t = n.state.transitions[0];\n                            t instanceof rt ? s = \"Atom \" + this.getTokenName(t.label) : t instanceof R && (s = (t instanceof m ? \"~\" : \"\") + \"Set \" + t.set);\n                        }\n                        console.error(n.toString(this.parser, !0) + \":\" + s);\n                    }\n                }\n                noViableAlt(t, e, n, s) {\n                    return new Xt(this.parser, t, t.get(s), t.LT(1), n, e);\n                }\n                getUniqueAlt(t) {\n                    let e = z.INVALID_ALT_NUMBER;\n                    for(let n = 0; n < t.items.length; n++){\n                        const s = t.items[n];\n                        if (e === z.INVALID_ALT_NUMBER) e = s.alt;\n                        else if (s.alt !== e) return z.INVALID_ALT_NUMBER;\n                    }\n                    return e;\n                }\n                addDFAEdge(t, e, n, s) {\n                    if (this.debug && console.log(\"EDGE \" + e + \" -> \" + s + \" upon \" + this.getTokenName(n)), null === s) return null;\n                    if (s = this.addDFAState(t, s), null === e || n < -1 || n > this.atn.maxTokenType) return s;\n                    if (null === e.edges && (e.edges = []), e.edges[n + 1] = s, this.debug) {\n                        const e = null === this.parser ? null : this.parser.literalNames, n = null === this.parser ? null : this.parser.symbolicNames;\n                        console.log(\"DFA=\\n\" + t.toString(e, n));\n                    }\n                    return s;\n                }\n                addDFAState(t, e) {\n                    if (e === Bt.ERROR) return e;\n                    const n = t.states.get(e);\n                    return null !== n ? n : (e.stateNumber = t.states.length, e.configs.readOnly || (e.configs.optimizeConfigs(this), e.configs.setReadonly(!0)), t.states.add(e), this.debug && console.log(\"adding new DFA state: \" + e), e);\n                }\n                reportAttemptingFullContext(t, e, n, s, i) {\n                    if (this.debug || this.retry_debug) {\n                        const e = new T(s, i + 1);\n                        console.log(\"reportAttemptingFullContext decision=\" + t.decision + \":\" + n + \", input=\" + this.parser.getTokenStream().getText(e));\n                    }\n                    null !== this.parser && this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, t, s, i, e, n);\n                }\n                reportContextSensitivity(t, e, n, s, i) {\n                    if (this.debug || this.retry_debug) {\n                        const e = new T(s, i + 1);\n                        console.log(\"reportContextSensitivity decision=\" + t.decision + \":\" + n + \", input=\" + this.parser.getTokenStream().getText(e));\n                    }\n                    null !== this.parser && this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, t, s, i, e, n);\n                }\n                reportAmbiguity(t, e, n, s, i, r, o) {\n                    if (this.debug || this.retry_debug) {\n                        const t = new T(n, s + 1);\n                        console.log(\"reportAmbiguity \" + r + \":\" + o + \", input=\" + this.parser.getTokenStream().getText(t));\n                    }\n                    null !== this.parser && this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, t, n, s, i, r, o);\n                }\n            },\n            PredictionMode: Qt\n        };\n        class Zt {\n            constructor(t, e, n){\n                this.dfa = t, this.literalNames = e || [], this.symbolicNames = n || [];\n            }\n            toString() {\n                if (null === this.dfa.s0) return null;\n                let t = \"\";\n                const e = this.dfa.sortedStates();\n                for(let n = 0; n < e.length; n++){\n                    const s = e[n];\n                    if (null !== s.edges) {\n                        const e = s.edges.length;\n                        for(let n = 0; n < e; n++){\n                            const e = s.edges[n] || null;\n                            null !== e && 2147483647 !== e.stateNumber && (t = t.concat(this.getStateString(s)), t = t.concat(\"-\"), t = t.concat(this.getEdgeLabel(n)), t = t.concat(\"->\"), t = t.concat(this.getStateString(e)), t = t.concat(\"\\n\"));\n                        }\n                    }\n                }\n                return 0 === t.length ? null : t;\n            }\n            getEdgeLabel(t) {\n                return 0 === t ? \"EOF\" : null !== this.literalNames || null !== this.symbolicNames ? this.literalNames[t - 1] || this.symbolicNames[t - 1] : String.fromCharCode(t - 1);\n            }\n            getStateString(t) {\n                const e = (t.isAcceptState ? \":\" : \"\") + \"s\" + t.stateNumber + (t.requiresFullContext ? \"^\" : \"\");\n                return t.isAcceptState ? null !== t.predicates ? e + \"=>\" + a(t.predicates) : e + \"=>\" + t.prediction.toString() : e;\n            }\n        }\n        class te extends Zt {\n            constructor(t){\n                super(t, null);\n            }\n            getEdgeLabel(t) {\n                return \"'\" + String.fromCharCode(t) + \"'\";\n            }\n        }\n        const ee = {\n            DFA: class {\n                constructor(t, e){\n                    if (void 0 === e && (e = 0), this.atnStartState = t, this.decision = e, this._states = new c, this.s0 = null, this.precedenceDfa = !1, t instanceof et && t.isPrecedenceDecision) {\n                        this.precedenceDfa = !0;\n                        const t = new Ft(null, new Mt);\n                        t.edges = [], t.isAcceptState = !1, t.requiresFullContext = !1, this.s0 = t;\n                    }\n                }\n                getPrecedenceStartState(t) {\n                    if (!this.precedenceDfa) throw \"Only precedence DFAs may contain a precedence start state.\";\n                    return t < 0 || t >= this.s0.edges.length ? null : this.s0.edges[t] || null;\n                }\n                setPrecedenceStartState(t, e) {\n                    if (!this.precedenceDfa) throw \"Only precedence DFAs may contain a precedence start state.\";\n                    t < 0 || (this.s0.edges[t] = e);\n                }\n                setPrecedenceDfa(t) {\n                    if (this.precedenceDfa !== t) {\n                        if (this._states = new c, t) {\n                            const t = new Ft(null, new Mt);\n                            t.edges = [], t.isAcceptState = !1, t.requiresFullContext = !1, this.s0 = t;\n                        } else this.s0 = null;\n                        this.precedenceDfa = t;\n                    }\n                }\n                sortedStates() {\n                    return this._states.values().sort(function(t, e) {\n                        return t.stateNumber - e.stateNumber;\n                    });\n                }\n                toString(t, e) {\n                    return t = t || null, e = e || null, null === this.s0 ? \"\" : new Zt(this, t, e).toString();\n                }\n                toLexerString() {\n                    return null === this.s0 ? \"\" : new te(this).toString();\n                }\n                get states() {\n                    return this._states;\n                }\n            },\n            DFASerializer: Zt,\n            LexerDFASerializer: te,\n            PredPrediction: Yt\n        };\n        class ne {\n            visitTerminal(t) {}\n            visitErrorNode(t) {}\n            enterEveryRule(t) {}\n            exitEveryRule(t) {}\n        }\n        class se {\n            walk(t, e) {\n                if (e instanceof k || void 0 !== e.isErrorNode && e.isErrorNode()) t.visitErrorNode(e);\n                else if (e instanceof O) t.visitTerminal(e);\n                else {\n                    this.enterRule(t, e);\n                    for(let n = 0; n < e.getChildCount(); n++){\n                        const s = e.getChild(n);\n                        this.walk(t, s);\n                    }\n                    this.exitRule(t, e);\n                }\n            }\n            enterRule(t, e) {\n                const n = e.getRuleContext();\n                t.enterEveryRule(n), n.enterRule(t);\n            }\n            exitRule(t, e) {\n                const n = e.getRuleContext();\n                n.exitRule(t), t.exitEveryRule(n);\n            }\n        }\n        se.DEFAULT = new se;\n        const ie = {\n            Trees: P,\n            RuleNode: y,\n            ErrorNode: k,\n            TerminalNode: O,\n            ParseTreeListener: ne,\n            ParseTreeVisitor: class {\n                visit(t) {\n                    return Array.isArray(t) ? t.map(function(t) {\n                        return t.accept(this);\n                    }, this) : t.accept(this);\n                }\n                visitChildren(t) {\n                    return t.children ? this.visit(t.children) : null;\n                }\n                visitTerminal(t) {}\n                visitErrorNode(t) {}\n            },\n            ParseTreeWalker: se\n        };\n        class re extends vt {\n            constructor(t){\n                super({\n                    message: \"\",\n                    recognizer: t,\n                    input: t.getInputStream(),\n                    ctx: t._ctx\n                }), this.offendingToken = t.getCurrentToken();\n            }\n        }\n        class oe extends vt {\n            constructor(t, e, n){\n                super({\n                    message: le(e, n || null),\n                    recognizer: t,\n                    input: t.getInputStream(),\n                    ctx: t._ctx\n                });\n                const s = t._interp.atn.states[t.state].transitions[0];\n                s instanceof ct ? (this.ruleIndex = s.ruleIndex, this.predicateIndex = s.predIndex) : (this.ruleIndex = 0, this.predicateIndex = 0), this.predicate = e, this.offendingToken = t.getCurrentToken();\n            }\n        }\n        function le(t, e) {\n            return null !== e ? e : \"failed predicate: {\" + t + \"}?\";\n        }\n        class ae extends Error {\n            constructor(){\n                super(), Error.captureStackTrace(this, ae);\n            }\n        }\n        class he extends class {\n            reset(t) {}\n            recoverInline(t) {}\n            recover(t, e) {}\n            sync(t) {}\n            inErrorRecoveryMode(t) {}\n            reportError(t) {}\n        } {\n            constructor(){\n                super(), this.errorRecoveryMode = !1, this.lastErrorIndex = -1, this.lastErrorStates = null, this.nextTokensContext = null, this.nextTokenState = 0;\n            }\n            reset(t) {\n                this.endErrorCondition(t);\n            }\n            beginErrorCondition(t) {\n                this.errorRecoveryMode = !0;\n            }\n            inErrorRecoveryMode(t) {\n                return this.errorRecoveryMode;\n            }\n            endErrorCondition(t) {\n                this.errorRecoveryMode = !1, this.lastErrorStates = null, this.lastErrorIndex = -1;\n            }\n            reportMatch(t) {\n                this.endErrorCondition(t);\n            }\n            reportError(t, e) {\n                this.inErrorRecoveryMode(t) || (this.beginErrorCondition(t), e instanceof Xt ? this.reportNoViableAlternative(t, e) : e instanceof re ? this.reportInputMismatch(t, e) : e instanceof oe ? this.reportFailedPredicate(t, e) : (console.log(\"unknown recognition error type: \" + e.constructor.name), console.log(e.stack), t.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e)));\n            }\n            recover(t, e) {\n                this.lastErrorIndex === t.getInputStream().index && null !== this.lastErrorStates && this.lastErrorStates.indexOf(t.state) >= 0 && t.consume(), this.lastErrorIndex = t._input.index, null === this.lastErrorStates && (this.lastErrorStates = []), this.lastErrorStates.push(t.state);\n                const n = this.getErrorRecoverySet(t);\n                this.consumeUntil(t, n);\n            }\n            sync(e) {\n                if (this.inErrorRecoveryMode(e)) return;\n                const n = e._interp.atn.states[e.state], s = e.getTokenStream().LA(1), i = e.atn.nextTokens(n);\n                if (i.contains(s)) return this.nextTokensContext = null, void (this.nextTokenState = C.INVALID_STATE_NUMBER);\n                if (i.contains(t.EPSILON)) null === this.nextTokensContext && (this.nextTokensContext = e._ctx, this.nextTokensState = e._stateNumber);\n                else switch(n.stateType){\n                    case C.BLOCK_START:\n                    case C.STAR_BLOCK_START:\n                    case C.PLUS_BLOCK_START:\n                    case C.STAR_LOOP_ENTRY:\n                        if (null !== this.singleTokenDeletion(e)) return;\n                        throw new re(e);\n                    case C.PLUS_LOOP_BACK:\n                    case C.STAR_LOOP_BACK:\n                        {\n                            this.reportUnwantedToken(e);\n                            const t = new x;\n                            t.addSet(e.getExpectedTokens());\n                            const n = t.addSet(this.getErrorRecoverySet(e));\n                            this.consumeUntil(e, n);\n                        }\n                }\n            }\n            reportNoViableAlternative(e, n) {\n                const s = e.getTokenStream();\n                let i;\n                i = null !== s ? n.startToken.type === t.EOF ? \"<EOF>\" : s.getText(new T(n.startToken.tokenIndex, n.offendingToken.tokenIndex)) : \"<unknown input>\";\n                const r = \"no viable alternative at input \" + this.escapeWSAndQuote(i);\n                e.notifyErrorListeners(r, n.offendingToken, n);\n            }\n            reportInputMismatch(t, e) {\n                const n = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toString(t.literalNames, t.symbolicNames);\n                t.notifyErrorListeners(n, e.offendingToken, e);\n            }\n            reportFailedPredicate(t, e) {\n                const n = \"rule \" + t.ruleNames[t._ctx.ruleIndex] + \" \" + e.message;\n                t.notifyErrorListeners(n, e.offendingToken, e);\n            }\n            reportUnwantedToken(t) {\n                if (this.inErrorRecoveryMode(t)) return;\n                this.beginErrorCondition(t);\n                const e = t.getCurrentToken(), n = \"extraneous input \" + this.getTokenErrorDisplay(e) + \" expecting \" + this.getExpectedTokens(t).toString(t.literalNames, t.symbolicNames);\n                t.notifyErrorListeners(n, e, null);\n            }\n            reportMissingToken(t) {\n                if (this.inErrorRecoveryMode(t)) return;\n                this.beginErrorCondition(t);\n                const e = t.getCurrentToken(), n = \"missing \" + this.getExpectedTokens(t).toString(t.literalNames, t.symbolicNames) + \" at \" + this.getTokenErrorDisplay(e);\n                t.notifyErrorListeners(n, e, null);\n            }\n            recoverInline(t) {\n                const e = this.singleTokenDeletion(t);\n                if (null !== e) return t.consume(), e;\n                if (this.singleTokenInsertion(t)) return this.getMissingSymbol(t);\n                throw new re(t);\n            }\n            singleTokenInsertion(t) {\n                const e = t.getTokenStream().LA(1), n = t._interp.atn, s = n.states[t.state].transitions[0].target;\n                return !!n.nextTokens(s, t._ctx).contains(e) && (this.reportMissingToken(t), !0);\n            }\n            singleTokenDeletion(t) {\n                const e = t.getTokenStream().LA(2);\n                if (this.getExpectedTokens(t).contains(e)) {\n                    this.reportUnwantedToken(t), t.consume();\n                    const e = t.getCurrentToken();\n                    return this.reportMatch(t), e;\n                }\n                return null;\n            }\n            getMissingSymbol(e) {\n                const n = e.getCurrentToken(), s = this.getExpectedTokens(e).first();\n                let i;\n                i = s === t.EOF ? \"<missing EOF>\" : \"<missing \" + e.literalNames[s] + \">\";\n                let r = n;\n                const o = e.getTokenStream().LT(-1);\n                return r.type === t.EOF && null !== o && (r = o), e.getTokenFactory().create(r.source, s, i, t.DEFAULT_CHANNEL, -1, -1, r.line, r.column);\n            }\n            getExpectedTokens(t) {\n                return t.getExpectedTokens();\n            }\n            getTokenErrorDisplay(e) {\n                if (null === e) return \"<no token>\";\n                let n = e.text;\n                return null === n && (n = e.type === t.EOF ? \"<EOF>\" : \"<\" + e.type + \">\"), this.escapeWSAndQuote(n);\n            }\n            escapeWSAndQuote(t) {\n                return \"'\" + (t = (t = (t = t.replace(/\\n/g, \"\\\\n\")).replace(/\\r/g, \"\\\\r\")).replace(/\\t/g, \"\\\\t\")) + \"'\";\n            }\n            getErrorRecoverySet(e) {\n                const n = e._interp.atn;\n                let s = e._ctx;\n                const i = new x;\n                for(; null !== s && s.invokingState >= 0;){\n                    const t = n.states[s.invokingState].transitions[0], e = n.nextTokens(t.followState);\n                    i.addSet(e), s = s.parentCtx;\n                }\n                return i.removeOne(t.EPSILON), i;\n            }\n            consumeUntil(e, n) {\n                let s = e.getTokenStream().LA(1);\n                for(; s !== t.EOF && !n.contains(s);)e.consume(), s = e.getTokenStream().LA(1);\n            }\n        }\n        const ce = {\n            RecognitionException: vt,\n            NoViableAltException: Xt,\n            LexerNoViableAltException: Pt,\n            InputMismatchException: re,\n            FailedPredicateException: oe,\n            DiagnosticErrorListener: class extends _t {\n                constructor(t){\n                    super(), t = t || !0, this.exactOnly = t;\n                }\n                reportAmbiguity(t, e, n, s, i, r, o) {\n                    if (this.exactOnly && !i) return;\n                    const l = \"reportAmbiguity d=\" + this.getDecisionDescription(t, e) + \": ambigAlts=\" + this.getConflictingAlts(r, o) + \", input='\" + t.getTokenStream().getText(new T(n, s)) + \"'\";\n                    t.notifyErrorListeners(l);\n                }\n                reportAttemptingFullContext(t, e, n, s, i, r) {\n                    const o = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(t, e) + \", input='\" + t.getTokenStream().getText(new T(n, s)) + \"'\";\n                    t.notifyErrorListeners(o);\n                }\n                reportContextSensitivity(t, e, n, s, i, r) {\n                    const o = \"reportContextSensitivity d=\" + this.getDecisionDescription(t, e) + \", input='\" + t.getTokenStream().getText(new T(n, s)) + \"'\";\n                    t.notifyErrorListeners(o);\n                }\n                getDecisionDescription(t, e) {\n                    const n = e.decision, s = e.atnStartState.ruleIndex, i = t.ruleNames;\n                    if (s < 0 || s >= i.length) return \"\" + n;\n                    const r = i[s] || null;\n                    return null === r || 0 === r.length ? \"\" + n : `${n} (${r})`;\n                }\n                getConflictingAlts(t, e) {\n                    if (null !== t) return t;\n                    const n = new G;\n                    for(let t = 0; t < e.items.length; t++)n.add(e.items[t].alt);\n                    return `{${n.values().join(\", \")}}`;\n                }\n            },\n            BailErrorStrategy: class extends he {\n                constructor(){\n                    super();\n                }\n                recover(t, e) {\n                    let n = t._ctx;\n                    for(; null !== n;)n.exception = e, n = n.parentCtx;\n                    throw new ae(e);\n                }\n                recoverInline(t) {\n                    this.recover(t, new re(t));\n                }\n                sync(t) {}\n            },\n            DefaultErrorStrategy: he,\n            ErrorListener: _t\n        };\n        class ue {\n            constructor(t, e){\n                if (this.name = \"<empty>\", this.strdata = t, this.decodeToUnicodeCodePoints = e || !1, this._index = 0, this.data = [], this.decodeToUnicodeCodePoints) for(let t = 0; t < this.strdata.length;){\n                    const e = this.strdata.codePointAt(t);\n                    this.data.push(e), t += e <= 65535 ? 1 : 2;\n                }\n                else {\n                    this.data = new Array(this.strdata.length);\n                    for(let t = 0; t < this.strdata.length; t++){\n                        const e = this.strdata.charCodeAt(t);\n                        this.data[t] = e;\n                    }\n                }\n                this._size = this.data.length;\n            }\n            reset() {\n                this._index = 0;\n            }\n            consume() {\n                if (this._index >= this._size) throw \"cannot consume EOF\";\n                this._index += 1;\n            }\n            LA(e) {\n                if (0 === e) return 0;\n                e < 0 && (e += 1);\n                const n = this._index + e - 1;\n                return n < 0 || n >= this._size ? t.EOF : this.data[n];\n            }\n            LT(t) {\n                return this.LA(t);\n            }\n            mark() {\n                return -1;\n            }\n            release(t) {}\n            seek(t) {\n                t <= this._index ? this._index = t : this._index = Math.min(t, this._size);\n            }\n            getText(t, e) {\n                if (e >= this._size && (e = this._size - 1), t >= this._size) return \"\";\n                if (this.decodeToUnicodeCodePoints) {\n                    let n = \"\";\n                    for(let s = t; s <= e; s++)n += String.fromCodePoint(this.data[s]);\n                    return n;\n                }\n                return this.strdata.slice(t, e + 1);\n            }\n            toString() {\n                return this.strdata;\n            }\n            get index() {\n                return this._index;\n            }\n            get size() {\n                return this._size;\n            }\n        }\n        var de = n(654);\n        const pe = {\n            fromString: function(t) {\n                return new ue(t, !0);\n            },\n            fromBlob: function(t, e, n, s) {\n                const i = new window.FileReader;\n                i.onload = function(t) {\n                    const e = new ue(t.target.result, !0);\n                    n(e);\n                }, i.onerror = s, i.readAsText(t, e);\n            },\n            fromBuffer: function(t, e) {\n                return new ue(t.toString(e), !0);\n            },\n            fromPath: function(t, e, n) {\n                de.readFile(t, e, function(t, e) {\n                    let s = null;\n                    null !== e && (s = new ue(e, !0)), n(t, s);\n                });\n            },\n            fromPathSync: function(t, e) {\n                const n = de.readFileSync(t, e);\n                return new ue(n, !0);\n            }\n        };\n        class ge extends ne {\n            constructor(t){\n                super(), this.parser = t;\n            }\n            enterEveryRule(t) {\n                console.log(\"enter   \" + this.parser.ruleNames[t.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n            }\n            visitTerminal(t) {\n                console.log(\"consume \" + t.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n            }\n            exitEveryRule(t) {\n                console.log(\"exit    \" + this.parser.ruleNames[t.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n            }\n        }\n        class fe extends yt {\n            constructor(t){\n                super(), this._input = null, this._errHandler = new he, this._precedenceStack = [], this._precedenceStack.push(0), this._ctx = null, this.buildParseTrees = !0, this._tracer = null, this._parseListeners = null, this._syntaxErrors = 0, this.setInputStream(t);\n            }\n            reset() {\n                null !== this._input && this._input.seek(0), this._errHandler.reset(this), this._ctx = null, this._syntaxErrors = 0, this.setTrace(!1), this._precedenceStack = [], this._precedenceStack.push(0), null !== this._interp && this._interp.reset();\n            }\n            match(t) {\n                let e = this.getCurrentToken();\n                return e.type === t ? (this._errHandler.reportMatch(this), this.consume()) : (e = this._errHandler.recoverInline(this), this.buildParseTrees && -1 === e.tokenIndex && this._ctx.addErrorNode(e)), e;\n            }\n            matchWildcard() {\n                let t = this.getCurrentToken();\n                return t.type > 0 ? (this._errHandler.reportMatch(this), this.consume()) : (t = this._errHandler.recoverInline(this), this._buildParseTrees && -1 === t.tokenIndex && this._ctx.addErrorNode(t)), t;\n            }\n            getParseListeners() {\n                return this._parseListeners || [];\n            }\n            addParseListener(t) {\n                if (null === t) throw \"listener\";\n                null === this._parseListeners && (this._parseListeners = []), this._parseListeners.push(t);\n            }\n            removeParseListener(t) {\n                if (null !== this._parseListeners) {\n                    const e = this._parseListeners.indexOf(t);\n                    e >= 0 && this._parseListeners.splice(e, 1), 0 === this._parseListeners.length && (this._parseListeners = null);\n                }\n            }\n            removeParseListeners() {\n                this._parseListeners = null;\n            }\n            triggerEnterRuleEvent() {\n                if (null !== this._parseListeners) {\n                    const t = this._ctx;\n                    this._parseListeners.forEach(function(e) {\n                        e.enterEveryRule(t), t.enterRule(e);\n                    });\n                }\n            }\n            triggerExitRuleEvent() {\n                if (null !== this._parseListeners) {\n                    const t = this._ctx;\n                    this._parseListeners.slice(0).reverse().forEach(function(e) {\n                        t.exitRule(e), e.exitEveryRule(t);\n                    });\n                }\n            }\n            getTokenFactory() {\n                return this._input.tokenSource._factory;\n            }\n            setTokenFactory(t) {\n                this._input.tokenSource._factory = t;\n            }\n            getATNWithBypassAlts() {\n                const t = this.getSerializedATN();\n                if (null === t) throw \"The current parser does not support an ATN with bypass alternatives.\";\n                let e = this.bypassAltsAtnCache[t];\n                if (null === e) {\n                    const n = new pt;\n                    n.generateRuleBypassTransitions = !0, e = new mt(n).deserialize(t), this.bypassAltsAtnCache[t] = e;\n                }\n                return e;\n            }\n            getInputStream() {\n                return this.getTokenStream();\n            }\n            setInputStream(t) {\n                this.setTokenStream(t);\n            }\n            getTokenStream() {\n                return this._input;\n            }\n            setTokenStream(t) {\n                this._input = null, this.reset(), this._input = t;\n            }\n            getCurrentToken() {\n                return this._input.LT(1);\n            }\n            notifyErrorListeners(t, e, n) {\n                n = n || null, null === (e = e || null) && (e = this.getCurrentToken()), this._syntaxErrors += 1;\n                const s = e.line, i = e.column;\n                this.getErrorListenerDispatch().syntaxError(this, e, s, i, t, n);\n            }\n            consume() {\n                const e = this.getCurrentToken();\n                e.type !== t.EOF && this.getInputStream().consume();\n                const n = null !== this._parseListeners && this._parseListeners.length > 0;\n                if (this.buildParseTrees || n) {\n                    let t;\n                    t = this._errHandler.inErrorRecoveryMode(this) ? this._ctx.addErrorNode(e) : this._ctx.addTokenNode(e), t.invokingState = this.state, n && this._parseListeners.forEach(function(e) {\n                        t instanceof k || void 0 !== t.isErrorNode && t.isErrorNode() ? e.visitErrorNode(t) : t instanceof O && e.visitTerminal(t);\n                    });\n                }\n                return e;\n            }\n            addContextToParseTree() {\n                null !== this._ctx.parentCtx && this._ctx.parentCtx.addChild(this._ctx);\n            }\n            enterRule(t, e, n) {\n                this.state = e, this._ctx = t, this._ctx.start = this._input.LT(1), this.buildParseTrees && this.addContextToParseTree(), this.triggerEnterRuleEvent();\n            }\n            exitRule() {\n                this._ctx.stop = this._input.LT(-1), this.triggerExitRuleEvent(), this.state = this._ctx.invokingState, this._ctx = this._ctx.parentCtx;\n            }\n            enterOuterAlt(t, e) {\n                t.setAltNumber(e), this.buildParseTrees && this._ctx !== t && null !== this._ctx.parentCtx && (this._ctx.parentCtx.removeLastChild(), this._ctx.parentCtx.addChild(t)), this._ctx = t;\n            }\n            getPrecedence() {\n                return 0 === this._precedenceStack.length ? -1 : this._precedenceStack[this._precedenceStack.length - 1];\n            }\n            enterRecursionRule(t, e, n, s) {\n                this.state = e, this._precedenceStack.push(s), this._ctx = t, this._ctx.start = this._input.LT(1), this.triggerEnterRuleEvent();\n            }\n            pushNewRecursionContext(t, e, n) {\n                const s = this._ctx;\n                s.parentCtx = t, s.invokingState = e, s.stop = this._input.LT(-1), this._ctx = t, this._ctx.start = s.start, this.buildParseTrees && this._ctx.addChild(s), this.triggerEnterRuleEvent();\n            }\n            unrollRecursionContexts(t) {\n                this._precedenceStack.pop(), this._ctx.stop = this._input.LT(-1);\n                const e = this._ctx, n = this.getParseListeners();\n                if (null !== n && n.length > 0) for(; this._ctx !== t;)this.triggerExitRuleEvent(), this._ctx = this._ctx.parentCtx;\n                else this._ctx = t;\n                e.parentCtx = t, this.buildParseTrees && null !== t && t.addChild(e);\n            }\n            getInvokingContext(t) {\n                let e = this._ctx;\n                for(; null !== e;){\n                    if (e.ruleIndex === t) return e;\n                    e = e.parentCtx;\n                }\n                return null;\n            }\n            precpred(t, e) {\n                return e >= this._precedenceStack[this._precedenceStack.length - 1];\n            }\n            inContext(t) {\n                return !1;\n            }\n            isExpectedToken(e) {\n                const n = this._interp.atn;\n                let s = this._ctx;\n                const i = n.states[this.state];\n                let r = n.nextTokens(i);\n                if (r.contains(e)) return !0;\n                if (!r.contains(t.EPSILON)) return !1;\n                for(; null !== s && s.invokingState >= 0 && r.contains(t.EPSILON);){\n                    const t = n.states[s.invokingState].transitions[0];\n                    if (r = n.nextTokens(t.followState), r.contains(e)) return !0;\n                    s = s.parentCtx;\n                }\n                return !(!r.contains(t.EPSILON) || e !== t.EOF);\n            }\n            getExpectedTokens() {\n                return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n            }\n            getExpectedTokensWithinCurrentRule() {\n                const t = this._interp.atn, e = t.states[this.state];\n                return t.nextTokens(e);\n            }\n            getRuleIndex(t) {\n                const e = this.getRuleIndexMap()[t];\n                return null !== e ? e : -1;\n            }\n            getRuleInvocationStack(t) {\n                null === (t = t || null) && (t = this._ctx);\n                const e = [];\n                for(; null !== t;){\n                    const n = t.ruleIndex;\n                    n < 0 ? e.push(\"n/a\") : e.push(this.ruleNames[n]), t = t.parentCtx;\n                }\n                return e;\n            }\n            getDFAStrings() {\n                return this._interp.decisionToDFA.toString();\n            }\n            dumpDFA() {\n                let t = !1;\n                for(let e = 0; e < this._interp.decisionToDFA.length; e++){\n                    const n = this._interp.decisionToDFA[e];\n                    n.states.length > 0 && (t && console.log(), this.printer.println(\"Decision \" + n.decision + \":\"), this.printer.print(n.toString(this.literalNames, this.symbolicNames)), t = !0);\n                }\n            }\n            getSourceName() {\n                return this._input.sourceName;\n            }\n            setTrace(t) {\n                t ? (null !== this._tracer && this.removeParseListener(this._tracer), this._tracer = new ge(this), this.addParseListener(this._tracer)) : (this.removeParseListener(this._tracer), this._tracer = null);\n            }\n        }\n        fe.bypassAltsAtnCache = {};\n        class Ee extends O {\n            constructor(t){\n                super(), this.parentCtx = null, this.symbol = t;\n            }\n            getChild(t) {\n                return null;\n            }\n            getSymbol() {\n                return this.symbol;\n            }\n            getParent() {\n                return this.parentCtx;\n            }\n            getPayload() {\n                return this.symbol;\n            }\n            getSourceInterval() {\n                if (null === this.symbol) return T.INVALID_INTERVAL;\n                const t = this.symbol.tokenIndex;\n                return new T(t, t);\n            }\n            getChildCount() {\n                return 0;\n            }\n            accept(t) {\n                return t.visitTerminal(this);\n            }\n            getText() {\n                return this.symbol.text;\n            }\n            toString() {\n                return this.symbol.type === t.EOF ? \"<EOF>\" : this.symbol.text;\n            }\n        }\n        class Te extends Ee {\n            constructor(t){\n                super(t);\n            }\n            isErrorNode() {\n                return !0;\n            }\n            accept(t) {\n                return t.visitErrorNode(this);\n            }\n        }\n        class xe extends D {\n            constructor(t, e){\n                super(t = t || null, e = e || null), this.ruleIndex = -1, this.children = null, this.start = null, this.stop = null, this.exception = null;\n            }\n            copyFrom(t) {\n                this.parentCtx = t.parentCtx, this.invokingState = t.invokingState, this.children = null, this.start = t.start, this.stop = t.stop, t.children && (this.children = [], t.children.map(function(t) {\n                    t instanceof Te && (this.children.push(t), t.parentCtx = this);\n                }, this));\n            }\n            enterRule(t) {}\n            exitRule(t) {}\n            addChild(t) {\n                return null === this.children && (this.children = []), this.children.push(t), t;\n            }\n            removeLastChild() {\n                null !== this.children && this.children.pop();\n            }\n            addTokenNode(t) {\n                const e = new Ee(t);\n                return this.addChild(e), e.parentCtx = this, e;\n            }\n            addErrorNode(t) {\n                const e = new Te(t);\n                return this.addChild(e), e.parentCtx = this, e;\n            }\n            getChild(t, e) {\n                if (e = e || null, null === this.children || t < 0 || t >= this.children.length) return null;\n                if (null === e) return this.children[t];\n                for(let n = 0; n < this.children.length; n++){\n                    const s = this.children[n];\n                    if (s instanceof e) {\n                        if (0 === t) return s;\n                        t -= 1;\n                    }\n                }\n                return null;\n            }\n            getToken(t, e) {\n                if (null === this.children || e < 0 || e >= this.children.length) return null;\n                for(let n = 0; n < this.children.length; n++){\n                    const s = this.children[n];\n                    if (s instanceof O && s.symbol.type === t) {\n                        if (0 === e) return s;\n                        e -= 1;\n                    }\n                }\n                return null;\n            }\n            getTokens(t) {\n                if (null === this.children) return [];\n                {\n                    const e = [];\n                    for(let n = 0; n < this.children.length; n++){\n                        const s = this.children[n];\n                        s instanceof O && s.symbol.type === t && e.push(s);\n                    }\n                    return e;\n                }\n            }\n            getTypedRuleContext(t, e) {\n                return this.getChild(e, t);\n            }\n            getTypedRuleContexts(t) {\n                if (null === this.children) return [];\n                {\n                    const e = [];\n                    for(let n = 0; n < this.children.length; n++){\n                        const s = this.children[n];\n                        s instanceof t && e.push(s);\n                    }\n                    return e;\n                }\n            }\n            getChildCount() {\n                return null === this.children ? 0 : this.children.length;\n            }\n            getSourceInterval() {\n                return null === this.start || null === this.stop ? T.INVALID_INTERVAL : new T(this.start.tokenIndex, this.stop.tokenIndex);\n            }\n        }\n        D.EMPTY = new xe;\n        const Ce = {\n            arrayToString: a\n        }, Se = {\n            atn: $t,\n            dfa: ee,\n            tree: ie,\n            error: ce,\n            Token: t,\n            CommonToken: Ot,\n            CharStreams: pe,\n            InputStream: ue,\n            FileStream: class extends ue {\n                constructor(t, e){\n                    super(de.readFileSync(t, \"utf8\"), e), this.fileName = t;\n                }\n            },\n            CommonTokenStream: class extends class extends class {\n            } {\n                constructor(t){\n                    super(), this.tokenSource = t, this.tokens = [], this.index = -1, this.fetchedEOF = !1;\n                }\n                mark() {\n                    return 0;\n                }\n                release(t) {}\n                reset() {\n                    this.seek(0);\n                }\n                seek(t) {\n                    this.lazyInit(), this.index = this.adjustSeekIndex(t);\n                }\n                get(t) {\n                    return this.lazyInit(), this.tokens[t];\n                }\n                consume() {\n                    let e = !1;\n                    if (e = this.index >= 0 && (this.fetchedEOF ? this.index < this.tokens.length - 1 : this.index < this.tokens.length), !e && this.LA(1) === t.EOF) throw \"cannot consume EOF\";\n                    this.sync(this.index + 1) && (this.index = this.adjustSeekIndex(this.index + 1));\n                }\n                sync(t) {\n                    const e = t - this.tokens.length + 1;\n                    return !(e > 0) || this.fetch(e) >= e;\n                }\n                fetch(e) {\n                    if (this.fetchedEOF) return 0;\n                    for(let n = 0; n < e; n++){\n                        const e = this.tokenSource.nextToken();\n                        if (e.tokenIndex = this.tokens.length, this.tokens.push(e), e.type === t.EOF) return this.fetchedEOF = !0, n + 1;\n                    }\n                    return e;\n                }\n                getTokens(e, n, s) {\n                    if (void 0 === s && (s = null), e < 0 || n < 0) return null;\n                    this.lazyInit();\n                    const i = [];\n                    n >= this.tokens.length && (n = this.tokens.length - 1);\n                    for(let r = e; r < n; r++){\n                        const e = this.tokens[r];\n                        if (e.type === t.EOF) break;\n                        (null === s || s.contains(e.type)) && i.push(e);\n                    }\n                    return i;\n                }\n                LA(t) {\n                    return this.LT(t).type;\n                }\n                LB(t) {\n                    return this.index - t < 0 ? null : this.tokens[this.index - t];\n                }\n                LT(t) {\n                    if (this.lazyInit(), 0 === t) return null;\n                    if (t < 0) return this.LB(-t);\n                    const e = this.index + t - 1;\n                    return this.sync(e), e >= this.tokens.length ? this.tokens[this.tokens.length - 1] : this.tokens[e];\n                }\n                adjustSeekIndex(t) {\n                    return t;\n                }\n                lazyInit() {\n                    -1 === this.index && this.setup();\n                }\n                setup() {\n                    this.sync(0), this.index = this.adjustSeekIndex(0);\n                }\n                setTokenSource(t) {\n                    this.tokenSource = t, this.tokens = [], this.index = -1, this.fetchedEOF = !1;\n                }\n                nextTokenOnChannel(e, n) {\n                    if (this.sync(e), e >= this.tokens.length) return -1;\n                    let s = this.tokens[e];\n                    for(; s.channel !== this.channel;){\n                        if (s.type === t.EOF) return -1;\n                        e += 1, this.sync(e), s = this.tokens[e];\n                    }\n                    return e;\n                }\n                previousTokenOnChannel(t, e) {\n                    for(; t >= 0 && this.tokens[t].channel !== e;)t -= 1;\n                    return t;\n                }\n                getHiddenTokensToRight(t, e) {\n                    if (void 0 === e && (e = -1), this.lazyInit(), t < 0 || t >= this.tokens.length) throw t + \" not in 0..\" + this.tokens.length - 1;\n                    const n = this.nextTokenOnChannel(t + 1, Dt.DEFAULT_TOKEN_CHANNEL), s = t + 1, i = -1 === n ? this.tokens.length - 1 : n;\n                    return this.filterForChannel(s, i, e);\n                }\n                getHiddenTokensToLeft(t, e) {\n                    if (void 0 === e && (e = -1), this.lazyInit(), t < 0 || t >= this.tokens.length) throw t + \" not in 0..\" + this.tokens.length - 1;\n                    const n = this.previousTokenOnChannel(t - 1, Dt.DEFAULT_TOKEN_CHANNEL);\n                    if (n === t - 1) return null;\n                    const s = n + 1, i = t - 1;\n                    return this.filterForChannel(s, i, e);\n                }\n                filterForChannel(t, e, n) {\n                    const s = [];\n                    for(let i = t; i < e + 1; i++){\n                        const t = this.tokens[i];\n                        -1 === n ? t.channel !== Dt.DEFAULT_TOKEN_CHANNEL && s.push(t) : t.channel === n && s.push(t);\n                    }\n                    return 0 === s.length ? null : s;\n                }\n                getSourceName() {\n                    return this.tokenSource.getSourceName();\n                }\n                getText(e) {\n                    this.lazyInit(), this.fill(), null == e && (e = new T(0, this.tokens.length - 1));\n                    let n = e.start;\n                    n instanceof t && (n = n.tokenIndex);\n                    let s = e.stop;\n                    if (s instanceof t && (s = s.tokenIndex), null === n || null === s || n < 0 || s < 0) return \"\";\n                    s >= this.tokens.length && (s = this.tokens.length - 1);\n                    let i = \"\";\n                    for(let e = n; e < s + 1; e++){\n                        const n = this.tokens[e];\n                        if (n.type === t.EOF) break;\n                        i += n.text;\n                    }\n                    return i;\n                }\n                fill() {\n                    for(this.lazyInit(); 1e3 === this.fetch(1e3););\n                }\n            } {\n                constructor(e, n){\n                    super(e), this.channel = void 0 === n ? t.DEFAULT_CHANNEL : n;\n                }\n                adjustSeekIndex(t) {\n                    return this.nextTokenOnChannel(t, this.channel);\n                }\n                LB(t) {\n                    if (0 === t || this.index - t < 0) return null;\n                    let e = this.index, n = 1;\n                    for(; n <= t;)e = this.previousTokenOnChannel(e - 1, this.channel), n += 1;\n                    return e < 0 ? null : this.tokens[e];\n                }\n                LT(t) {\n                    if (this.lazyInit(), 0 === t) return null;\n                    if (t < 0) return this.LB(-t);\n                    let e = this.index, n = 1;\n                    for(; n < t;)this.sync(e + 1) && (e = this.nextTokenOnChannel(e + 1, this.channel)), n += 1;\n                    return this.tokens[e];\n                }\n                getNumberOfOnChannelTokens() {\n                    let e = 0;\n                    this.fill();\n                    for(let n = 0; n < this.tokens.length; n++){\n                        const s = this.tokens[n];\n                        if (s.channel === this.channel && (e += 1), s.type === t.EOF) break;\n                    }\n                    return e;\n                }\n            },\n            Lexer: Dt,\n            Parser: fe,\n            PredictionContextCache: class {\n                constructor(){\n                    this.cache = new U;\n                }\n                add(t) {\n                    if (t === w.EMPTY) return w.EMPTY;\n                    const e = this.cache.get(t) || null;\n                    return null !== e ? e : (this.cache.set(t, t), t);\n                }\n                get(t) {\n                    return this.cache.get(t) || null;\n                }\n                get length() {\n                    return this.cache.length;\n                }\n            },\n            ParserRuleContext: xe,\n            Interval: T,\n            IntervalSet: x,\n            LL1Analyzer: q,\n            Utils: Ce\n        };\n        function Ae(t, e, n) {\n            return e in t ? Object.defineProperty(t, e, {\n                value: n,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : t[e] = n, t;\n        }\n        const Ie = (new Se.atn.ATNDeserializer).deserialize([\n            4,\n            0,\n            26,\n            404,\n            6,\n            -1,\n            2,\n            0,\n            7,\n            0,\n            2,\n            1,\n            7,\n            1,\n            2,\n            2,\n            7,\n            2,\n            2,\n            3,\n            7,\n            3,\n            2,\n            4,\n            7,\n            4,\n            2,\n            5,\n            7,\n            5,\n            2,\n            6,\n            7,\n            6,\n            2,\n            7,\n            7,\n            7,\n            2,\n            8,\n            7,\n            8,\n            2,\n            9,\n            7,\n            9,\n            2,\n            10,\n            7,\n            10,\n            2,\n            11,\n            7,\n            11,\n            2,\n            12,\n            7,\n            12,\n            2,\n            13,\n            7,\n            13,\n            2,\n            14,\n            7,\n            14,\n            2,\n            15,\n            7,\n            15,\n            2,\n            16,\n            7,\n            16,\n            2,\n            17,\n            7,\n            17,\n            2,\n            18,\n            7,\n            18,\n            2,\n            19,\n            7,\n            19,\n            2,\n            20,\n            7,\n            20,\n            2,\n            21,\n            7,\n            21,\n            2,\n            22,\n            7,\n            22,\n            2,\n            23,\n            7,\n            23,\n            2,\n            24,\n            7,\n            24,\n            2,\n            25,\n            7,\n            25,\n            2,\n            26,\n            7,\n            26,\n            2,\n            27,\n            7,\n            27,\n            2,\n            28,\n            7,\n            28,\n            2,\n            29,\n            7,\n            29,\n            2,\n            30,\n            7,\n            30,\n            2,\n            31,\n            7,\n            31,\n            2,\n            32,\n            7,\n            32,\n            2,\n            33,\n            7,\n            33,\n            2,\n            34,\n            7,\n            34,\n            2,\n            35,\n            7,\n            35,\n            2,\n            36,\n            7,\n            36,\n            2,\n            37,\n            7,\n            37,\n            2,\n            38,\n            7,\n            38,\n            2,\n            39,\n            7,\n            39,\n            2,\n            40,\n            7,\n            40,\n            2,\n            41,\n            7,\n            41,\n            2,\n            42,\n            7,\n            42,\n            2,\n            43,\n            7,\n            43,\n            2,\n            44,\n            7,\n            44,\n            2,\n            45,\n            7,\n            45,\n            2,\n            46,\n            7,\n            46,\n            2,\n            47,\n            7,\n            47,\n            2,\n            48,\n            7,\n            48,\n            2,\n            49,\n            7,\n            49,\n            2,\n            50,\n            7,\n            50,\n            2,\n            51,\n            7,\n            51,\n            2,\n            52,\n            7,\n            52,\n            2,\n            53,\n            7,\n            53,\n            2,\n            54,\n            7,\n            54,\n            2,\n            55,\n            7,\n            55,\n            2,\n            56,\n            7,\n            56,\n            2,\n            57,\n            7,\n            57,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            3,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            4,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            13,\n            1,\n            13,\n            5,\n            13,\n            258,\n            8,\n            13,\n            10,\n            13,\n            12,\n            13,\n            261,\n            9,\n            13,\n            1,\n            14,\n            1,\n            14,\n            1,\n            15,\n            1,\n            15,\n            1,\n            16,\n            1,\n            16,\n            1,\n            17,\n            1,\n            17,\n            1,\n            18,\n            1,\n            18,\n            1,\n            19,\n            1,\n            19,\n            1,\n            20,\n            1,\n            20,\n            1,\n            21,\n            1,\n            21,\n            1,\n            22,\n            1,\n            22,\n            1,\n            22,\n            5,\n            22,\n            282,\n            8,\n            22,\n            10,\n            22,\n            12,\n            22,\n            285,\n            9,\n            22,\n            1,\n            22,\n            1,\n            22,\n            1,\n            22,\n            1,\n            22,\n            1,\n            22,\n            5,\n            22,\n            292,\n            8,\n            22,\n            10,\n            22,\n            12,\n            22,\n            295,\n            9,\n            22,\n            1,\n            22,\n            1,\n            22,\n            3,\n            22,\n            299,\n            8,\n            22,\n            1,\n            23,\n            1,\n            23,\n            3,\n            23,\n            303,\n            8,\n            23,\n            1,\n            23,\n            1,\n            23,\n            1,\n            23,\n            3,\n            23,\n            308,\n            8,\n            23,\n            1,\n            24,\n            1,\n            24,\n            1,\n            24,\n            3,\n            24,\n            313,\n            8,\n            24,\n            1,\n            25,\n            1,\n            25,\n            1,\n            25,\n            1,\n            25,\n            1,\n            25,\n            1,\n            25,\n            1,\n            26,\n            1,\n            26,\n            1,\n            26,\n            5,\n            26,\n            324,\n            8,\n            26,\n            10,\n            26,\n            12,\n            26,\n            327,\n            9,\n            26,\n            3,\n            26,\n            329,\n            8,\n            26,\n            1,\n            27,\n            1,\n            27,\n            1,\n            28,\n            1,\n            28,\n            1,\n            29,\n            1,\n            29,\n            1,\n            30,\n            4,\n            30,\n            338,\n            8,\n            30,\n            11,\n            30,\n            12,\n            30,\n            339,\n            1,\n            30,\n            1,\n            30,\n            1,\n            31,\n            1,\n            31,\n            5,\n            31,\n            346,\n            8,\n            31,\n            10,\n            31,\n            12,\n            31,\n            349,\n            9,\n            31,\n            1,\n            31,\n            1,\n            31,\n            1,\n            32,\n            1,\n            32,\n            1,\n            33,\n            1,\n            33,\n            1,\n            34,\n            1,\n            34,\n            1,\n            35,\n            1,\n            35,\n            1,\n            36,\n            1,\n            36,\n            1,\n            37,\n            1,\n            37,\n            1,\n            38,\n            1,\n            38,\n            1,\n            39,\n            1,\n            39,\n            1,\n            40,\n            1,\n            40,\n            1,\n            41,\n            1,\n            41,\n            1,\n            42,\n            1,\n            42,\n            1,\n            43,\n            1,\n            43,\n            1,\n            44,\n            1,\n            44,\n            1,\n            45,\n            1,\n            45,\n            1,\n            46,\n            1,\n            46,\n            1,\n            47,\n            1,\n            47,\n            1,\n            48,\n            1,\n            48,\n            1,\n            49,\n            1,\n            49,\n            1,\n            50,\n            1,\n            50,\n            1,\n            51,\n            1,\n            51,\n            1,\n            52,\n            1,\n            52,\n            1,\n            53,\n            1,\n            53,\n            1,\n            54,\n            1,\n            54,\n            1,\n            55,\n            1,\n            55,\n            1,\n            56,\n            1,\n            56,\n            1,\n            57,\n            1,\n            57,\n            0,\n            0,\n            58,\n            1,\n            1,\n            3,\n            2,\n            5,\n            3,\n            7,\n            4,\n            9,\n            5,\n            11,\n            6,\n            13,\n            7,\n            15,\n            8,\n            17,\n            9,\n            19,\n            10,\n            21,\n            11,\n            23,\n            12,\n            25,\n            13,\n            27,\n            14,\n            29,\n            15,\n            31,\n            16,\n            33,\n            17,\n            35,\n            18,\n            37,\n            19,\n            39,\n            20,\n            41,\n            21,\n            43,\n            22,\n            45,\n            23,\n            47,\n            24,\n            49,\n            0,\n            51,\n            0,\n            53,\n            0,\n            55,\n            0,\n            57,\n            0,\n            59,\n            0,\n            61,\n            25,\n            63,\n            26,\n            65,\n            0,\n            67,\n            0,\n            69,\n            0,\n            71,\n            0,\n            73,\n            0,\n            75,\n            0,\n            77,\n            0,\n            79,\n            0,\n            81,\n            0,\n            83,\n            0,\n            85,\n            0,\n            87,\n            0,\n            89,\n            0,\n            91,\n            0,\n            93,\n            0,\n            95,\n            0,\n            97,\n            0,\n            99,\n            0,\n            101,\n            0,\n            103,\n            0,\n            105,\n            0,\n            107,\n            0,\n            109,\n            0,\n            111,\n            0,\n            113,\n            0,\n            115,\n            0,\n            1,\n            0,\n            36,\n            3,\n            0,\n            65,\n            90,\n            95,\n            95,\n            97,\n            122,\n            5,\n            0,\n            45,\n            45,\n            48,\n            57,\n            65,\n            90,\n            95,\n            95,\n            97,\n            122,\n            8,\n            0,\n            34,\n            34,\n            47,\n            47,\n            92,\n            92,\n            98,\n            98,\n            102,\n            102,\n            110,\n            110,\n            114,\n            114,\n            116,\n            116,\n            1,\n            0,\n            49,\n            57,\n            1,\n            0,\n            48,\n            57,\n            3,\n            0,\n            48,\n            57,\n            65,\n            70,\n            97,\n            102,\n            3,\n            0,\n            0,\n            31,\n            34,\n            34,\n            92,\n            92,\n            2,\n            0,\n            0,\n            31,\n            92,\n            92,\n            3,\n            0,\n            9,\n            10,\n            12,\n            13,\n            32,\n            32,\n            2,\n            0,\n            10,\n            10,\n            13,\n            13,\n            2,\n            0,\n            65,\n            65,\n            97,\n            97,\n            2,\n            0,\n            66,\n            66,\n            98,\n            98,\n            2,\n            0,\n            67,\n            67,\n            99,\n            99,\n            2,\n            0,\n            68,\n            68,\n            100,\n            100,\n            2,\n            0,\n            69,\n            69,\n            101,\n            101,\n            2,\n            0,\n            70,\n            70,\n            102,\n            102,\n            2,\n            0,\n            71,\n            71,\n            103,\n            103,\n            2,\n            0,\n            72,\n            72,\n            104,\n            104,\n            2,\n            0,\n            73,\n            73,\n            105,\n            105,\n            2,\n            0,\n            74,\n            74,\n            106,\n            106,\n            2,\n            0,\n            75,\n            75,\n            107,\n            107,\n            2,\n            0,\n            76,\n            76,\n            108,\n            108,\n            2,\n            0,\n            77,\n            77,\n            109,\n            109,\n            2,\n            0,\n            78,\n            78,\n            110,\n            110,\n            2,\n            0,\n            79,\n            79,\n            111,\n            111,\n            2,\n            0,\n            80,\n            80,\n            112,\n            112,\n            2,\n            0,\n            81,\n            81,\n            113,\n            113,\n            2,\n            0,\n            82,\n            82,\n            114,\n            114,\n            2,\n            0,\n            83,\n            83,\n            115,\n            115,\n            2,\n            0,\n            84,\n            84,\n            116,\n            116,\n            2,\n            0,\n            85,\n            85,\n            117,\n            117,\n            2,\n            0,\n            86,\n            86,\n            118,\n            118,\n            2,\n            0,\n            87,\n            87,\n            119,\n            119,\n            2,\n            0,\n            88,\n            88,\n            120,\n            120,\n            2,\n            0,\n            89,\n            89,\n            121,\n            121,\n            2,\n            0,\n            90,\n            90,\n            122,\n            122,\n            386,\n            0,\n            1,\n            1,\n            0,\n            0,\n            0,\n            0,\n            3,\n            1,\n            0,\n            0,\n            0,\n            0,\n            5,\n            1,\n            0,\n            0,\n            0,\n            0,\n            7,\n            1,\n            0,\n            0,\n            0,\n            0,\n            9,\n            1,\n            0,\n            0,\n            0,\n            0,\n            11,\n            1,\n            0,\n            0,\n            0,\n            0,\n            13,\n            1,\n            0,\n            0,\n            0,\n            0,\n            15,\n            1,\n            0,\n            0,\n            0,\n            0,\n            17,\n            1,\n            0,\n            0,\n            0,\n            0,\n            19,\n            1,\n            0,\n            0,\n            0,\n            0,\n            21,\n            1,\n            0,\n            0,\n            0,\n            0,\n            23,\n            1,\n            0,\n            0,\n            0,\n            0,\n            25,\n            1,\n            0,\n            0,\n            0,\n            0,\n            27,\n            1,\n            0,\n            0,\n            0,\n            0,\n            29,\n            1,\n            0,\n            0,\n            0,\n            0,\n            31,\n            1,\n            0,\n            0,\n            0,\n            0,\n            33,\n            1,\n            0,\n            0,\n            0,\n            0,\n            35,\n            1,\n            0,\n            0,\n            0,\n            0,\n            37,\n            1,\n            0,\n            0,\n            0,\n            0,\n            39,\n            1,\n            0,\n            0,\n            0,\n            0,\n            41,\n            1,\n            0,\n            0,\n            0,\n            0,\n            43,\n            1,\n            0,\n            0,\n            0,\n            0,\n            45,\n            1,\n            0,\n            0,\n            0,\n            0,\n            47,\n            1,\n            0,\n            0,\n            0,\n            0,\n            61,\n            1,\n            0,\n            0,\n            0,\n            0,\n            63,\n            1,\n            0,\n            0,\n            0,\n            1,\n            117,\n            1,\n            0,\n            0,\n            0,\n            3,\n            126,\n            1,\n            0,\n            0,\n            0,\n            5,\n            132,\n            1,\n            0,\n            0,\n            0,\n            7,\n            141,\n            1,\n            0,\n            0,\n            0,\n            9,\n            149,\n            1,\n            0,\n            0,\n            0,\n            11,\n            163,\n            1,\n            0,\n            0,\n            0,\n            13,\n            178,\n            1,\n            0,\n            0,\n            0,\n            15,\n            191,\n            1,\n            0,\n            0,\n            0,\n            17,\n            199,\n            1,\n            0,\n            0,\n            0,\n            19,\n            213,\n            1,\n            0,\n            0,\n            0,\n            21,\n            224,\n            1,\n            0,\n            0,\n            0,\n            23,\n            230,\n            1,\n            0,\n            0,\n            0,\n            25,\n            242,\n            1,\n            0,\n            0,\n            0,\n            27,\n            255,\n            1,\n            0,\n            0,\n            0,\n            29,\n            262,\n            1,\n            0,\n            0,\n            0,\n            31,\n            264,\n            1,\n            0,\n            0,\n            0,\n            33,\n            266,\n            1,\n            0,\n            0,\n            0,\n            35,\n            268,\n            1,\n            0,\n            0,\n            0,\n            37,\n            270,\n            1,\n            0,\n            0,\n            0,\n            39,\n            272,\n            1,\n            0,\n            0,\n            0,\n            41,\n            274,\n            1,\n            0,\n            0,\n            0,\n            43,\n            276,\n            1,\n            0,\n            0,\n            0,\n            45,\n            298,\n            1,\n            0,\n            0,\n            0,\n            47,\n            302,\n            1,\n            0,\n            0,\n            0,\n            49,\n            309,\n            1,\n            0,\n            0,\n            0,\n            51,\n            314,\n            1,\n            0,\n            0,\n            0,\n            53,\n            328,\n            1,\n            0,\n            0,\n            0,\n            55,\n            330,\n            1,\n            0,\n            0,\n            0,\n            57,\n            332,\n            1,\n            0,\n            0,\n            0,\n            59,\n            334,\n            1,\n            0,\n            0,\n            0,\n            61,\n            337,\n            1,\n            0,\n            0,\n            0,\n            63,\n            343,\n            1,\n            0,\n            0,\n            0,\n            65,\n            352,\n            1,\n            0,\n            0,\n            0,\n            67,\n            354,\n            1,\n            0,\n            0,\n            0,\n            69,\n            356,\n            1,\n            0,\n            0,\n            0,\n            71,\n            358,\n            1,\n            0,\n            0,\n            0,\n            73,\n            360,\n            1,\n            0,\n            0,\n            0,\n            75,\n            362,\n            1,\n            0,\n            0,\n            0,\n            77,\n            364,\n            1,\n            0,\n            0,\n            0,\n            79,\n            366,\n            1,\n            0,\n            0,\n            0,\n            81,\n            368,\n            1,\n            0,\n            0,\n            0,\n            83,\n            370,\n            1,\n            0,\n            0,\n            0,\n            85,\n            372,\n            1,\n            0,\n            0,\n            0,\n            87,\n            374,\n            1,\n            0,\n            0,\n            0,\n            89,\n            376,\n            1,\n            0,\n            0,\n            0,\n            91,\n            378,\n            1,\n            0,\n            0,\n            0,\n            93,\n            380,\n            1,\n            0,\n            0,\n            0,\n            95,\n            382,\n            1,\n            0,\n            0,\n            0,\n            97,\n            384,\n            1,\n            0,\n            0,\n            0,\n            99,\n            386,\n            1,\n            0,\n            0,\n            0,\n            101,\n            388,\n            1,\n            0,\n            0,\n            0,\n            103,\n            390,\n            1,\n            0,\n            0,\n            0,\n            105,\n            392,\n            1,\n            0,\n            0,\n            0,\n            107,\n            394,\n            1,\n            0,\n            0,\n            0,\n            109,\n            396,\n            1,\n            0,\n            0,\n            0,\n            111,\n            398,\n            1,\n            0,\n            0,\n            0,\n            113,\n            400,\n            1,\n            0,\n            0,\n            0,\n            115,\n            402,\n            1,\n            0,\n            0,\n            0,\n            117,\n            118,\n            3,\n            43,\n            21,\n            0,\n            118,\n            119,\n            3,\n            65,\n            32,\n            0,\n            119,\n            120,\n            3,\n            99,\n            49,\n            0,\n            120,\n            121,\n            3,\n            103,\n            51,\n            0,\n            121,\n            122,\n            3,\n            81,\n            40,\n            0,\n            122,\n            123,\n            3,\n            69,\n            34,\n            0,\n            123,\n            124,\n            3,\n            87,\n            43,\n            0,\n            124,\n            125,\n            3,\n            73,\n            36,\n            0,\n            125,\n            2,\n            1,\n            0,\n            0,\n            0,\n            126,\n            127,\n            3,\n            43,\n            21,\n            0,\n            127,\n            128,\n            3,\n            67,\n            33,\n            0,\n            128,\n            129,\n            3,\n            93,\n            46,\n            0,\n            129,\n            130,\n            3,\n            93,\n            46,\n            0,\n            130,\n            131,\n            3,\n            85,\n            42,\n            0,\n            131,\n            4,\n            1,\n            0,\n            0,\n            0,\n            132,\n            133,\n            3,\n            43,\n            21,\n            0,\n            133,\n            134,\n            3,\n            67,\n            33,\n            0,\n            134,\n            135,\n            3,\n            93,\n            46,\n            0,\n            135,\n            136,\n            3,\n            93,\n            46,\n            0,\n            136,\n            137,\n            3,\n            85,\n            42,\n            0,\n            137,\n            138,\n            3,\n            87,\n            43,\n            0,\n            138,\n            139,\n            3,\n            73,\n            36,\n            0,\n            139,\n            140,\n            3,\n            103,\n            51,\n            0,\n            140,\n            6,\n            1,\n            0,\n            0,\n            0,\n            141,\n            142,\n            3,\n            43,\n            21,\n            0,\n            142,\n            143,\n            3,\n            81,\n            40,\n            0,\n            143,\n            144,\n            3,\n            91,\n            45,\n            0,\n            144,\n            145,\n            3,\n            67,\n            33,\n            0,\n            145,\n            146,\n            3,\n            93,\n            46,\n            0,\n            146,\n            147,\n            3,\n            93,\n            46,\n            0,\n            147,\n            148,\n            3,\n            85,\n            42,\n            0,\n            148,\n            8,\n            1,\n            0,\n            0,\n            0,\n            149,\n            150,\n            3,\n            43,\n            21,\n            0,\n            150,\n            151,\n            3,\n            81,\n            40,\n            0,\n            151,\n            152,\n            3,\n            91,\n            45,\n            0,\n            152,\n            153,\n            3,\n            69,\n            34,\n            0,\n            153,\n            154,\n            3,\n            93,\n            46,\n            0,\n            154,\n            155,\n            3,\n            87,\n            43,\n            0,\n            155,\n            156,\n            3,\n            87,\n            43,\n            0,\n            156,\n            157,\n            3,\n            73,\n            36,\n            0,\n            157,\n            158,\n            3,\n            69,\n            34,\n            0,\n            158,\n            159,\n            3,\n            103,\n            51,\n            0,\n            159,\n            160,\n            3,\n            81,\n            40,\n            0,\n            160,\n            161,\n            3,\n            93,\n            46,\n            0,\n            161,\n            162,\n            3,\n            91,\n            45,\n            0,\n            162,\n            10,\n            1,\n            0,\n            0,\n            0,\n            163,\n            164,\n            3,\n            43,\n            21,\n            0,\n            164,\n            165,\n            3,\n            81,\n            40,\n            0,\n            165,\n            166,\n            3,\n            91,\n            45,\n            0,\n            166,\n            167,\n            3,\n            95,\n            47,\n            0,\n            167,\n            168,\n            3,\n            99,\n            49,\n            0,\n            168,\n            169,\n            3,\n            93,\n            46,\n            0,\n            169,\n            170,\n            3,\n            69,\n            34,\n            0,\n            170,\n            171,\n            3,\n            73,\n            36,\n            0,\n            171,\n            172,\n            3,\n            73,\n            36,\n            0,\n            172,\n            173,\n            3,\n            71,\n            35,\n            0,\n            173,\n            174,\n            3,\n            81,\n            40,\n            0,\n            174,\n            175,\n            3,\n            91,\n            45,\n            0,\n            175,\n            176,\n            3,\n            77,\n            38,\n            0,\n            176,\n            177,\n            3,\n            101,\n            50,\n            0,\n            177,\n            12,\n            1,\n            0,\n            0,\n            0,\n            178,\n            179,\n            3,\n            43,\n            21,\n            0,\n            179,\n            180,\n            3,\n            95,\n            47,\n            0,\n            180,\n            181,\n            3,\n            99,\n            49,\n            0,\n            181,\n            182,\n            3,\n            93,\n            46,\n            0,\n            182,\n            183,\n            3,\n            69,\n            34,\n            0,\n            183,\n            184,\n            3,\n            73,\n            36,\n            0,\n            184,\n            185,\n            3,\n            73,\n            36,\n            0,\n            185,\n            186,\n            3,\n            71,\n            35,\n            0,\n            186,\n            187,\n            3,\n            81,\n            40,\n            0,\n            187,\n            188,\n            3,\n            91,\n            45,\n            0,\n            188,\n            189,\n            3,\n            77,\n            38,\n            0,\n            189,\n            190,\n            3,\n            101,\n            50,\n            0,\n            190,\n            14,\n            1,\n            0,\n            0,\n            0,\n            191,\n            192,\n            3,\n            43,\n            21,\n            0,\n            192,\n            193,\n            3,\n            89,\n            44,\n            0,\n            193,\n            194,\n            3,\n            65,\n            32,\n            0,\n            194,\n            195,\n            3,\n            91,\n            45,\n            0,\n            195,\n            196,\n            3,\n            105,\n            52,\n            0,\n            196,\n            197,\n            3,\n            65,\n            32,\n            0,\n            197,\n            198,\n            3,\n            87,\n            43,\n            0,\n            198,\n            16,\n            1,\n            0,\n            0,\n            0,\n            199,\n            200,\n            3,\n            43,\n            21,\n            0,\n            200,\n            201,\n            3,\n            89,\n            44,\n            0,\n            201,\n            202,\n            3,\n            65,\n            32,\n            0,\n            202,\n            203,\n            3,\n            101,\n            50,\n            0,\n            203,\n            204,\n            3,\n            103,\n            51,\n            0,\n            204,\n            205,\n            3,\n            73,\n            36,\n            0,\n            205,\n            206,\n            3,\n            99,\n            49,\n            0,\n            206,\n            207,\n            3,\n            103,\n            51,\n            0,\n            207,\n            208,\n            3,\n            79,\n            39,\n            0,\n            208,\n            209,\n            3,\n            73,\n            36,\n            0,\n            209,\n            210,\n            3,\n            101,\n            50,\n            0,\n            210,\n            211,\n            3,\n            81,\n            40,\n            0,\n            211,\n            212,\n            3,\n            101,\n            50,\n            0,\n            212,\n            18,\n            1,\n            0,\n            0,\n            0,\n            213,\n            214,\n            3,\n            43,\n            21,\n            0,\n            214,\n            215,\n            3,\n            95,\n            47,\n            0,\n            215,\n            216,\n            3,\n            79,\n            39,\n            0,\n            216,\n            217,\n            3,\n            71,\n            35,\n            0,\n            217,\n            218,\n            3,\n            103,\n            51,\n            0,\n            218,\n            219,\n            3,\n            79,\n            39,\n            0,\n            219,\n            220,\n            3,\n            73,\n            36,\n            0,\n            220,\n            221,\n            3,\n            101,\n            50,\n            0,\n            221,\n            222,\n            3,\n            81,\n            40,\n            0,\n            222,\n            223,\n            3,\n            101,\n            50,\n            0,\n            223,\n            20,\n            1,\n            0,\n            0,\n            0,\n            224,\n            225,\n            3,\n            43,\n            21,\n            0,\n            225,\n            226,\n            3,\n            89,\n            44,\n            0,\n            226,\n            227,\n            3,\n            81,\n            40,\n            0,\n            227,\n            228,\n            3,\n            101,\n            50,\n            0,\n            228,\n            229,\n            3,\n            69,\n            34,\n            0,\n            229,\n            22,\n            1,\n            0,\n            0,\n            0,\n            230,\n            231,\n            3,\n            43,\n            21,\n            0,\n            231,\n            232,\n            3,\n            103,\n            51,\n            0,\n            232,\n            233,\n            3,\n            73,\n            36,\n            0,\n            233,\n            234,\n            3,\n            69,\n            34,\n            0,\n            234,\n            235,\n            3,\n            79,\n            39,\n            0,\n            235,\n            236,\n            3,\n            99,\n            49,\n            0,\n            236,\n            237,\n            3,\n            73,\n            36,\n            0,\n            237,\n            238,\n            3,\n            95,\n            47,\n            0,\n            238,\n            239,\n            3,\n            93,\n            46,\n            0,\n            239,\n            240,\n            3,\n            99,\n            49,\n            0,\n            240,\n            241,\n            3,\n            103,\n            51,\n            0,\n            241,\n            24,\n            1,\n            0,\n            0,\n            0,\n            242,\n            243,\n            3,\n            43,\n            21,\n            0,\n            243,\n            244,\n            3,\n            105,\n            52,\n            0,\n            244,\n            245,\n            3,\n            91,\n            45,\n            0,\n            245,\n            246,\n            3,\n            95,\n            47,\n            0,\n            246,\n            247,\n            3,\n            105,\n            52,\n            0,\n            247,\n            248,\n            3,\n            67,\n            33,\n            0,\n            248,\n            249,\n            3,\n            87,\n            43,\n            0,\n            249,\n            250,\n            3,\n            81,\n            40,\n            0,\n            250,\n            251,\n            3,\n            101,\n            50,\n            0,\n            251,\n            252,\n            3,\n            79,\n            39,\n            0,\n            252,\n            253,\n            3,\n            73,\n            36,\n            0,\n            253,\n            254,\n            3,\n            71,\n            35,\n            0,\n            254,\n            26,\n            1,\n            0,\n            0,\n            0,\n            255,\n            259,\n            7,\n            0,\n            0,\n            0,\n            256,\n            258,\n            7,\n            1,\n            0,\n            0,\n            257,\n            256,\n            1,\n            0,\n            0,\n            0,\n            258,\n            261,\n            1,\n            0,\n            0,\n            0,\n            259,\n            257,\n            1,\n            0,\n            0,\n            0,\n            259,\n            260,\n            1,\n            0,\n            0,\n            0,\n            260,\n            28,\n            1,\n            0,\n            0,\n            0,\n            261,\n            259,\n            1,\n            0,\n            0,\n            0,\n            262,\n            263,\n            5,\n            61,\n            0,\n            0,\n            263,\n            30,\n            1,\n            0,\n            0,\n            0,\n            264,\n            265,\n            5,\n            44,\n            0,\n            0,\n            265,\n            32,\n            1,\n            0,\n            0,\n            0,\n            266,\n            267,\n            5,\n            34,\n            0,\n            0,\n            267,\n            34,\n            1,\n            0,\n            0,\n            0,\n            268,\n            269,\n            5,\n            40,\n            0,\n            0,\n            269,\n            36,\n            1,\n            0,\n            0,\n            0,\n            270,\n            271,\n            5,\n            41,\n            0,\n            0,\n            271,\n            38,\n            1,\n            0,\n            0,\n            0,\n            272,\n            273,\n            5,\n            123,\n            0,\n            0,\n            273,\n            40,\n            1,\n            0,\n            0,\n            0,\n            274,\n            275,\n            5,\n            125,\n            0,\n            0,\n            275,\n            42,\n            1,\n            0,\n            0,\n            0,\n            276,\n            277,\n            5,\n            64,\n            0,\n            0,\n            277,\n            44,\n            1,\n            0,\n            0,\n            0,\n            278,\n            283,\n            3,\n            39,\n            19,\n            0,\n            279,\n            282,\n            3,\n            49,\n            24,\n            0,\n            280,\n            282,\n            3,\n            59,\n            29,\n            0,\n            281,\n            279,\n            1,\n            0,\n            0,\n            0,\n            281,\n            280,\n            1,\n            0,\n            0,\n            0,\n            282,\n            285,\n            1,\n            0,\n            0,\n            0,\n            283,\n            281,\n            1,\n            0,\n            0,\n            0,\n            283,\n            284,\n            1,\n            0,\n            0,\n            0,\n            284,\n            286,\n            1,\n            0,\n            0,\n            0,\n            285,\n            283,\n            1,\n            0,\n            0,\n            0,\n            286,\n            287,\n            3,\n            41,\n            20,\n            0,\n            287,\n            299,\n            1,\n            0,\n            0,\n            0,\n            288,\n            293,\n            3,\n            33,\n            16,\n            0,\n            289,\n            292,\n            3,\n            49,\n            24,\n            0,\n            290,\n            292,\n            3,\n            57,\n            28,\n            0,\n            291,\n            289,\n            1,\n            0,\n            0,\n            0,\n            291,\n            290,\n            1,\n            0,\n            0,\n            0,\n            292,\n            295,\n            1,\n            0,\n            0,\n            0,\n            293,\n            291,\n            1,\n            0,\n            0,\n            0,\n            293,\n            294,\n            1,\n            0,\n            0,\n            0,\n            294,\n            296,\n            1,\n            0,\n            0,\n            0,\n            295,\n            293,\n            1,\n            0,\n            0,\n            0,\n            296,\n            297,\n            3,\n            33,\n            16,\n            0,\n            297,\n            299,\n            1,\n            0,\n            0,\n            0,\n            298,\n            278,\n            1,\n            0,\n            0,\n            0,\n            298,\n            288,\n            1,\n            0,\n            0,\n            0,\n            299,\n            46,\n            1,\n            0,\n            0,\n            0,\n            300,\n            303,\n            3,\n            39,\n            19,\n            0,\n            301,\n            303,\n            3,\n            33,\n            16,\n            0,\n            302,\n            300,\n            1,\n            0,\n            0,\n            0,\n            302,\n            301,\n            1,\n            0,\n            0,\n            0,\n            302,\n            303,\n            1,\n            0,\n            0,\n            0,\n            303,\n            304,\n            1,\n            0,\n            0,\n            0,\n            304,\n            307,\n            3,\n            53,\n            26,\n            0,\n            305,\n            308,\n            3,\n            41,\n            20,\n            0,\n            306,\n            308,\n            3,\n            33,\n            16,\n            0,\n            307,\n            305,\n            1,\n            0,\n            0,\n            0,\n            307,\n            306,\n            1,\n            0,\n            0,\n            0,\n            307,\n            308,\n            1,\n            0,\n            0,\n            0,\n            308,\n            48,\n            1,\n            0,\n            0,\n            0,\n            309,\n            312,\n            5,\n            92,\n            0,\n            0,\n            310,\n            313,\n            7,\n            2,\n            0,\n            0,\n            311,\n            313,\n            3,\n            51,\n            25,\n            0,\n            312,\n            310,\n            1,\n            0,\n            0,\n            0,\n            312,\n            311,\n            1,\n            0,\n            0,\n            0,\n            313,\n            50,\n            1,\n            0,\n            0,\n            0,\n            314,\n            315,\n            5,\n            117,\n            0,\n            0,\n            315,\n            316,\n            3,\n            55,\n            27,\n            0,\n            316,\n            317,\n            3,\n            55,\n            27,\n            0,\n            317,\n            318,\n            3,\n            55,\n            27,\n            0,\n            318,\n            319,\n            3,\n            55,\n            27,\n            0,\n            319,\n            52,\n            1,\n            0,\n            0,\n            0,\n            320,\n            329,\n            5,\n            48,\n            0,\n            0,\n            321,\n            325,\n            7,\n            3,\n            0,\n            0,\n            322,\n            324,\n            7,\n            4,\n            0,\n            0,\n            323,\n            322,\n            1,\n            0,\n            0,\n            0,\n            324,\n            327,\n            1,\n            0,\n            0,\n            0,\n            325,\n            323,\n            1,\n            0,\n            0,\n            0,\n            325,\n            326,\n            1,\n            0,\n            0,\n            0,\n            326,\n            329,\n            1,\n            0,\n            0,\n            0,\n            327,\n            325,\n            1,\n            0,\n            0,\n            0,\n            328,\n            320,\n            1,\n            0,\n            0,\n            0,\n            328,\n            321,\n            1,\n            0,\n            0,\n            0,\n            329,\n            54,\n            1,\n            0,\n            0,\n            0,\n            330,\n            331,\n            7,\n            5,\n            0,\n            0,\n            331,\n            56,\n            1,\n            0,\n            0,\n            0,\n            332,\n            333,\n            8,\n            6,\n            0,\n            0,\n            333,\n            58,\n            1,\n            0,\n            0,\n            0,\n            334,\n            335,\n            8,\n            7,\n            0,\n            0,\n            335,\n            60,\n            1,\n            0,\n            0,\n            0,\n            336,\n            338,\n            7,\n            8,\n            0,\n            0,\n            337,\n            336,\n            1,\n            0,\n            0,\n            0,\n            338,\n            339,\n            1,\n            0,\n            0,\n            0,\n            339,\n            337,\n            1,\n            0,\n            0,\n            0,\n            339,\n            340,\n            1,\n            0,\n            0,\n            0,\n            340,\n            341,\n            1,\n            0,\n            0,\n            0,\n            341,\n            342,\n            6,\n            30,\n            0,\n            0,\n            342,\n            62,\n            1,\n            0,\n            0,\n            0,\n            343,\n            347,\n            5,\n            37,\n            0,\n            0,\n            344,\n            346,\n            8,\n            9,\n            0,\n            0,\n            345,\n            344,\n            1,\n            0,\n            0,\n            0,\n            346,\n            349,\n            1,\n            0,\n            0,\n            0,\n            347,\n            345,\n            1,\n            0,\n            0,\n            0,\n            347,\n            348,\n            1,\n            0,\n            0,\n            0,\n            348,\n            350,\n            1,\n            0,\n            0,\n            0,\n            349,\n            347,\n            1,\n            0,\n            0,\n            0,\n            350,\n            351,\n            6,\n            31,\n            0,\n            0,\n            351,\n            64,\n            1,\n            0,\n            0,\n            0,\n            352,\n            353,\n            7,\n            10,\n            0,\n            0,\n            353,\n            66,\n            1,\n            0,\n            0,\n            0,\n            354,\n            355,\n            7,\n            11,\n            0,\n            0,\n            355,\n            68,\n            1,\n            0,\n            0,\n            0,\n            356,\n            357,\n            7,\n            12,\n            0,\n            0,\n            357,\n            70,\n            1,\n            0,\n            0,\n            0,\n            358,\n            359,\n            7,\n            13,\n            0,\n            0,\n            359,\n            72,\n            1,\n            0,\n            0,\n            0,\n            360,\n            361,\n            7,\n            14,\n            0,\n            0,\n            361,\n            74,\n            1,\n            0,\n            0,\n            0,\n            362,\n            363,\n            7,\n            15,\n            0,\n            0,\n            363,\n            76,\n            1,\n            0,\n            0,\n            0,\n            364,\n            365,\n            7,\n            16,\n            0,\n            0,\n            365,\n            78,\n            1,\n            0,\n            0,\n            0,\n            366,\n            367,\n            7,\n            17,\n            0,\n            0,\n            367,\n            80,\n            1,\n            0,\n            0,\n            0,\n            368,\n            369,\n            7,\n            18,\n            0,\n            0,\n            369,\n            82,\n            1,\n            0,\n            0,\n            0,\n            370,\n            371,\n            7,\n            19,\n            0,\n            0,\n            371,\n            84,\n            1,\n            0,\n            0,\n            0,\n            372,\n            373,\n            7,\n            20,\n            0,\n            0,\n            373,\n            86,\n            1,\n            0,\n            0,\n            0,\n            374,\n            375,\n            7,\n            21,\n            0,\n            0,\n            375,\n            88,\n            1,\n            0,\n            0,\n            0,\n            376,\n            377,\n            7,\n            22,\n            0,\n            0,\n            377,\n            90,\n            1,\n            0,\n            0,\n            0,\n            378,\n            379,\n            7,\n            23,\n            0,\n            0,\n            379,\n            92,\n            1,\n            0,\n            0,\n            0,\n            380,\n            381,\n            7,\n            24,\n            0,\n            0,\n            381,\n            94,\n            1,\n            0,\n            0,\n            0,\n            382,\n            383,\n            7,\n            25,\n            0,\n            0,\n            383,\n            96,\n            1,\n            0,\n            0,\n            0,\n            384,\n            385,\n            7,\n            26,\n            0,\n            0,\n            385,\n            98,\n            1,\n            0,\n            0,\n            0,\n            386,\n            387,\n            7,\n            27,\n            0,\n            0,\n            387,\n            100,\n            1,\n            0,\n            0,\n            0,\n            388,\n            389,\n            7,\n            28,\n            0,\n            0,\n            389,\n            102,\n            1,\n            0,\n            0,\n            0,\n            390,\n            391,\n            7,\n            29,\n            0,\n            0,\n            391,\n            104,\n            1,\n            0,\n            0,\n            0,\n            392,\n            393,\n            7,\n            30,\n            0,\n            0,\n            393,\n            106,\n            1,\n            0,\n            0,\n            0,\n            394,\n            395,\n            7,\n            31,\n            0,\n            0,\n            395,\n            108,\n            1,\n            0,\n            0,\n            0,\n            396,\n            397,\n            7,\n            32,\n            0,\n            0,\n            397,\n            110,\n            1,\n            0,\n            0,\n            0,\n            398,\n            399,\n            7,\n            33,\n            0,\n            0,\n            399,\n            112,\n            1,\n            0,\n            0,\n            0,\n            400,\n            401,\n            7,\n            34,\n            0,\n            0,\n            401,\n            114,\n            1,\n            0,\n            0,\n            0,\n            402,\n            403,\n            7,\n            35,\n            0,\n            0,\n            403,\n            116,\n            1,\n            0,\n            0,\n            0,\n            14,\n            0,\n            259,\n            281,\n            283,\n            291,\n            293,\n            298,\n            302,\n            307,\n            312,\n            325,\n            328,\n            339,\n            347,\n            1,\n            6,\n            0,\n            0\n        ]), Re = Ie.decisionToState.map((t, e)=>new Se.dfa.DFA(t, e));\n        class me extends Se.Lexer {\n            constructor(t){\n                super(t), this._interp = new Se.atn.LexerATNSimulator(this, Ie, Re, new Se.PredictionContextCache);\n            }\n            get atn() {\n                return Ie;\n            }\n        }\n        Ae(me, \"grammarFileName\", \"BibTeXLexer.g4\"), Ae(me, \"channelNames\", [\n            \"DEFAULT_TOKEN_CHANNEL\",\n            \"HIDDEN\"\n        ]), Ae(me, \"modeNames\", [\n            \"DEFAULT_MODE\"\n        ]), Ae(me, \"literalNames\", [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            \"'='\",\n            \"','\",\n            \"'\\\"'\",\n            \"'('\",\n            \"')'\",\n            \"'{'\",\n            \"'}'\",\n            \"'@'\"\n        ]), Ae(me, \"symbolicNames\", [\n            null,\n            \"ARTICLE\",\n            \"BOOK\",\n            \"BOOKLET\",\n            \"INBOOK\",\n            \"INCOLLECTION\",\n            \"INPROCEEDINGS\",\n            \"PROCEEDINGS\",\n            \"MANUAL\",\n            \"MASTERTHESIS\",\n            \"PHDTHESIS\",\n            \"MISC\",\n            \"TECHREPORT\",\n            \"UNPUBLISHED\",\n            \"IDENTIFIER\",\n            \"EQ\",\n            \"COMMA\",\n            \"DQUOTE\",\n            \"LPAREN\",\n            \"RPAREN\",\n            \"LBRACE\",\n            \"RBRACE\",\n            \"AT\",\n            \"STRING_LITERAL\",\n            \"INTEGER_LITERAL\",\n            \"WS\",\n            \"LINE_COMMENT\"\n        ]), Ae(me, \"ruleNames\", [\n            \"ARTICLE\",\n            \"BOOK\",\n            \"BOOKLET\",\n            \"INBOOK\",\n            \"INCOLLECTION\",\n            \"INPROCEEDINGS\",\n            \"PROCEEDINGS\",\n            \"MANUAL\",\n            \"MASTERTHESIS\",\n            \"PHDTHESIS\",\n            \"MISC\",\n            \"TECHREPORT\",\n            \"UNPUBLISHED\",\n            \"IDENTIFIER\",\n            \"EQ\",\n            \"COMMA\",\n            \"DQUOTE\",\n            \"LPAREN\",\n            \"RPAREN\",\n            \"LBRACE\",\n            \"RBRACE\",\n            \"AT\",\n            \"STRING_LITERAL\",\n            \"INTEGER_LITERAL\",\n            \"ESC\",\n            \"UNICODE\",\n            \"INTEGER\",\n            \"HEX\",\n            \"QUOTE_ENCLOSED_SAFECODEPOINT\",\n            \"BRACE_ENCLOSED_SAFECODEPOINT\",\n            \"WS\",\n            \"LINE_COMMENT\",\n            \"A\",\n            \"B\",\n            \"C\",\n            \"D\",\n            \"E\",\n            \"F\",\n            \"G\",\n            \"H\",\n            \"I\",\n            \"J\",\n            \"K\",\n            \"L\",\n            \"M\",\n            \"N\",\n            \"O\",\n            \"P\",\n            \"Q\",\n            \"R\",\n            \"S\",\n            \"T\",\n            \"U\",\n            \"V\",\n            \"W\",\n            \"X\",\n            \"Y\",\n            \"Z\"\n        ]), me.EOF = Se.Token.EOF, me.ARTICLE = 1, me.BOOK = 2, me.BOOKLET = 3, me.INBOOK = 4, me.INCOLLECTION = 5, me.INPROCEEDINGS = 6, me.PROCEEDINGS = 7, me.MANUAL = 8, me.MASTERTHESIS = 9, me.PHDTHESIS = 10, me.MISC = 11, me.TECHREPORT = 12, me.UNPUBLISHED = 13, me.IDENTIFIER = 14, me.EQ = 15, me.COMMA = 16, me.DQUOTE = 17, me.LPAREN = 18, me.RPAREN = 19, me.LBRACE = 20, me.RBRACE = 21, me.AT = 22, me.STRING_LITERAL = 23, me.INTEGER_LITERAL = 24, me.WS = 25, me.LINE_COMMENT = 26;\n        class _e extends Se.tree.ParseTreeListener {\n            enterBibTex(t) {}\n            exitBibTex(t) {}\n            enterEntry(t) {}\n            exitEntry(t) {}\n            enterField(t) {}\n            exitField(t) {}\n            enterKey(t) {}\n            exitKey(t) {}\n            enterValue(t) {}\n            exitValue(t) {}\n            enterArticle(t) {}\n            exitArticle(t) {}\n            enterBook(t) {}\n            exitBook(t) {}\n            enterBooklet(t) {}\n            exitBooklet(t) {}\n            enterInbook(t) {}\n            exitInbook(t) {}\n            enterIncollection(t) {}\n            exitIncollection(t) {}\n            enterInproceedings(t) {}\n            exitInproceedings(t) {}\n            enterProceedings(t) {}\n            exitProceedings(t) {}\n            enterManual(t) {}\n            exitManual(t) {}\n            enterMastersthesis(t) {}\n            exitMastersthesis(t) {}\n            enterPhdthesis(t) {}\n            exitPhdthesis(t) {}\n            enterMisc(t) {}\n            exitMisc(t) {}\n            enterTechreport(t) {}\n            exitTechreport(t) {}\n            enterUnpublished(t) {}\n            exitUnpublished(t) {}\n        }\n        class Ne extends Se.tree.ParseTreeVisitor {\n            visitBibTex(t) {\n                return this.visitChildren(t);\n            }\n            visitEntry(t) {\n                return this.visitChildren(t);\n            }\n            visitField(t) {\n                return this.visitChildren(t);\n            }\n            visitKey(t) {\n                return this.visitChildren(t);\n            }\n            visitValue(t) {\n                return this.visitChildren(t);\n            }\n            visitArticle(t) {\n                return this.visitChildren(t);\n            }\n            visitBook(t) {\n                return this.visitChildren(t);\n            }\n            visitBooklet(t) {\n                return this.visitChildren(t);\n            }\n            visitInbook(t) {\n                return this.visitChildren(t);\n            }\n            visitIncollection(t) {\n                return this.visitChildren(t);\n            }\n            visitInproceedings(t) {\n                return this.visitChildren(t);\n            }\n            visitProceedings(t) {\n                return this.visitChildren(t);\n            }\n            visitManual(t) {\n                return this.visitChildren(t);\n            }\n            visitMastersthesis(t) {\n                return this.visitChildren(t);\n            }\n            visitPhdthesis(t) {\n                return this.visitChildren(t);\n            }\n            visitMisc(t) {\n                return this.visitChildren(t);\n            }\n            visitTechreport(t) {\n                return this.visitChildren(t);\n            }\n            visitUnpublished(t) {\n                return this.visitChildren(t);\n            }\n        }\n        function Le(t, e, n) {\n            return e in t ? Object.defineProperty(t, e, {\n                value: n,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : t[e] = n, t;\n        }\n        const ye = (new Se.atn.ATNDeserializer).deserialize([\n            4,\n            1,\n            26,\n            210,\n            2,\n            0,\n            7,\n            0,\n            2,\n            1,\n            7,\n            1,\n            2,\n            2,\n            7,\n            2,\n            2,\n            3,\n            7,\n            3,\n            2,\n            4,\n            7,\n            4,\n            2,\n            5,\n            7,\n            5,\n            2,\n            6,\n            7,\n            6,\n            2,\n            7,\n            7,\n            7,\n            2,\n            8,\n            7,\n            8,\n            2,\n            9,\n            7,\n            9,\n            2,\n            10,\n            7,\n            10,\n            2,\n            11,\n            7,\n            11,\n            2,\n            12,\n            7,\n            12,\n            2,\n            13,\n            7,\n            13,\n            2,\n            14,\n            7,\n            14,\n            2,\n            15,\n            7,\n            15,\n            2,\n            16,\n            7,\n            16,\n            2,\n            17,\n            7,\n            17,\n            1,\n            0,\n            5,\n            0,\n            38,\n            8,\n            0,\n            10,\n            0,\n            12,\n            0,\n            41,\n            9,\n            0,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            1,\n            3,\n            1,\n            56,\n            8,\n            1,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            2,\n            1,\n            3,\n            1,\n            3,\n            1,\n            4,\n            1,\n            4,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            1,\n            5,\n            4,\n            5,\n            72,\n            8,\n            5,\n            11,\n            5,\n            12,\n            5,\n            73,\n            1,\n            5,\n            1,\n            5,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            1,\n            6,\n            4,\n            6,\n            83,\n            8,\n            6,\n            11,\n            6,\n            12,\n            6,\n            84,\n            1,\n            6,\n            1,\n            6,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            1,\n            7,\n            4,\n            7,\n            94,\n            8,\n            7,\n            11,\n            7,\n            12,\n            7,\n            95,\n            1,\n            7,\n            1,\n            7,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            1,\n            8,\n            4,\n            8,\n            105,\n            8,\n            8,\n            11,\n            8,\n            12,\n            8,\n            106,\n            1,\n            8,\n            1,\n            8,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            1,\n            9,\n            4,\n            9,\n            116,\n            8,\n            9,\n            11,\n            9,\n            12,\n            9,\n            117,\n            1,\n            9,\n            1,\n            9,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            1,\n            10,\n            4,\n            10,\n            127,\n            8,\n            10,\n            11,\n            10,\n            12,\n            10,\n            128,\n            1,\n            10,\n            1,\n            10,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            1,\n            11,\n            4,\n            11,\n            138,\n            8,\n            11,\n            11,\n            11,\n            12,\n            11,\n            139,\n            1,\n            11,\n            1,\n            11,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            1,\n            12,\n            4,\n            12,\n            149,\n            8,\n            12,\n            11,\n            12,\n            12,\n            12,\n            150,\n            1,\n            12,\n            1,\n            12,\n            1,\n            13,\n            1,\n            13,\n            1,\n            13,\n            1,\n            13,\n            1,\n            13,\n            4,\n            13,\n            160,\n            8,\n            13,\n            11,\n            13,\n            12,\n            13,\n            161,\n            1,\n            13,\n            1,\n            13,\n            1,\n            14,\n            1,\n            14,\n            1,\n            14,\n            1,\n            14,\n            1,\n            14,\n            4,\n            14,\n            171,\n            8,\n            14,\n            11,\n            14,\n            12,\n            14,\n            172,\n            1,\n            14,\n            1,\n            14,\n            1,\n            15,\n            1,\n            15,\n            1,\n            15,\n            1,\n            15,\n            1,\n            15,\n            4,\n            15,\n            182,\n            8,\n            15,\n            11,\n            15,\n            12,\n            15,\n            183,\n            1,\n            15,\n            1,\n            15,\n            1,\n            16,\n            1,\n            16,\n            1,\n            16,\n            1,\n            16,\n            1,\n            16,\n            4,\n            16,\n            193,\n            8,\n            16,\n            11,\n            16,\n            12,\n            16,\n            194,\n            1,\n            16,\n            1,\n            16,\n            1,\n            17,\n            1,\n            17,\n            1,\n            17,\n            1,\n            17,\n            1,\n            17,\n            4,\n            17,\n            204,\n            8,\n            17,\n            11,\n            17,\n            12,\n            17,\n            205,\n            1,\n            17,\n            1,\n            17,\n            1,\n            17,\n            0,\n            0,\n            18,\n            0,\n            2,\n            4,\n            6,\n            8,\n            10,\n            12,\n            14,\n            16,\n            18,\n            20,\n            22,\n            24,\n            26,\n            28,\n            30,\n            32,\n            34,\n            0,\n            1,\n            1,\n            0,\n            23,\n            24,\n            217,\n            0,\n            39,\n            1,\n            0,\n            0,\n            0,\n            2,\n            55,\n            1,\n            0,\n            0,\n            0,\n            4,\n            57,\n            1,\n            0,\n            0,\n            0,\n            6,\n            62,\n            1,\n            0,\n            0,\n            0,\n            8,\n            64,\n            1,\n            0,\n            0,\n            0,\n            10,\n            66,\n            1,\n            0,\n            0,\n            0,\n            12,\n            77,\n            1,\n            0,\n            0,\n            0,\n            14,\n            88,\n            1,\n            0,\n            0,\n            0,\n            16,\n            99,\n            1,\n            0,\n            0,\n            0,\n            18,\n            110,\n            1,\n            0,\n            0,\n            0,\n            20,\n            121,\n            1,\n            0,\n            0,\n            0,\n            22,\n            132,\n            1,\n            0,\n            0,\n            0,\n            24,\n            143,\n            1,\n            0,\n            0,\n            0,\n            26,\n            154,\n            1,\n            0,\n            0,\n            0,\n            28,\n            165,\n            1,\n            0,\n            0,\n            0,\n            30,\n            176,\n            1,\n            0,\n            0,\n            0,\n            32,\n            187,\n            1,\n            0,\n            0,\n            0,\n            34,\n            198,\n            1,\n            0,\n            0,\n            0,\n            36,\n            38,\n            3,\n            2,\n            1,\n            0,\n            37,\n            36,\n            1,\n            0,\n            0,\n            0,\n            38,\n            41,\n            1,\n            0,\n            0,\n            0,\n            39,\n            37,\n            1,\n            0,\n            0,\n            0,\n            39,\n            40,\n            1,\n            0,\n            0,\n            0,\n            40,\n            1,\n            1,\n            0,\n            0,\n            0,\n            41,\n            39,\n            1,\n            0,\n            0,\n            0,\n            42,\n            56,\n            3,\n            10,\n            5,\n            0,\n            43,\n            56,\n            3,\n            12,\n            6,\n            0,\n            44,\n            56,\n            3,\n            14,\n            7,\n            0,\n            45,\n            56,\n            3,\n            16,\n            8,\n            0,\n            46,\n            56,\n            3,\n            18,\n            9,\n            0,\n            47,\n            56,\n            3,\n            20,\n            10,\n            0,\n            48,\n            56,\n            3,\n            22,\n            11,\n            0,\n            49,\n            56,\n            3,\n            24,\n            12,\n            0,\n            50,\n            56,\n            3,\n            26,\n            13,\n            0,\n            51,\n            56,\n            3,\n            28,\n            14,\n            0,\n            52,\n            56,\n            3,\n            30,\n            15,\n            0,\n            53,\n            56,\n            3,\n            32,\n            16,\n            0,\n            54,\n            56,\n            3,\n            34,\n            17,\n            0,\n            55,\n            42,\n            1,\n            0,\n            0,\n            0,\n            55,\n            43,\n            1,\n            0,\n            0,\n            0,\n            55,\n            44,\n            1,\n            0,\n            0,\n            0,\n            55,\n            45,\n            1,\n            0,\n            0,\n            0,\n            55,\n            46,\n            1,\n            0,\n            0,\n            0,\n            55,\n            47,\n            1,\n            0,\n            0,\n            0,\n            55,\n            48,\n            1,\n            0,\n            0,\n            0,\n            55,\n            49,\n            1,\n            0,\n            0,\n            0,\n            55,\n            50,\n            1,\n            0,\n            0,\n            0,\n            55,\n            51,\n            1,\n            0,\n            0,\n            0,\n            55,\n            52,\n            1,\n            0,\n            0,\n            0,\n            55,\n            53,\n            1,\n            0,\n            0,\n            0,\n            55,\n            54,\n            1,\n            0,\n            0,\n            0,\n            56,\n            3,\n            1,\n            0,\n            0,\n            0,\n            57,\n            58,\n            3,\n            6,\n            3,\n            0,\n            58,\n            59,\n            5,\n            15,\n            0,\n            0,\n            59,\n            60,\n            3,\n            8,\n            4,\n            0,\n            60,\n            61,\n            5,\n            16,\n            0,\n            0,\n            61,\n            5,\n            1,\n            0,\n            0,\n            0,\n            62,\n            63,\n            5,\n            14,\n            0,\n            0,\n            63,\n            7,\n            1,\n            0,\n            0,\n            0,\n            64,\n            65,\n            7,\n            0,\n            0,\n            0,\n            65,\n            9,\n            1,\n            0,\n            0,\n            0,\n            66,\n            67,\n            5,\n            1,\n            0,\n            0,\n            67,\n            68,\n            5,\n            20,\n            0,\n            0,\n            68,\n            69,\n            5,\n            14,\n            0,\n            0,\n            69,\n            71,\n            5,\n            16,\n            0,\n            0,\n            70,\n            72,\n            3,\n            4,\n            2,\n            0,\n            71,\n            70,\n            1,\n            0,\n            0,\n            0,\n            72,\n            73,\n            1,\n            0,\n            0,\n            0,\n            73,\n            71,\n            1,\n            0,\n            0,\n            0,\n            73,\n            74,\n            1,\n            0,\n            0,\n            0,\n            74,\n            75,\n            1,\n            0,\n            0,\n            0,\n            75,\n            76,\n            5,\n            21,\n            0,\n            0,\n            76,\n            11,\n            1,\n            0,\n            0,\n            0,\n            77,\n            78,\n            5,\n            2,\n            0,\n            0,\n            78,\n            79,\n            5,\n            20,\n            0,\n            0,\n            79,\n            80,\n            5,\n            14,\n            0,\n            0,\n            80,\n            82,\n            5,\n            16,\n            0,\n            0,\n            81,\n            83,\n            3,\n            4,\n            2,\n            0,\n            82,\n            81,\n            1,\n            0,\n            0,\n            0,\n            83,\n            84,\n            1,\n            0,\n            0,\n            0,\n            84,\n            82,\n            1,\n            0,\n            0,\n            0,\n            84,\n            85,\n            1,\n            0,\n            0,\n            0,\n            85,\n            86,\n            1,\n            0,\n            0,\n            0,\n            86,\n            87,\n            5,\n            21,\n            0,\n            0,\n            87,\n            13,\n            1,\n            0,\n            0,\n            0,\n            88,\n            89,\n            5,\n            3,\n            0,\n            0,\n            89,\n            90,\n            5,\n            20,\n            0,\n            0,\n            90,\n            91,\n            5,\n            14,\n            0,\n            0,\n            91,\n            93,\n            5,\n            16,\n            0,\n            0,\n            92,\n            94,\n            3,\n            4,\n            2,\n            0,\n            93,\n            92,\n            1,\n            0,\n            0,\n            0,\n            94,\n            95,\n            1,\n            0,\n            0,\n            0,\n            95,\n            93,\n            1,\n            0,\n            0,\n            0,\n            95,\n            96,\n            1,\n            0,\n            0,\n            0,\n            96,\n            97,\n            1,\n            0,\n            0,\n            0,\n            97,\n            98,\n            5,\n            21,\n            0,\n            0,\n            98,\n            15,\n            1,\n            0,\n            0,\n            0,\n            99,\n            100,\n            5,\n            4,\n            0,\n            0,\n            100,\n            101,\n            5,\n            20,\n            0,\n            0,\n            101,\n            102,\n            5,\n            14,\n            0,\n            0,\n            102,\n            104,\n            5,\n            16,\n            0,\n            0,\n            103,\n            105,\n            3,\n            4,\n            2,\n            0,\n            104,\n            103,\n            1,\n            0,\n            0,\n            0,\n            105,\n            106,\n            1,\n            0,\n            0,\n            0,\n            106,\n            104,\n            1,\n            0,\n            0,\n            0,\n            106,\n            107,\n            1,\n            0,\n            0,\n            0,\n            107,\n            108,\n            1,\n            0,\n            0,\n            0,\n            108,\n            109,\n            5,\n            21,\n            0,\n            0,\n            109,\n            17,\n            1,\n            0,\n            0,\n            0,\n            110,\n            111,\n            5,\n            5,\n            0,\n            0,\n            111,\n            112,\n            5,\n            20,\n            0,\n            0,\n            112,\n            113,\n            5,\n            14,\n            0,\n            0,\n            113,\n            115,\n            5,\n            16,\n            0,\n            0,\n            114,\n            116,\n            3,\n            4,\n            2,\n            0,\n            115,\n            114,\n            1,\n            0,\n            0,\n            0,\n            116,\n            117,\n            1,\n            0,\n            0,\n            0,\n            117,\n            115,\n            1,\n            0,\n            0,\n            0,\n            117,\n            118,\n            1,\n            0,\n            0,\n            0,\n            118,\n            119,\n            1,\n            0,\n            0,\n            0,\n            119,\n            120,\n            5,\n            21,\n            0,\n            0,\n            120,\n            19,\n            1,\n            0,\n            0,\n            0,\n            121,\n            122,\n            5,\n            6,\n            0,\n            0,\n            122,\n            123,\n            5,\n            20,\n            0,\n            0,\n            123,\n            124,\n            5,\n            14,\n            0,\n            0,\n            124,\n            126,\n            5,\n            16,\n            0,\n            0,\n            125,\n            127,\n            3,\n            4,\n            2,\n            0,\n            126,\n            125,\n            1,\n            0,\n            0,\n            0,\n            127,\n            128,\n            1,\n            0,\n            0,\n            0,\n            128,\n            126,\n            1,\n            0,\n            0,\n            0,\n            128,\n            129,\n            1,\n            0,\n            0,\n            0,\n            129,\n            130,\n            1,\n            0,\n            0,\n            0,\n            130,\n            131,\n            5,\n            21,\n            0,\n            0,\n            131,\n            21,\n            1,\n            0,\n            0,\n            0,\n            132,\n            133,\n            5,\n            7,\n            0,\n            0,\n            133,\n            134,\n            5,\n            20,\n            0,\n            0,\n            134,\n            135,\n            5,\n            14,\n            0,\n            0,\n            135,\n            137,\n            5,\n            16,\n            0,\n            0,\n            136,\n            138,\n            3,\n            4,\n            2,\n            0,\n            137,\n            136,\n            1,\n            0,\n            0,\n            0,\n            138,\n            139,\n            1,\n            0,\n            0,\n            0,\n            139,\n            137,\n            1,\n            0,\n            0,\n            0,\n            139,\n            140,\n            1,\n            0,\n            0,\n            0,\n            140,\n            141,\n            1,\n            0,\n            0,\n            0,\n            141,\n            142,\n            5,\n            21,\n            0,\n            0,\n            142,\n            23,\n            1,\n            0,\n            0,\n            0,\n            143,\n            144,\n            5,\n            8,\n            0,\n            0,\n            144,\n            145,\n            5,\n            20,\n            0,\n            0,\n            145,\n            146,\n            5,\n            14,\n            0,\n            0,\n            146,\n            148,\n            5,\n            16,\n            0,\n            0,\n            147,\n            149,\n            3,\n            4,\n            2,\n            0,\n            148,\n            147,\n            1,\n            0,\n            0,\n            0,\n            149,\n            150,\n            1,\n            0,\n            0,\n            0,\n            150,\n            148,\n            1,\n            0,\n            0,\n            0,\n            150,\n            151,\n            1,\n            0,\n            0,\n            0,\n            151,\n            152,\n            1,\n            0,\n            0,\n            0,\n            152,\n            153,\n            5,\n            21,\n            0,\n            0,\n            153,\n            25,\n            1,\n            0,\n            0,\n            0,\n            154,\n            155,\n            5,\n            9,\n            0,\n            0,\n            155,\n            156,\n            5,\n            20,\n            0,\n            0,\n            156,\n            157,\n            5,\n            14,\n            0,\n            0,\n            157,\n            159,\n            5,\n            16,\n            0,\n            0,\n            158,\n            160,\n            3,\n            4,\n            2,\n            0,\n            159,\n            158,\n            1,\n            0,\n            0,\n            0,\n            160,\n            161,\n            1,\n            0,\n            0,\n            0,\n            161,\n            159,\n            1,\n            0,\n            0,\n            0,\n            161,\n            162,\n            1,\n            0,\n            0,\n            0,\n            162,\n            163,\n            1,\n            0,\n            0,\n            0,\n            163,\n            164,\n            5,\n            21,\n            0,\n            0,\n            164,\n            27,\n            1,\n            0,\n            0,\n            0,\n            165,\n            166,\n            5,\n            10,\n            0,\n            0,\n            166,\n            167,\n            5,\n            20,\n            0,\n            0,\n            167,\n            168,\n            5,\n            14,\n            0,\n            0,\n            168,\n            170,\n            5,\n            16,\n            0,\n            0,\n            169,\n            171,\n            3,\n            4,\n            2,\n            0,\n            170,\n            169,\n            1,\n            0,\n            0,\n            0,\n            171,\n            172,\n            1,\n            0,\n            0,\n            0,\n            172,\n            170,\n            1,\n            0,\n            0,\n            0,\n            172,\n            173,\n            1,\n            0,\n            0,\n            0,\n            173,\n            174,\n            1,\n            0,\n            0,\n            0,\n            174,\n            175,\n            5,\n            21,\n            0,\n            0,\n            175,\n            29,\n            1,\n            0,\n            0,\n            0,\n            176,\n            177,\n            5,\n            11,\n            0,\n            0,\n            177,\n            178,\n            5,\n            20,\n            0,\n            0,\n            178,\n            179,\n            5,\n            14,\n            0,\n            0,\n            179,\n            181,\n            5,\n            16,\n            0,\n            0,\n            180,\n            182,\n            3,\n            4,\n            2,\n            0,\n            181,\n            180,\n            1,\n            0,\n            0,\n            0,\n            182,\n            183,\n            1,\n            0,\n            0,\n            0,\n            183,\n            181,\n            1,\n            0,\n            0,\n            0,\n            183,\n            184,\n            1,\n            0,\n            0,\n            0,\n            184,\n            185,\n            1,\n            0,\n            0,\n            0,\n            185,\n            186,\n            5,\n            21,\n            0,\n            0,\n            186,\n            31,\n            1,\n            0,\n            0,\n            0,\n            187,\n            188,\n            5,\n            12,\n            0,\n            0,\n            188,\n            189,\n            5,\n            20,\n            0,\n            0,\n            189,\n            190,\n            5,\n            14,\n            0,\n            0,\n            190,\n            192,\n            5,\n            16,\n            0,\n            0,\n            191,\n            193,\n            3,\n            4,\n            2,\n            0,\n            192,\n            191,\n            1,\n            0,\n            0,\n            0,\n            193,\n            194,\n            1,\n            0,\n            0,\n            0,\n            194,\n            192,\n            1,\n            0,\n            0,\n            0,\n            194,\n            195,\n            1,\n            0,\n            0,\n            0,\n            195,\n            196,\n            1,\n            0,\n            0,\n            0,\n            196,\n            197,\n            5,\n            21,\n            0,\n            0,\n            197,\n            33,\n            1,\n            0,\n            0,\n            0,\n            198,\n            199,\n            5,\n            13,\n            0,\n            0,\n            199,\n            200,\n            5,\n            20,\n            0,\n            0,\n            200,\n            201,\n            5,\n            14,\n            0,\n            0,\n            201,\n            203,\n            5,\n            16,\n            0,\n            0,\n            202,\n            204,\n            3,\n            4,\n            2,\n            0,\n            203,\n            202,\n            1,\n            0,\n            0,\n            0,\n            204,\n            205,\n            1,\n            0,\n            0,\n            0,\n            205,\n            203,\n            1,\n            0,\n            0,\n            0,\n            205,\n            206,\n            1,\n            0,\n            0,\n            0,\n            206,\n            207,\n            1,\n            0,\n            0,\n            0,\n            207,\n            208,\n            5,\n            21,\n            0,\n            0,\n            208,\n            35,\n            1,\n            0,\n            0,\n            0,\n            15,\n            39,\n            55,\n            73,\n            84,\n            95,\n            106,\n            117,\n            128,\n            139,\n            150,\n            161,\n            172,\n            183,\n            194,\n            205\n        ]), Oe = ye.decisionToState.map((t, e)=>new Se.dfa.DFA(t, e)), ke = new Se.PredictionContextCache;\n        class ve extends Se.Parser {\n            constructor(t){\n                super(t), this._interp = new Se.atn.ParserATNSimulator(this, ye, Oe, ke), this.ruleNames = ve.ruleNames, this.literalNames = ve.literalNames, this.symbolicNames = ve.symbolicNames;\n            }\n            get atn() {\n                return ye;\n            }\n            bibTex() {\n                let t = new Pe(this, this._ctx, this.state);\n                this.enterRule(t, 0, ve.RULE_bibTex);\n                var e = 0;\n                try {\n                    for(this.enterOuterAlt(t, 1), this.state = 39, this._errHandler.sync(this), e = this._input.LA(1); 0 == (-32 & e) && 0 != (1 << e & (1 << ve.ARTICLE | 1 << ve.BOOK | 1 << ve.BOOKLET | 1 << ve.INBOOK | 1 << ve.INCOLLECTION | 1 << ve.INPROCEEDINGS | 1 << ve.PROCEEDINGS | 1 << ve.MANUAL | 1 << ve.MASTERTHESIS | 1 << ve.PHDTHESIS | 1 << ve.MISC | 1 << ve.TECHREPORT | 1 << ve.UNPUBLISHED));)this.state = 36, this.entry(), this.state = 41, this._errHandler.sync(this), e = this._input.LA(1);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            entry() {\n                let t = new De(this, this._ctx, this.state);\n                this.enterRule(t, 2, ve.RULE_entry);\n                try {\n                    switch(this.state = 55, this._errHandler.sync(this), this._input.LA(1)){\n                        case ve.ARTICLE:\n                            this.enterOuterAlt(t, 1), this.state = 42, this.article();\n                            break;\n                        case ve.BOOK:\n                            this.enterOuterAlt(t, 2), this.state = 43, this.book();\n                            break;\n                        case ve.BOOKLET:\n                            this.enterOuterAlt(t, 3), this.state = 44, this.booklet();\n                            break;\n                        case ve.INBOOK:\n                            this.enterOuterAlt(t, 4), this.state = 45, this.inbook();\n                            break;\n                        case ve.INCOLLECTION:\n                            this.enterOuterAlt(t, 5), this.state = 46, this.incollection();\n                            break;\n                        case ve.INPROCEEDINGS:\n                            this.enterOuterAlt(t, 6), this.state = 47, this.inproceedings();\n                            break;\n                        case ve.PROCEEDINGS:\n                            this.enterOuterAlt(t, 7), this.state = 48, this.proceedings();\n                            break;\n                        case ve.MANUAL:\n                            this.enterOuterAlt(t, 8), this.state = 49, this.manual();\n                            break;\n                        case ve.MASTERTHESIS:\n                            this.enterOuterAlt(t, 9), this.state = 50, this.mastersthesis();\n                            break;\n                        case ve.PHDTHESIS:\n                            this.enterOuterAlt(t, 10), this.state = 51, this.phdthesis();\n                            break;\n                        case ve.MISC:\n                            this.enterOuterAlt(t, 11), this.state = 52, this.misc();\n                            break;\n                        case ve.TECHREPORT:\n                            this.enterOuterAlt(t, 12), this.state = 53, this.techreport();\n                            break;\n                        case ve.UNPUBLISHED:\n                            this.enterOuterAlt(t, 13), this.state = 54, this.unpublished();\n                            break;\n                        default:\n                            throw new Se.error.NoViableAltException(this);\n                    }\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            field() {\n                let t = new we(this, this._ctx, this.state);\n                this.enterRule(t, 4, ve.RULE_field);\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 57, this.key(), this.state = 58, this.match(ve.EQ), this.state = 59, this.value(), this.state = 60, this.match(ve.COMMA);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            key() {\n                let t = new be(this, this._ctx, this.state);\n                this.enterRule(t, 6, ve.RULE_key);\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 62, this.match(ve.IDENTIFIER);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            value() {\n                let t = new Me(this, this._ctx, this.state);\n                this.enterRule(t, 8, ve.RULE_value);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 64, (e = this._input.LA(1)) !== ve.STRING_LITERAL && e !== ve.INTEGER_LITERAL ? this._errHandler.recoverInline(this) : (this._errHandler.reportMatch(this), this.consume());\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            article() {\n                let t = new Fe(this, this._ctx, this.state);\n                this.enterRule(t, 10, ve.RULE_article);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 66, this.match(ve.ARTICLE), this.state = 67, this.match(ve.LBRACE), this.state = 68, this.match(ve.IDENTIFIER), this.state = 69, this.match(ve.COMMA), this.state = 71, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 70, this.field(), this.state = 73, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 75, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            book() {\n                let t = new Be(this, this._ctx, this.state);\n                this.enterRule(t, 12, ve.RULE_book);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 77, this.match(ve.BOOK), this.state = 78, this.match(ve.LBRACE), this.state = 79, this.match(ve.IDENTIFIER), this.state = 80, this.match(ve.COMMA), this.state = 82, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 81, this.field(), this.state = 84, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 86, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            booklet() {\n                let t = new Ue(this, this._ctx, this.state);\n                this.enterRule(t, 14, ve.RULE_booklet);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 88, this.match(ve.BOOKLET), this.state = 89, this.match(ve.LBRACE), this.state = 90, this.match(ve.IDENTIFIER), this.state = 91, this.match(ve.COMMA), this.state = 93, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 92, this.field(), this.state = 95, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 97, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            inbook() {\n                let t = new He(this, this._ctx, this.state);\n                this.enterRule(t, 16, ve.RULE_inbook);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 99, this.match(ve.INBOOK), this.state = 100, this.match(ve.LBRACE), this.state = 101, this.match(ve.IDENTIFIER), this.state = 102, this.match(ve.COMMA), this.state = 104, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 103, this.field(), this.state = 106, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 108, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            incollection() {\n                let t = new Ke(this, this._ctx, this.state);\n                this.enterRule(t, 18, ve.RULE_incollection);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 110, this.match(ve.INCOLLECTION), this.state = 111, this.match(ve.LBRACE), this.state = 112, this.match(ve.IDENTIFIER), this.state = 113, this.match(ve.COMMA), this.state = 115, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 114, this.field(), this.state = 117, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 119, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            inproceedings() {\n                let t = new Ve(this, this._ctx, this.state);\n                this.enterRule(t, 20, ve.RULE_inproceedings);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 121, this.match(ve.INPROCEEDINGS), this.state = 122, this.match(ve.LBRACE), this.state = 123, this.match(ve.IDENTIFIER), this.state = 124, this.match(ve.COMMA), this.state = 126, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 125, this.field(), this.state = 128, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 130, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            proceedings() {\n                let t = new Ge(this, this._ctx, this.state);\n                this.enterRule(t, 22, ve.RULE_proceedings);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 132, this.match(ve.PROCEEDINGS), this.state = 133, this.match(ve.LBRACE), this.state = 134, this.match(ve.IDENTIFIER), this.state = 135, this.match(ve.COMMA), this.state = 137, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 136, this.field(), this.state = 139, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 141, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            manual() {\n                let t = new qe(this, this._ctx, this.state);\n                this.enterRule(t, 24, ve.RULE_manual);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 143, this.match(ve.MANUAL), this.state = 144, this.match(ve.LBRACE), this.state = 145, this.match(ve.IDENTIFIER), this.state = 146, this.match(ve.COMMA), this.state = 148, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 147, this.field(), this.state = 150, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 152, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            mastersthesis() {\n                let t = new ze(this, this._ctx, this.state);\n                this.enterRule(t, 26, ve.RULE_mastersthesis);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 154, this.match(ve.MASTERTHESIS), this.state = 155, this.match(ve.LBRACE), this.state = 156, this.match(ve.IDENTIFIER), this.state = 157, this.match(ve.COMMA), this.state = 159, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 158, this.field(), this.state = 161, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 163, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            phdthesis() {\n                let t = new Ye(this, this._ctx, this.state);\n                this.enterRule(t, 28, ve.RULE_phdthesis);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 165, this.match(ve.PHDTHESIS), this.state = 166, this.match(ve.LBRACE), this.state = 167, this.match(ve.IDENTIFIER), this.state = 168, this.match(ve.COMMA), this.state = 170, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 169, this.field(), this.state = 172, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 174, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            misc() {\n                let t = new We(this, this._ctx, this.state);\n                this.enterRule(t, 30, ve.RULE_misc);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 176, this.match(ve.MISC), this.state = 177, this.match(ve.LBRACE), this.state = 178, this.match(ve.IDENTIFIER), this.state = 179, this.match(ve.COMMA), this.state = 181, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 180, this.field(), this.state = 183, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 185, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            techreport() {\n                let t = new je(this, this._ctx, this.state);\n                this.enterRule(t, 32, ve.RULE_techreport);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 187, this.match(ve.TECHREPORT), this.state = 188, this.match(ve.LBRACE), this.state = 189, this.match(ve.IDENTIFIER), this.state = 190, this.match(ve.COMMA), this.state = 192, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 191, this.field(), this.state = 194, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 196, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n            unpublished() {\n                let t = new Qe(this, this._ctx, this.state);\n                this.enterRule(t, 34, ve.RULE_unpublished);\n                var e = 0;\n                try {\n                    this.enterOuterAlt(t, 1), this.state = 198, this.match(ve.UNPUBLISHED), this.state = 199, this.match(ve.LBRACE), this.state = 200, this.match(ve.IDENTIFIER), this.state = 201, this.match(ve.COMMA), this.state = 203, this._errHandler.sync(this), e = this._input.LA(1);\n                    do {\n                        this.state = 202, this.field(), this.state = 205, this._errHandler.sync(this), e = this._input.LA(1);\n                    }while (e === ve.IDENTIFIER);\n                    this.state = 207, this.match(ve.RBRACE);\n                } catch (e) {\n                    if (!(e instanceof Se.error.RecognitionException)) throw e;\n                    t.exception = e, this._errHandler.reportError(this, e), this._errHandler.recover(this, e);\n                } finally{\n                    this.exitRule();\n                }\n                return t;\n            }\n        }\n        Le(ve, \"grammarFileName\", \"BibTeX.g4\"), Le(ve, \"literalNames\", [\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            \"'='\",\n            \"','\",\n            \"'\\\"'\",\n            \"'('\",\n            \"')'\",\n            \"'{'\",\n            \"'}'\",\n            \"'@'\"\n        ]), Le(ve, \"symbolicNames\", [\n            null,\n            \"ARTICLE\",\n            \"BOOK\",\n            \"BOOKLET\",\n            \"INBOOK\",\n            \"INCOLLECTION\",\n            \"INPROCEEDINGS\",\n            \"PROCEEDINGS\",\n            \"MANUAL\",\n            \"MASTERTHESIS\",\n            \"PHDTHESIS\",\n            \"MISC\",\n            \"TECHREPORT\",\n            \"UNPUBLISHED\",\n            \"IDENTIFIER\",\n            \"EQ\",\n            \"COMMA\",\n            \"DQUOTE\",\n            \"LPAREN\",\n            \"RPAREN\",\n            \"LBRACE\",\n            \"RBRACE\",\n            \"AT\",\n            \"STRING_LITERAL\",\n            \"INTEGER_LITERAL\",\n            \"WS\",\n            \"LINE_COMMENT\"\n        ]), Le(ve, \"ruleNames\", [\n            \"bibTex\",\n            \"entry\",\n            \"field\",\n            \"key\",\n            \"value\",\n            \"article\",\n            \"book\",\n            \"booklet\",\n            \"inbook\",\n            \"incollection\",\n            \"inproceedings\",\n            \"proceedings\",\n            \"manual\",\n            \"mastersthesis\",\n            \"phdthesis\",\n            \"misc\",\n            \"techreport\",\n            \"unpublished\"\n        ]), ve.EOF = Se.Token.EOF, ve.ARTICLE = 1, ve.BOOK = 2, ve.BOOKLET = 3, ve.INBOOK = 4, ve.INCOLLECTION = 5, ve.INPROCEEDINGS = 6, ve.PROCEEDINGS = 7, ve.MANUAL = 8, ve.MASTERTHESIS = 9, ve.PHDTHESIS = 10, ve.MISC = 11, ve.TECHREPORT = 12, ve.UNPUBLISHED = 13, ve.IDENTIFIER = 14, ve.EQ = 15, ve.COMMA = 16, ve.DQUOTE = 17, ve.LPAREN = 18, ve.RPAREN = 19, ve.LBRACE = 20, ve.RBRACE = 21, ve.AT = 22, ve.STRING_LITERAL = 23, ve.INTEGER_LITERAL = 24, ve.WS = 25, ve.LINE_COMMENT = 26, ve.RULE_bibTex = 0, ve.RULE_entry = 1, ve.RULE_field = 2, ve.RULE_key = 3, ve.RULE_value = 4, ve.RULE_article = 5, ve.RULE_book = 6, ve.RULE_booklet = 7, ve.RULE_inbook = 8, ve.RULE_incollection = 9, ve.RULE_inproceedings = 10, ve.RULE_proceedings = 11, ve.RULE_manual = 12, ve.RULE_mastersthesis = 13, ve.RULE_phdthesis = 14, ve.RULE_misc = 15, ve.RULE_techreport = 16, ve.RULE_unpublished = 17;\n        class Pe extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"entry\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(De) : this.getTypedRuleContext(De, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_bibTex;\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterBibTex(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitBibTex(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitBibTex(this) : t.visitChildren(this);\n            }\n        }\n        class De extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), this.parser = t, this.ruleIndex = ve.RULE_entry;\n            }\n            article() {\n                return this.getTypedRuleContext(Fe, 0);\n            }\n            book() {\n                return this.getTypedRuleContext(Be, 0);\n            }\n            booklet() {\n                return this.getTypedRuleContext(Ue, 0);\n            }\n            inbook() {\n                return this.getTypedRuleContext(He, 0);\n            }\n            incollection() {\n                return this.getTypedRuleContext(Ke, 0);\n            }\n            inproceedings() {\n                return this.getTypedRuleContext(Ve, 0);\n            }\n            proceedings() {\n                return this.getTypedRuleContext(Ge, 0);\n            }\n            manual() {\n                return this.getTypedRuleContext(qe, 0);\n            }\n            mastersthesis() {\n                return this.getTypedRuleContext(ze, 0);\n            }\n            phdthesis() {\n                return this.getTypedRuleContext(Ye, 0);\n            }\n            misc() {\n                return this.getTypedRuleContext(We, 0);\n            }\n            techreport() {\n                return this.getTypedRuleContext(je, 0);\n            }\n            unpublished() {\n                return this.getTypedRuleContext(Qe, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterEntry(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitEntry(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitEntry(this) : t.visitChildren(this);\n            }\n        }\n        class we extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), this.parser = t, this.ruleIndex = ve.RULE_field;\n            }\n            key() {\n                return this.getTypedRuleContext(be, 0);\n            }\n            EQ() {\n                return this.getToken(ve.EQ, 0);\n            }\n            value() {\n                return this.getTypedRuleContext(Me, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterField(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitField(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitField(this) : t.visitChildren(this);\n            }\n        }\n        class be extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), this.parser = t, this.ruleIndex = ve.RULE_key;\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterKey(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitKey(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitKey(this) : t.visitChildren(this);\n            }\n        }\n        class Me extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), this.parser = t, this.ruleIndex = ve.RULE_value;\n            }\n            INTEGER_LITERAL() {\n                return this.getToken(ve.INTEGER_LITERAL, 0);\n            }\n            STRING_LITERAL() {\n                return this.getToken(ve.STRING_LITERAL, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterValue(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitValue(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitValue(this) : t.visitChildren(this);\n            }\n        }\n        class Fe extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_article;\n            }\n            ARTICLE() {\n                return this.getToken(ve.ARTICLE, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterArticle(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitArticle(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitArticle(this) : t.visitChildren(this);\n            }\n        }\n        class Be extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_book;\n            }\n            BOOK() {\n                return this.getToken(ve.BOOK, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterBook(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitBook(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitBook(this) : t.visitChildren(this);\n            }\n        }\n        class Ue extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_booklet;\n            }\n            BOOKLET() {\n                return this.getToken(ve.BOOKLET, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterBooklet(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitBooklet(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitBooklet(this) : t.visitChildren(this);\n            }\n        }\n        class He extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_inbook;\n            }\n            INBOOK() {\n                return this.getToken(ve.INBOOK, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterInbook(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitInbook(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitInbook(this) : t.visitChildren(this);\n            }\n        }\n        class Ke extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_incollection;\n            }\n            INCOLLECTION() {\n                return this.getToken(ve.INCOLLECTION, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterIncollection(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitIncollection(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitIncollection(this) : t.visitChildren(this);\n            }\n        }\n        class Ve extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_inproceedings;\n            }\n            INPROCEEDINGS() {\n                return this.getToken(ve.INPROCEEDINGS, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterInproceedings(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitInproceedings(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitInproceedings(this) : t.visitChildren(this);\n            }\n        }\n        class Ge extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_proceedings;\n            }\n            PROCEEDINGS() {\n                return this.getToken(ve.PROCEEDINGS, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterProceedings(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitProceedings(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitProceedings(this) : t.visitChildren(this);\n            }\n        }\n        class qe extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_manual;\n            }\n            MANUAL() {\n                return this.getToken(ve.MANUAL, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterManual(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitManual(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitManual(this) : t.visitChildren(this);\n            }\n        }\n        class ze extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_mastersthesis;\n            }\n            MASTERTHESIS() {\n                return this.getToken(ve.MASTERTHESIS, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterMastersthesis(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitMastersthesis(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitMastersthesis(this) : t.visitChildren(this);\n            }\n        }\n        class Ye extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_phdthesis;\n            }\n            PHDTHESIS() {\n                return this.getToken(ve.PHDTHESIS, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterPhdthesis(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitPhdthesis(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitPhdthesis(this) : t.visitChildren(this);\n            }\n        }\n        class We extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_misc;\n            }\n            MISC() {\n                return this.getToken(ve.MISC, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterMisc(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitMisc(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitMisc(this) : t.visitChildren(this);\n            }\n        }\n        class je extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_techreport;\n            }\n            TECHREPORT() {\n                return this.getToken(ve.TECHREPORT, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterTechreport(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitTechreport(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitTechreport(this) : t.visitChildren(this);\n            }\n        }\n        class Qe extends Se.ParserRuleContext {\n            constructor(t, e, n){\n                void 0 === e && (e = null), null == n && (n = -1), super(e, n), Le(this, \"field\", function(t) {\n                    return void 0 === t && (t = null), null === t ? this.getTypedRuleContexts(we) : this.getTypedRuleContext(we, t);\n                }), this.parser = t, this.ruleIndex = ve.RULE_unpublished;\n            }\n            UNPUBLISHED() {\n                return this.getToken(ve.UNPUBLISHED, 0);\n            }\n            LBRACE() {\n                return this.getToken(ve.LBRACE, 0);\n            }\n            IDENTIFIER() {\n                return this.getToken(ve.IDENTIFIER, 0);\n            }\n            COMMA() {\n                return this.getToken(ve.COMMA, 0);\n            }\n            RBRACE() {\n                return this.getToken(ve.RBRACE, 0);\n            }\n            enterRule(t) {\n                t instanceof _e && t.enterUnpublished(this);\n            }\n            exitRule(t) {\n                t instanceof _e && t.exitUnpublished(this);\n            }\n            accept(t) {\n                return t instanceof Ne ? t.visitUnpublished(this) : t.visitChildren(this);\n            }\n        }\n        ve.BibTexContext = Pe, ve.EntryContext = De, ve.FieldContext = we, ve.KeyContext = be, ve.ValueContext = Me, ve.ArticleContext = Fe, ve.BookContext = Be, ve.BookletContext = Ue, ve.InbookContext = He, ve.IncollectionContext = Ke, ve.InproceedingsContext = Ve, ve.ProceedingsContext = Ge, ve.ManualContext = qe, ve.MastersthesisContext = ze, ve.PhdthesisContext = Ye, ve.MiscContext = We, ve.TechreportContext = je, ve.UnpublishedContext = Qe;\n        const Xe = \"Integer\", Je = \"String\";\n        function $e(t, e, n) {\n            return function(t, e) {\n                if (t !== e) throw new TypeError(\"Private static access of wrong provenance\");\n            }(t, e), n;\n        }\n        class Ze extends Ne {\n            visitField(t) {\n                const e = t.key().IDENTIFIER().getText();\n                if (t.value().STRING_LITERAL()) {\n                    let n = t.value().STRING_LITERAL().getText();\n                    return n = n.substring(1, n.length - 1), $e(Ze, Ze, tn).call(Ze, e, n, Je);\n                }\n                if (t.value().INTEGER_LITERAL()) return $e(Ze, Ze, tn).call(Ze, e, parseInt(t.value().INTEGER_LITERAL().getText()), Xe);\n                throw new Error(\"The type of field \".concat(e, \" value is not supported.\"));\n            }\n        }\n        function tn(t, e, n) {\n            return {\n                key: t,\n                value: e,\n                type: n\n            };\n        }\n        function en(t, e) {\n            if (e.has(t)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n        }\n        function nn(t, e, n) {\n            if (!e.has(t)) throw new TypeError(\"attempted to get private field on non-instance\");\n            return n;\n        }\n        var sn = new WeakMap, rn = new WeakSet;\n        class on extends Ne {\n            constructor(){\n                var t;\n                super(...arguments), en(this, t = rn), t.add(this), function(t, e, n) {\n                    en(t, e), e.set(t, n);\n                }(this, sn, {\n                    writable: !0,\n                    value: new Ze\n                });\n            }\n            visitArticle(t) {\n                return nn(this, rn, ln).call(this, \"article\", t);\n            }\n            visitBook(t) {\n                return nn(this, rn, ln).call(this, \"book\", t);\n            }\n            visitBooklet(t) {\n                return nn(this, rn, ln).call(this, \"booklet\", t);\n            }\n            visitInbook(t) {\n                return nn(this, rn, ln).call(this, \"inbook\", t);\n            }\n            visitIncollection(t) {\n                return nn(this, rn, ln).call(this, \"incollection\", t);\n            }\n            visitInproceedings(t) {\n                return nn(this, rn, ln).call(this, \"inproceedings\", t);\n            }\n            visitProceedings(t) {\n                return nn(this, rn, ln).call(this, \"proceedings\", t);\n            }\n            visitManual(t) {\n                return nn(this, rn, ln).call(this, \"manual\", t);\n            }\n            visitMastersthesis(t) {\n                return nn(this, rn, ln).call(this, \"masterthesis\", t);\n            }\n            visitPhdthesis(t) {\n                return nn(this, rn, ln).call(this, \"phdthesis\", t);\n            }\n            visitMisc(t) {\n                return nn(this, rn, ln).call(this, \"misc\", t);\n            }\n            visitTechreport(t) {\n                return nn(this, rn, ln).call(this, \"techreport\", t);\n            }\n            visitUnpublished(t) {\n                return nn(this, rn, ln).call(this, \"unpublished\", t);\n            }\n        }\n        function ln(t, e) {\n            return {\n                type: t,\n                id: e.IDENTIFIER().getText(),\n                raw: e.start.getInputStream().getText(e.start.start, e.stop.stop),\n                fields: e.field().map((t)=>{\n                    return t.accept((n = function(t, e, n) {\n                        if (!e.has(t)) throw new TypeError(\"attempted to get private field on non-instance\");\n                        return e.get(t);\n                    }(e = this, sn), function(t, e) {\n                        return e.get ? e.get.call(t) : e.value;\n                    }(e, n)));\n                    var e, n;\n                })\n            };\n        }\n        function an(t, e, n) {\n            !function(t, e) {\n                if (e.has(t)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n            }(t, e), e.set(t, n);\n        }\n        function hn(t, e) {\n            var n = function(t, e, n) {\n                if (!e.has(t)) throw new TypeError(\"attempted to get private field on non-instance\");\n                return e.get(t);\n            }(t, e);\n            return function(t, e) {\n                return e.get ? e.get.call(t) : e.value;\n            }(t, n);\n        }\n        var cn = new WeakMap, un = new WeakMap;\n        class dn extends Ne {\n            constructor(){\n                super(...arguments), an(this, cn, {\n                    writable: !0,\n                    value: new on\n                }), an(this, un, {\n                    writable: !0,\n                    value: {\n                        entries: []\n                    }\n                });\n            }\n            visitEntry(t) {\n                const e = t.accept(hn(this, cn));\n                return hn(this, un).entries.push(...e), super.visitEntry(t);\n            }\n            get bib() {\n                return hn(this, un);\n            }\n        }\n        function pn(t) {\n            const e = gn(t), n = new dn;\n            return e.accept(n), n.bib;\n        }\n        const gn = (t)=>{\n            const e = new Se.InputStream(t), n = new me(e), s = new Se.CommonTokenStream(n), i = new ve(s);\n            return i.buildParseTrees = !0, i.bibTex();\n        }, fn = (t)=>t.entries.map((t)=>{\n                const e = {\n                    id: t.id,\n                    type: t.type,\n                    raw: t.raw\n                };\n                return t.fields.forEach((t)=>{\n                    t.type === Je ? e[t.key] = En(t.value) : t.type === Xe && (e[t.key] = parseInt(t.value));\n                }), e;\n            }), En = (t)=>t.replaceAll(/[{}]/g, \"\").replace('\"', '\\\\\"'), Tn = (t)=>{\n            const e = pn(t);\n            return fn(e);\n        }, xn = (t)=>{\n            const e = pn(t);\n            return e.entries.forEach((t)=>delete t.raw), JSON.stringify(fn(e));\n        };\n    }(), exports.BibtexParser = s;\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bibtex-js-parser/cjs/bibtex-js-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/bibtex-js-parser/index.js":
/*!************************************************!*\
  !*** ./node_modules/bibtex-js-parser/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./cjs/bibtex-js-parser */ \"(rsc)/./node_modules/bibtex-js-parser/cjs/bibtex-js-parser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmlidGV4LWpzLXBhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxtSUFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0LXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9iaWJ0ZXgtanMtcGFyc2VyL2luZGV4LmpzPzI3YjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL2JpYnRleC1qcy1wYXJzZXInKTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/bibtex-js-parser/index.js\n");

/***/ })

};
;