{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../content/definitions/Article.ts", "../../../content/definitions/Author.ts", "../../../content/definitions/Image.ts", "../../../content/definitions/Category.ts", "../../../content/definitions/Series.ts", "../../../content/definitions/Tag.ts", "../../../content/definitions/Snippet.ts"],
  "sourcesContent": ["import withToc from \"@stefanprobst/rehype-extract-toc\";\nimport withTocExport from \"@stefanprobst/rehype-extract-toc/mdx\";\nimport { makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeKatex from \"rehype-katex\";\nimport rehypePrettyCode, { type Options } from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkMath from \"remark-math\";\nimport { Article } from \"./content/definitions/Article\";\nimport { Snippets } from \"./content/definitions/Snippet\";\n\n// Rehype Pretty Code Configuration\nconst PrettyCodeOptions: Partial<Options> = {\n  theme: {\n    dark: \"github-dark\",\n    light: \"github-light\",\n  },\n  onVisitLine(node: any) {\n    // Prevent lines from collapsing in `display: grid` mode, and\n    // allow empty lines to be copy/pasted\n    if (node.children.length === 0) {\n      node.children = [{ type: \"text\", value: \" \" }];\n    }\n  },\n  onVisitHighlightedLine(node: any) {\n    const nodeClass = node.properties.className;\n    if (nodeClass && nodeClass.length > 0) {\n      node.properties.className.push(\"highlighted\");\n    } else {\n      node.properties.className = [\"highlighted\"];\n    }\n  },\n\n  onVisitHighlightedChars(node: any) {\n    node.properties.className = [\"word\"];\n  },\n};\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Article, Snippets],\n  mdx: {\n    esbuildOptions(options) {\n      options.target = \"esnext\";\n      return options;\n    },\n    remarkPlugins: [[remarkGfm], [remarkMath]],\n    rehypePlugins: [\n      [rehypeKatex as any],\n      [rehypeSlug],\n      [rehypePrettyCode, PrettyCodeOptions],\n      [withToc],\n      [withTocExport, { name: \"toc\" }],\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"prepend\",\n          properties: {\n            className: [\"anchor\"],\n          },\n        },\n      ],\n    ],\n  },\n});\n", "import { defineDocumentType } from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\nimport { Author } from \"./Author\";\nimport { Category } from \"./Category\";\nimport { Image } from \"./Image\";\nimport { Series } from \"./Series\";\nimport { Tag } from \"./Tag\";\n\nexport const Article = defineDocumentType(() => ({\n  name: \"Article\",\n  filePathPattern: \"articles/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    publishedAt: {\n      type: \"string\",\n      description: \"The date the post was published\",\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    seoDescription: {\n      type: \"string\",\n      description: \"The SEO description of the post\",\n      required: true,\n    },\n    status: {\n      type: \"enum\",\n      options: [\"draft\", \"published\"],\n      description: \"The status of the post\",\n      required: true,\n    },\n    series: {\n      type: \"nested\",\n      of: Series,\n      description: \"The series the post belongs to\",\n    },\n    tags: {\n      type: \"list\",\n      of: Tag,\n      description: \"The tags of the post\",\n    },\n    categories: {\n      type: \"list\",\n      of: Category,\n      description: \"The categories of the post\",\n      required: true,\n    },\n    author: {\n      type: \"nested\",\n      of: Author,\n      description: \"The author of the post\",\n      required: true,\n    },\n    covers: {\n      type: \"list\",\n      of: Image,\n      description: \"The covers of the post\",\n      required: true,\n    },\n  },\n  computedFields: {\n    readingTime: {\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n    wordCount: {\n      type: \"number\",\n      resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n    },\n    slug: {\n      type: \"string\",\n      description: \"The slug of the post\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nimport { Image } from \"./Image\";\n\nexport const Author = defineNestedType(() => ({\n  name: \"Author\",\n  fields: {\n    name: {\n      type: \"string\",\n      description: \"The name of the author\",\n      required: true,\n    },\n    designation: {\n      type: \"string\",\n      description: \"The designation of the author\",\n      required: true,\n    },\n    url: {\n      type: \"string\",\n      description: \"The URL of the author website\",\n    },\n    avatar: {\n      type: \"nested\",\n      of: Image,\n      description: \"The avatar of the author\",\n      default: {\n        src: \"/images/authors/default.png\",\n        alt: \"Author\",\n      },\n    },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Image = defineNestedType(() => ({\n  name: \"Image\",\n  fields: {\n    url: {\n      type: \"string\",\n      description: \"The URL of the image\",\n      required: true,\n    },\n    alt: {\n      type: \"string\",\n      description: \"The alt text of the image\",\n      required: true,\n    },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Category = defineNestedType(() => ({\n  name: \"Category\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the category\",\n      required: true,\n    },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Series = defineNestedType(() => ({\n  name: \"Series\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the series\",\n      required: true,\n    },\n    order: {\n      type: \"number\",\n      description: \"The order of the series\",\n      required: true,\n    },\n  },\n}));\n", "import { defineNestedType } from \"contentlayer/source-files\";\n\nexport const Tag = defineNestedType(() => ({\n  name: \"Tag\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the tag\",\n      required: true,\n    },\n  },\n}));\n", "import { defineDocumentType } from \"contentlayer/source-files\";\nimport { Image } from \"./Image\";\n\nexport const Snippets = defineDocumentType(() => ({\n  name: \"Snippet\",\n  filePathPattern: \"snippets/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the snippet\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the snippet\",\n      required: true,\n    },\n    language: {\n      type: \"string\",\n      description: \"The language of the snippet\",\n      required: true,\n    },\n    logo: {\n      type: \"nested\",\n      of: Image,\n      description: \"The logo of the snippet\",\n      required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      description: \"The slug of the snippet\",\n      required: true,\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n"],
  "mappings": "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",
  "names": ["defineNestedType", "defineNestedType", "defineNestedType", "defineNestedType", "defineNestedType", "defineDocumentType", "defineDocumentType"]
}
